CUDA Math API API Reference Manual vRelease Version | January 2023 Table of Contents Chapter 1. Modules 1 1.1. FP8 Intrinsics 2 FP8 Conversion and Data Movement 2 C++ struct for handling fp8 data type of e5m2 kind. 2 C++ struct for handling vector type of two fp8 values of e5m2 kind. 2 C++ struct for handling vector type of four fp8 values of e5m2 kind. 3 C++ struct for handling fp8 data type of e4m3 kind. 3 C++ struct for handling vector type of two fp8 values of e4m3 kind. 3 C++ struct for handling vector type of four fp8 values of e4m3 kind. 3 1.1.1. FP8 Conversion and Data Movement 3 nv_fp8_interpretation_t 3 nv_saturation_t 3 nv_fp8_storage_t 4 nv_fp8x2_storage_t 4 nv_fp8x4_storage_t 4 nv_cvt_bfloat16raw2_to_fp8x2 4 nv_cvt_bfloat16raw_to_fp8 4 nv_cvt_double2_to_fp8x2 5 nv_cvt_double_to_fp8 5 nv_cvt_float2_to_fp8x2 6 nv_cvt_float_to_fp8 6 nv_cvt_fp8_to_halfraw 7 nv_cvt_fp8x2_to_halfraw2 7 nv_cvt_halfraw2_to_fp8x2 7 nv_cvt_halfraw_to_fp8 8 1.1.2. C++ struct for handling fp8 data type of e5m2 kind. 8 nv_fp8_e5m2 8 nv_fp8_e5m2:: x 8 nv_fp8_e5m2:: nv_fp8_e5m2 8 nv_fp8_e5m2:: nv_fp8_e5m2 9 nv_fp8_e5m2:: nv_fp8_e5m2 9 nv_fp8_e5m2:: nv_fp8_e5m2 9 nv_fp8_e5m2:: nv_fp8_e5m2 9 nv_fp8_e5m2:: nv_fp8_e5m2 9 nv_fp8_e5m2:: nv_fp8_e5m2 10 nv_fp8_e5m2:: nv_fp8_e5m2 10 CUDA Math API vRelease Version | ii nv_fp8_e5m2:: nv_fp8_e5m2 10 nv_fp8_e5m2:: nv_fp8_e5m2 10 nv_fp8_e5m2:: nv_fp8_e5m2 10 nv_fp8_e5m2:: nv_fp8_e5m2 11 nv_fp8_e5m2:: nv_fp8_e5m2 11 nv_fp8_e5m2::operator half 11 nv_fp8_e5m2::operator nv_bfloat16 11 nv_fp8_e5m2::operator bool 11 nv_fp8_e5m2::operator char 11 nv_fp8_e5m2::operator double 12 nv_fp8_e5m2::operator float 12 nv_fp8_e5m2::operator int 12 nv_fp8_e5m2::operator long int 12 nv_fp8_e5m2::operator long long int 12 nv_fp8_e5m2::operator short int 12 nv_fp8_e5m2::operator signed char 13 nv_fp8_e5m2::operator unsigned char 13 nv_fp8_e5m2::operator unsigned int 13 nv_fp8_e5m2::operator unsigned long int 13 nv_fp8_e5m2::operator unsigned long long int 13 nv_fp8_e5m2::operator unsigned short int 14 1.1.3. C++ struct for handling vector type of two fp8 values of e5m2 kind. 14 nv_fp8x2_e5m2 14 nv_fp8x2_e5m2:: x 14 nv_fp8x2_e5m2:: nv_fp8x2_e5m2 14 nv_fp8x2_e5m2:: nv_fp8x2_e5m2 14 nv_fp8x2_e5m2:: nv_fp8x2_e5m2 15 nv_fp8x2_e5m2:: nv_fp8x2_e5m2 15 nv_fp8x2_e5m2:: nv_fp8x2_e5m2 15 nv_fp8x2_e5m2::operator half2 15 nv_fp8x2_e5m2::operator float2 15 1.1.4. C++ struct for handling vector type of four fp8 values of e5m2 kind. 15 nv_fp8x4_e5m2 16 nv_fp8x4_e5m2:: x 16 nv_fp8x4_e5m2:: nv_fp8x4_e5m2 16 nv_fp8x4_e5m2:: nv_fp8x4_e5m2 16 nv_fp8x4_e5m2:: nv_fp8x4_e5m2 16 nv_fp8x4_e5m2:: nv_fp8x4_e5m2 16 CUDA Math API vRelease Version | iii nv_fp8x4_e5m2:: nv_fp8x4_e5m2 17 nv_fp8x4_e5m2::operator float4 17 1.1.5. C++ struct for handling fp8 data type of e4m3 kind. 17 nv_fp8_e4m3 17 nv_fp8_e4m3:: x 17 nv_fp8_e4m3:: nv_fp8_e4m3 17 nv_fp8_e4m3:: nv_fp8_e4m3 17 nv_fp8_e4m3:: nv_fp8_e4m3 18 nv_fp8_e4m3:: nv_fp8_e4m3 18 nv_fp8_e4m3:: nv_fp8_e4m3 18 nv_fp8_e4m3:: nv_fp8_e4m3 18 nv_fp8_e4m3:: nv_fp8_e4m3 18 nv_fp8_e4m3:: nv_fp8_e4m3 19 nv_fp8_e4m3:: nv_fp8_e4m3 19 nv_fp8_e4m3:: nv_fp8_e4m3 19 nv_fp8_e4m3:: nv_fp8_e4m3 19 nv_fp8_e4m3:: nv_fp8_e4m3 19 nv_fp8_e4m3:: nv_fp8_e4m3 20 nv_fp8_e4m3::operator half 20 nv_fp8_e4m3::operator nv_bfloat16 20 nv_fp8_e4m3::operator bool 20 nv_fp8_e4m3::operator char 20 nv_fp8_e4m3::operator double 20 nv_fp8_e4m3::operator float 21 nv_fp8_e4m3::operator int 21 nv_fp8_e4m3::operator long int 21 nv_fp8_e4m3::operator long long int 21 nv_fp8_e4m3::operator short int 21 nv_fp8_e4m3::operator signed char 21 nv_fp8_e4m3::operator unsigned char 22 nv_fp8_e4m3::operator unsigned int 22 nv_fp8_e4m3::operator unsigned long int 22 nv_fp8_e4m3::operator unsigned long long int 22 nv_fp8_e4m3::operator unsigned short int 22 1.1.6. C++ struct for handling vector type of two fp8 values of e4m3 kind. 23 nv_fp8x2_e4m3 23 nv_fp8x2_e4m3:: x 23 nv_fp8x2_e4m3:: nv_fp8x2_e4m3 23 CUDA Math API vRelease Version | iv nv_fp8x2_e4m3:: nv_fp8x2_e4m3 23 nv_fp8x2_e4m3:: nv_fp8x2_e4m3 23 nv_fp8x2_e4m3:: nv_fp8x2_e4m3 24 nv_fp8x2_e4m3:: nv_fp8x2_e4m3 24 nv_fp8x2_e4m3::operator half2 24 nv_fp8x2_e4m3::operator float2 24 1.1.7. C++ struct for handling vector type of four fp8 values of e4m3 kind. 24 nv_fp8x4_e4m3 24 nv_fp8x4_e4m3:: x 24 nv_fp8x4_e4m3:: nv_fp8x4_e4m3 25 nv_fp8x4_e4m3:: nv_fp8x4_e4m3 25 nv_fp8x4_e4m3:: nv_fp8x4_e4m3 25 nv_fp8x4_e4m3:: nv_fp8x4_e4m3 25 nv_fp8x4_e4m3:: nv_fp8x4_e4m3 25 nv_fp8x4_e4m3::operator float4 25 1.2. Half Precision Intrinsics 26 half 26 half2 26 half2_raw 26 half_raw 26 Half Arithmetic Constants 26 Half Arithmetic Functions 27 Half2 Arithmetic Functions 27 Half Comparison Functions 27 Half2 Comparison Functions 27 Half Precision Conversion and Data Movement 27 Half Math Functions 27 Half2 Math Functions 27 nv_half 27 nv_half2 27 nv_half2_raw 27 nv_half_raw 27 half 27 half2 28 nv_half 28 nv_half2 28 1.2.1. Half Arithmetic Constants 28 CUDART_INF_FP16 28 CUDA Math API vRelease Version | v CUDART_MAX_NORMAL_FP16 28 CUDART_MIN_DENORM_FP16 28 CUDART_NAN_FP16 28 CUDART_NEG_ZERO_FP16 28 CUDART_ONE_FP16 29 CUDART_ZERO_FP16 29 1.2.2. Half Arithmetic Functions 29 habs 29 hadd 29 hadd_rn 30 hadd_sat 30 hdiv 30 hfma 31 hfma_relu 31 hfma_sat 31 hmul 32 hmul_rn 32 hmul_sat 32 hneg 33 hsub 33 hsub_rn 33 hsub_sat 33 atomicAdd 34 operator* 34 operator*= 35 operator+ 35 operator+ 35 operator++ 35 operator++ 35 operator+= 35 operator- 35 operator- 36 operator-- 36 operator-- 36 operator-= 36 operator/ 36 operator/= 36 1.2.3. Half2 Arithmetic Functions 36 CUDA Math API vRelease Version | vi h2div 37 habs2 37 hadd2 37 hadd2_rn 37 hadd2_sat 38 hcmadd 38 hfma2 39 hfma2_relu 39 hfma2_sat 39 hmul2 40 hmul2_rn 40 hmul2_sat 40 hneg2 41 hsub2 41 hsub2_rn 41 hsub2_sat 42 atomicAdd 42 operator* 43 operator*= 43 operator+ 43 operator+ 43 operator++ 43 operator++ 44 operator+= 44 operator- 44 operator- 44 operator-- 44 operator-- 44 operator-= 44 operator/ 45 operator/= 45 1.2.4. Half Comparison Functions 45 heq 45 hequ 46 hge 46 hgeu 47 hgt 47 hgtu 48 CUDA Math API vRelease Version | vii hisinf 48 hisnan 49 hle 49 hleu 49 hlt 50 hltu 50 hmax 51 hmax_nan 51 hmin 51 hmin_nan 52 hne 52 hneu 52 operator!= 53 operator< 53 operator<= 53 operator== 53 operator> 54 operator>= 54 1.2.5. Half2 Comparison Functions 54 hbeq2 54 hbequ2 55 hbge2 55 hbgeu2 56 hbgt2 56 hbgtu2 57 hble2 58 hbleu2 58 hblt2 59 hbltu2 59 hbne2 60 hbneu2 61 heq2 61 heq2_mask 62 hequ2 62 hequ2_mask 63 hge2 63 hge2_mask 64 hgeu2 64 CUDA Math API vRelease Version | viii hgeu2_mask 65 hgt2 65 hgt2_mask 66 hgtu2 66 hgtu2_mask 67 hisnan2 67 hle2 67 hle2_mask 68 hleu2 68 hleu2_mask 69 hlt2 69 hlt2_mask 70 hltu2 70 hltu2_mask 71 hmax2 71 hmax2_nan 72 hmin2 72 hmin2_nan 72 hne2 73 hne2_mask 73 hneu2 74 hneu2_mask 74 operator!= 75 operator< 75 operator<= 75 operator== 75 operator> 75 operator>= 76 1.2.6. Half Precision Conversion and Data Movement 76 double2half 76 float22half2_rn 76 float2half 77 float2half2_rn 77 float2half_rd 78 float2half_rn 78 float2half_ru 78 float2half_rz 79 floats2half2_rn 79 CUDA Math API vRelease Version | ix half22float2 80 half2char_rz 80 half2float 81 half2half2 81 half2int_rd 81 half2int_rn 82 half2int_ru 82 half2int_rz 83 half2ll_rd 83 half2ll_rn 83 half2ll_ru 84 half2ll_rz 84 half2short_rd 85 half2short_rn 85 half2short_ru 86 half2short_rz 86 half2uchar_rz 86 half2uint_rd 87 half2uint_rn 87 half2uint_ru 88 half2uint_rz 88 half2ull_rd 88 half2ull_rn 89 half2ull_ru 89 half2ull_rz 90 half2ushort_rd 90 half2ushort_rn 91 half2ushort_ru 91 half2ushort_rz 92 half_as_short 92 half_as_ushort 93 halves2half2 93 high2float 94 high2half 94 high2half2 94 highs2half2 95 int2half_rd 95 int2half_rn 96 CUDA Math API vRelease Version | x int2half_ru 96 int2half_rz 96 ldca 97 ldca 97 ldcg 97 ldcg 98 ldcs 98 ldcs 98 ldcv 98 ldcv 99 ldg 99 ldg 99 ldlu 99 ldlu 100 ll2half_rd 100 ll2half_rn 100 ll2half_ru 101 ll2half_rz 101 low2float 102 low2half 102 low2half2 102 lowhigh2highlow 103 lows2half2 103 shfl_down_sync 104 shfl_down_sync 105 shfl_sync 105 shfl_sync 106 shfl_up_sync 107 shfl_up_sync 108 shfl_xor_sync 109 shfl_xor_sync 110 short2half_rd 110 short2half_rn 111 short2half_ru 111 short2half_rz 112 short_as_half 112 stcg 112 stcg 113 CUDA Math API vRelease Version | xi stcs 113 stcs 113 stwb 113 stwb 114 stwt 114 stwt 114 uint2half_rd 114 uint2half_rn 115 uint2half_ru 115 uint2half_rz 116 ull2half_rd 116 ull2half_rn 116 ull2half_ru 117 ull2half_rz 117 ushort2half_rd 118 ushort2half_rn 118 ushort2half_ru 119 ushort2half_rz 119 ushort_as_half 120 make_half2 120 1.2.7. Half Math Functions 120 hceil 121 hcos 121 hexp 121 hexp10 122 hexp2 122 hfloor 122 hlog 123 hlog10 123 hlog2 124 hrcp 124 hrint 124 hrsqrt 125 hsin 125 hsqrt 126 htrunc 126 1.2.8. Half2 Math Functions 126 h2ceil 127 CUDA Math API vRelease Version | xii h2cos 127 h2exp 127 h2exp10 128 h2exp2 128 h2floor 129 h2log 129 h2log10 129 h2log2 130 h2rcp 130 h2rint 131 h2rsqrt 131 h2sin 131 h2sqrt 132 h2trunc 132 1.3. Bfloat16 Precision Intrinsics 132 nv_bfloat16 133 nv_bfloat162 133 nv_bfloat162_raw 133 nv_bfloat16_raw 133 Bfloat16 Arithmetic Constants 133 Bfloat16 Arithmetic Functions 133 Bfloat162 Arithmetic Functions 134 Bfloat16 Comparison Functions 134 Bfloat162 Comparison Functions 134 Bfloat16 Precision Conversion and Data Movement 134 Bfloat16 Math Functions 134 Bfloat162 Math Functions 134 nv_bfloat16 134 nv_bfloat162 134 1.3.1. Bfloat16 Arithmetic Constants 134 CUDART_INF_BF16 134 CUDART_MAX_NORMAL_BF16 135 CUDART_MIN_DENORM_BF16 135 CUDART_NAN_BF16 135 CUDART_NEG_ZERO_BF16 135 CUDART_ONE_BF16 135 CUDART_ZERO_BF16 135 1.3.2. Bfloat16 Arithmetic Functions 135 CUDA Math API vRelease Version | xiii h2div 135 habs 136 hadd 136 hadd_rn 136 hadd_sat 136 hdiv 137 hfma 137 hfma_relu 137 hfma_sat 138 hmul 138 hmul_rn 139 hmul_sat 139 hneg 139 hsub 140 hsub_rn 140 hsub_sat 140 atomicAdd 141 operator* 141 operator*= 141 operator+ 142 operator+ 142 operator++ 142 operator++ 142 operator+= 142 operator- 142 operator- 143 operator-- 143 operator-- 143 operator-= 143 operator/ 143 operator/= 143 1.3.3. Bfloat162 Arithmetic Functions 144 habs2 144 hadd2 144 hadd2_rn 144 hadd2_sat 145 hcmadd 145 hfma2 146 CUDA Math API vRelease Version | xiv hfma2_relu 146 hfma2_sat 146 hmul2 147 hmul2_rn 147 hmul2_sat 147 hneg2 148 hsub2 148 hsub2_rn 148 hsub2_sat 149 atomicAdd 149 operator* 150 operator*= 150 operator+ 150 operator+ 150 operator++ 151 operator++ 151 operator+= 151 operator- 151 operator- 151 operator-- 151 operator-- 152 operator-= 152 operator/ 152 operator/= 152 1.3.4. Bfloat16 Comparison Functions 152 heq 152 hequ 153 hge 153 hgeu 154 hgt 154 hgtu 155 hisinf 155 hisnan 156 hle 156 hleu 157 hlt 157 hltu 158 hmax 158 CUDA Math API vRelease Version | xv hmax_nan 158 hmin 159 hmin_nan 159 hne 159 hneu 160 operator!= 160 operator< 160 operator<= 161 operator== 161 operator> 161 operator>= 161 1.3.5. Bfloat162 Comparison Functions 161 hbeq2 162 hbequ2 162 hbge2 163 hbgeu2 163 hbgt2 164 hbgtu2 165 hble2 165 hbleu2 166 hblt2 166 hbltu2 167 hbne2 168 hbneu2 168 heq2 169 heq2_mask 169 hequ2 170 hequ2_mask 170 hge2 171 hge2_mask 171 hgeu2 172 hgeu2_mask 172 hgt2 173 hgt2_mask 173 hgtu2 174 hgtu2_mask 174 hisnan2 175 hle2 175 CUDA Math API vRelease Version | xvi hle2_mask 176 hleu2 176 hleu2_mask 177 hlt2 177 hlt2_mask 178 hltu2 178 hltu2_mask 179 hmax2 179 hmax2_nan 180 hmin2 180 hmin2_nan 180 hne2 181 hne2_mask 181 hneu2 182 hneu2_mask 182 operator!= 183 operator< 183 operator<= 183 operator== 183 operator> 184 operator>= 184 1.3.6. Bfloat16 Precision Conversion and Data Movement 184 bfloat1622float2 184 bfloat162bfloat162 185 bfloat162char_rz 185 bfloat162float 186 bfloat162int_rd 186 bfloat162int_rn 186 bfloat162int_ru 187 bfloat162int_rz 187 bfloat162ll_rd 188 bfloat162ll_rn 188 bfloat162ll_ru 189 bfloat162ll_rz 189 bfloat162short_rd 190 bfloat162short_rn 190 bfloat162short_ru 191 bfloat162short_rz 191 CUDA Math API vRelease Version | xvii bfloat162uchar_rz 192 bfloat162uint_rd 192 bfloat162uint_rn 193 bfloat162uint_ru 193 bfloat162uint_rz 194 bfloat162ull_rd 194 bfloat162ull_rn 195 bfloat162ull_ru 195 bfloat162ull_rz 196 bfloat162ushort_rd 196 bfloat162ushort_rn 197 bfloat162ushort_ru 197 bfloat162ushort_rz 198 bfloat16_as_short 198 bfloat16_as_ushort 199 double2bfloat16 199 float22bfloat162_rn 199 float2bfloat16 200 float2bfloat162_rn 200 float2bfloat16_rd 201 float2bfloat16_rn 201 float2bfloat16_ru 202 float2bfloat16_rz 202 floats2bfloat162_rn 202 halves2bfloat162 203 high2bfloat16 203 high2bfloat162 204 high2float 204 highs2bfloat162 205 int2bfloat16_rd 205 int2bfloat16_rn 206 int2bfloat16_ru 206 int2bfloat16_rz 206 ldca 207 ldca 207 ldcg 207 ldcg 208 ldcs 208 CUDA Math API vRelease Version | xviii ldcs 208 ldcv 208 ldcv 209 ldg 209 ldg 209 ldlu 209 ldlu 210 ll2bfloat16_rd 210 ll2bfloat16_rn 210 ll2bfloat16_ru 211 ll2bfloat16_rz 211 low2bfloat16 211 low2bfloat162 212 low2float 212 lowhigh2highlow 213 lows2bfloat162 213 shfl_down_sync 214 shfl_down_sync 215 shfl_sync 215 shfl_sync 216 shfl_up_sync 217 shfl_up_sync 218 shfl_xor_sync 219 shfl_xor_sync 220 short2bfloat16_rd 220 short2bfloat16_rn 221 short2bfloat16_ru 221 short2bfloat16_rz 222 short_as_bfloat16 222 stcg 222 stcg 223 stcs 223 stcs 223 stwb 223 stwb 224 stwt 224 stwt 224 uint2bfloat16_rd 224 CUDA Math API vRelease Version | xix uint2bfloat16_rn 225 uint2bfloat16_ru 225 uint2bfloat16_rz 226 ull2bfloat16_rd 226 ull2bfloat16_rn 226 ull2bfloat16_ru 227 ull2bfloat16_rz 227 ushort2bfloat16_rd 228 ushort2bfloat16_rn 228 ushort2bfloat16_ru 228 ushort2bfloat16_rz 229 ushort_as_bfloat16 229 make_bfloat162 230 1.3.7. Bfloat16 Math Functions 230 hceil 230 hcos 231 hexp 231 hexp10 231 hexp2 232 hfloor 232 hlog 233 hlog10 233 hlog2 233 hrcp 234 hrint 234 hrsqrt 235 hsin 235 hsqrt 235 htrunc 236 1.3.8. Bfloat162 Math Functions 236 h2ceil 236 h2cos 237 h2exp 237 h2exp10 238 h2exp2 238 h2floor 238 h2log 239 h2log10 239 CUDA Math API vRelease Version | xx h2log2 240 h2rcp 240 h2rint 240 h2rsqrt 241 h2sin 241 h2sqrt 242 h2trunc 242 1.4. Mathematical Functions 242 1.5. Single Precision Mathematical Functions 243 acosf 243 acoshf 243 asinf 244 asinhf 244 atan2f 245 atanf 246 atanhf 246 cbrtf 247 ceilf 247 copysignf 247 cosf 248 coshf 248 cospif 249 cyl_bessel_i0f 249 cyl_bessel_i1f 249 erfcf 250 erfcinvf 250 erfcxf 251 erff 251 erfinvf 252 exp10f 252 exp2f 253 expf 253 expm1f 254 fabsf 254 fdimf 255 fdividef 255 floorf 256 fmaf 256 CUDA Math API vRelease Version | xxi fmaxf 257 fminf 257 fmodf 258 frexpf 258 hypotf 259 ilogbf 259 isfinite 260 isinf 260 isnan 261 j0f 261 j1f 261 jnf 262 ldexpf 262 lgammaf 263 llrintf 263 llroundf 264 log10f 264 log1pf 265 log2f 265 logbf 266 logf 266 lrintf 267 lroundf 267 max 267 min 268 modff 268 nanf 268 nearbyintf 269 nextafterf 269 norm3df 270 norm4df 270 normcdff 271 normcdfinvf 271 normf 272 powf 272 rcbrtf 273 remainderf 274 remquof 274 CUDA Math API vRelease Version | xxii rhypotf 275 rintf 275 rnorm3df 276 rnorm4df 276 rnormf 277 roundf 277 rsqrtf 278 scalblnf 278 scalbnf 278 signbit 279 sincosf 279 sincospif 280 sinf 280 sinhf 281 sinpif 281 sqrtf 282 tanf 282 tanhf 283 tgammaf 283 truncf 284 y0f 284 y1f 284 ynf 285 1.6. Double Precision Mathematical Functions 286 acos 286 acosh 286 asin 287 asinh 287 atan 288 atan2 288 atanh 289 cbrt 289 ceil 290 copysign 290 cos 290 cosh 291 cospi 291 cyl_bessel_i0 292 CUDA Math API vRelease Version | xxiii cyl_bessel_i1 292 erf 292 erfc 293 erfcinv 293 erfcx 294 erfinv 294 exp 295 exp10 295 exp2 296 expm1 296 fabs 297 fdim 297 floor 298 fma 298 fmax 299 fmin 299 fmod 300 frexp 300 hypot 301 ilogb 301 isfinite 302 isinf 302 isnan 303 j0 303 j1 303 jn 304 ldexp 304 lgamma 305 llrint 305 llround 306 log 306 log10 306 log1p 307 log2 307 logb 308 lrint 308 lround 309 max 309 CUDA Math API vRelease Version | xxiv max 309 max 309 min 310 min 310 min 310 modf 310 nan 311 nearbyint 311 nextafter 312 norm 312 norm3d 313 norm4d 313 normcdf 314 normcdfinv 314 pow 315 rcbrt 316 remainder 316 remquo 317 rhypot 317 rint 318 rnorm 318 rnorm3d 319 rnorm4d 319 round 320 rsqrt 320 scalbln 321 scalbn 321 signbit 321 sin 322 sincos 322 sincospi 323 sinh 323 sinpi 324 sqrt 324 tan 325 tanh 325 tgamma 325 trunc 326 CUDA Math API vRelease Version | xxv y0 326 y1 327 yn 327 1.7. Integer Mathematical Functions 328 abs 328 labs 328 llabs 328 llmax 329 llmin 329 max 329 max 329 max 330 max 330 max 330 max 330 max 330 max 331 max 331 max 331 max 331 max 331 min 332 min 332 min 332 min 332 min 333 min 333 min 333 min 333 min 333 min 334 min 334 min 334 ullmax 334 ullmin 334 umax 335 umin 335 1.8. Single Precision Intrinsics 335 CUDA Math API vRelease Version | xxvi cosf 335 exp10f 336 expf 336 fadd_rd 336 fadd_rn 337 fadd_ru 337 fadd_rz 338 fdiv_rd 338 fdiv_rn 338 fdiv_ru 339 fdiv_rz 339 fdividef 339 fmaf_ieee_rd 340 fmaf_ieee_rn 340 fmaf_ieee_ru 340 fmaf_ieee_rz 341 fmaf_rd 341 fmaf_rn 341 fmaf_ru 342 fmaf_rz 342 fmul_rd 343 fmul_rn 343 fmul_ru 344 fmul_rz 344 frcp_rd 345 frcp_rn 345 frcp_ru 345 frcp_rz 346 frsqrt_rn 346 fsqrt_rd 347 fsqrt_rn 347 fsqrt_ru 347 fsqrt_rz 348 fsub_rd 348 fsub_rn 349 fsub_ru 349 fsub_rz 349 log10f 350 CUDA Math API vRelease Version | xxvii log2f 350 logf 351 powf 351 saturatef 351 sincosf 352 sinf 352 tanf 353 1.9. Double Precision Intrinsics 353 dadd_rd 353 dadd_rn 354 dadd_ru 354 dadd_rz 354 ddiv_rd 355 ddiv_rn 355 ddiv_ru 356 ddiv_rz 356 dmul_rd 356 dmul_rn 357 dmul_ru 357 dmul_rz 358 drcp_rd 358 drcp_rn 359 drcp_ru 359 drcp_rz 359 dsqrt_rd 360 dsqrt_rn 360 dsqrt_ru 361 dsqrt_rz 361 dsub_rd 362 dsub_rn 362 dsub_ru 362 dsub_rz 363 fma_rd 363 fma_rn 364 fma_ru 364 fma_rz 365 1.10. Integer Intrinsics 366 brev 366 CUDA Math API vRelease Version | xxviii brevll 366 byte_perm 366 clz 367 clzll 367 dp2a_hi 368 dp2a_hi 368 dp2a_hi 368 dp2a_hi 368 dp2a_lo 369 dp2a_lo 369 dp2a_lo 369 dp2a_lo 369 dp4a 370 dp4a 370 dp4a 370 dp4a 370 ffs 370 ffsll 371 fns 371 funnelshift_l 371 funnelshift_lc 372 funnelshift_r 372 funnelshift_rc 373 hadd 373 mul24 373 mul64hi 374 mulhi 374 popc 374 popcll 374 rhadd 375 sad 375 uhadd 375 umul24 376 umul64hi 376 umulhi 376 urhadd 377 usad 377 1.11. Type Casting Intrinsics 377 CUDA Math API vRelease Version | xxix double2float_rd 378 double2float_rn 378 double2float_ru 378 double2float_rz 378 double2hiint 379 double2int_rd 379 double2int_rn 379 double2int_ru 380 double2int_rz 380 double2ll_rd 380 double2ll_rn 380 double2ll_ru 381 double2ll_rz 381 double2loint 381 double2uint_rd 382 double2uint_rn 382 double2uint_ru 382 double2uint_rz 382 double2ull_rd 383 double2ull_rn 383 double2ull_ru 383 double2ull_rz 384 double_as_longlong 384 float2int_rd 384 float2int_rn 384 float2int_ru 385 float2int_rz 385 float2ll_rd 385 float2ll_rn 386 float2ll_ru 386 float2ll_rz 386 float2uint_rd 386 float2uint_rn 387 float2uint_ru 387 float2uint_rz 387 float2ull_rd 388 float2ull_rn 388 float2ull_ru 388 CUDA Math API vRelease Version | xxx float2ull_rz 389 float_as_int 389 float_as_uint 389 hiloint2double 389 int2double_rn 390 int2float_rd 390 int2float_rn 390 int2float_ru 391 int2float_rz 391 int_as_float 391 ll2double_rd 391 ll2double_rn 392 ll2double_ru 392 ll2double_rz 392 ll2float_rd 393 ll2float_rn 393 ll2float_ru 393 ll2float_rz 393 longlong_as_double 394 uint2double_rn 394 uint2float_rd 394 uint2float_rn 395 uint2float_ru 395 uint2float_rz 395 uint_as_float 395 ull2double_rd 396 ull2double_rn 396 ull2double_ru 396 ull2double_rz 397 ull2float_rd 397 ull2float_rn 397 ull2float_ru 398 ull2float_rz 398 1.12. SIMD Intrinsics 398 vabs2 398 vabs4 399 vabsdiffs2 399 vabsdiffs4 399 CUDA Math API vRelease Version | xxxi vabsdiffu2 400 vabsdiffu4 400 vabsss2 400 vabsss4 401 vadd2 401 vadd4 401 vaddss2 402 vaddss4 402 vaddus2 402 vaddus4 403 vavgs2 403 vavgs4 403 vavgu2 404 vavgu4 404 vcmpeq2 404 vcmpeq4 405 vcmpges2 405 vcmpges4 405 vcmpgeu2 406 vcmpgeu4 406 vcmpgts2 406 vcmpgts4 407 vcmpgtu2 407 vcmpgtu4 407 vcmples2 408 vcmples4 408 vcmpleu2 408 vcmpleu4 409 vcmplts2 409 vcmplts4 409 vcmpltu2 410 vcmpltu4 410 vcmpne2 410 vcmpne4 411 vhaddu2 411 vhaddu4 411 viaddmax_s16x2 412 viaddmax_s16x2_relu 412 CUDA Math API vRelease Version | xxxii viaddmax_s32 412 viaddmax_s32_relu 413 viaddmax_u16x2 413 viaddmax_u32 413 viaddmin_s16x2 414 viaddmin_s16x2_relu 414 viaddmin_s32 414 viaddmin_s32_relu 415 viaddmin_u16x2 415 viaddmin_u32 415 vibmax_s16x2 416 vibmax_s32 416 vibmax_u16x2 416 vibmax_u32 417 vibmin_s16x2 417 vibmin_s32 418 vibmin_u16x2 418 vibmin_u32 418 vimax3_s16x2 419 vimax3_s16x2_relu 419 vimax3_s32 420 vimax3_s32_relu 420 vimax3_u16x2 420 vimax3_u32 421 vimax_s16x2_relu 421 vimax_s32_relu 421 vimin3_s16x2 422 vimin3_s16x2_relu 422 vimin3_s32 422 vimin3_s32_relu 423 vimin3_u16x2 423 vimin3_u32 423 vimin_s16x2_relu 424 vimin_s32_relu 424 vmaxs2 424 vmaxs4 425 vmaxu2 425 vmaxu4 425 CUDA Math API vRelease Version | xxxiii vmins2 426 vmins4 426 vminu2 426 vminu4 427 vneg2 427 vneg4 427 vnegss2 427 vnegss4 428 vsads2 428 vsads4 428 vsadu2 429 vsadu4 429 vseteq2 429 vseteq4 430 vsetges2 430 vsetges4 430 vsetgeu2 431 vsetgeu4 431 vsetgts2 431 vsetgts4 432 vsetgtu2 432 vsetgtu4 432 vsetles2 433 vsetles4 433 vsetleu2 433 vsetleu4 434 vsetlts2 434 vsetlts4 434 vsetltu2 435 vsetltu4 435 vsetne2 435 vsetne4 436 vsub2 436 vsub4 436 vsubss2 437 vsubss4 437 vsubus2 437 vsubus4 438 CUDA Math API vRelease Version | xxxiv Chapter 2. Data Structures 439 half 440 x 440 half 440 half 440 half 440 half 440 half 441 half 441 half 441 half 441 half 441 half 441 half 442 half 442 operator half_raw 442 operator half_raw 442 operator bool 442 operator char 442 operator float 443 operator int 443 operator long 443 operator long long 443 operator short 443 operator signed char 443 operator unsigned char 444 operator unsigned int 444 operator unsigned long 444 operator unsigned long long 444 operator unsigned short 444 operator= 445 operator= 445 operator= 445 operator= 445 operator= 445 operator= 446 operator= 446 operator= 446 CUDA Math API vRelease Version | xxxv operator= 446 operator= 446 operator= 446 half2 447 x 447 y 447 half2 447 half2 447 half2 447 half2 447 operator half2_raw 448 operator= 448 operator= 448 half2_raw 448 half_raw 448 nv_bfloat16 449 x 449 nv_bfloat16 449 nv_bfloat16 449 nv_bfloat16 449 nv_bfloat16 449 nv_bfloat16 450 nv_bfloat16 450 nv_bfloat16 450 nv_bfloat16 450 nv_bfloat16 450 nv_bfloat16 450 nv_bfloat16 451 nv_bfloat16 451 operator nv_bfloat16_raw 451 operator nv_bfloat16_raw 451 operator bool 451 operator char 451 operator float 452 operator int 452 operator long 452 operator long long 452 operator short 452 CUDA Math API vRelease Version | xxxvi operator signed char 452 operator unsigned char 453 operator unsigned int 453 operator unsigned long 453 operator unsigned long long 453 operator unsigned short 453 operator= 454 operator= 454 operator= 454 operator= 454 operator= 454 operator= 454 operator= 455 operator= 455 operator= 455 operator= 455 operator= 455 nv_bfloat162 456 x 456 y 456 nv_bfloat162 456 nv_bfloat162 456 nv_bfloat162 456 nv_bfloat162 456 operator nv_bfloat162_raw 457 operator= 457 operator= 457 nv_bfloat162_raw 457 nv_bfloat16_raw 457 nv_fp8_e4m3 458 x 458 nv_fp8_e4m3 458 nv_fp8_e4m3 458 nv_fp8_e4m3 458 nv_fp8_e4m3 458 nv_fp8_e4m3 459 nv_fp8_e4m3 459 nv_fp8_e4m3 459 CUDA Math API vRelease Version | xxxvii nv_fp8_e4m3 459 nv_fp8_e4m3 459 nv_fp8_e4m3 460 nv_fp8_e4m3 460 nv_fp8_e4m3 460 nv_fp8_e4m3 460 operator half 460 operator nv_bfloat16 460 operator bool 461 operator char 461 operator double 461 operator float 461 operator int 461 operator long int 461 operator long long int 462 operator short int 462 operator signed char 462 operator unsigned char 462 operator unsigned int 462 operator unsigned long int 462 operator unsigned long long int 463 operator unsigned short int 463 nv_fp8_e5m2 463 x 463 nv_fp8_e5m2 463 nv_fp8_e5m2 463 nv_fp8_e5m2 464 nv_fp8_e5m2 464 nv_fp8_e5m2 464 nv_fp8_e5m2 464 nv_fp8_e5m2 464 nv_fp8_e5m2 465 nv_fp8_e5m2 465 nv_fp8_e5m2 465 nv_fp8_e5m2 465 nv_fp8_e5m2 465 nv_fp8_e5m2 465 operator half 466 CUDA Math API vRelease Version | xxxviii operator nv_bfloat16 466 operator bool 466 operator char 466 operator double 466 operator float 466 operator int 467 operator long int 467 operator long long int 467 operator short int 467 operator signed char 467 operator unsigned char 467 operator unsigned int 468 operator unsigned long int 468 operator unsigned long long int 468 operator unsigned short int 468 nv_fp8x2_e4m3 468 x 468 nv_fp8x2_e4m3 469 nv_fp8x2_e4m3 469 nv_fp8x2_e4m3 469 nv_fp8x2_e4m3 469 nv_fp8x2_e4m3 469 operator half2 469 operator float2 470 nv_fp8x2_e5m2 470 x 470 nv_fp8x2_e5m2 470 nv_fp8x2_e5m2 470 nv_fp8x2_e5m2 470 nv_fp8x2_e5m2 471 nv_fp8x2_e5m2 471 operator half2 471 operator float2 471 nv_fp8x4_e4m3 471 x 471 nv_fp8x4_e4m3 471 nv_fp8x4_e4m3 472 nv_fp8x4_e4m3 472 CUDA Math API vRelease Version | xxxix nv_fp8x4_e4m3 472 nv_fp8x4_e4m3 472 operator float4 472 nv_fp8x4_e5m2 472 x 473 nv_fp8x4_e5m2 473 nv_fp8x4_e5m2 473 nv_fp8x4_e5m2 473 nv_fp8x4_e5m2 473 nv_fp8x4_e5m2 473 operator float4 474 Chapter 3. Data Fields 475 CUDA Math API vRelease Version | xl Chapter 1. Modules Here is a list of all modules: ‣ FP8 Intrinsics ‣ FP8 Conversion and Data Movement ‣ C++ struct for handling fp8 data type of e5m2 kind. ‣ C++ struct for handling vector type of two fp8 values of e5m2 kind. ‣ C++ struct for handling vector type of four fp8 values of e5m2 kind. ‣ C++ struct for handling fp8 data type of e4m3 kind. ‣ C++ struct for handling vector type of two fp8 values of e4m3 kind. ‣ C++ struct for handling vector type of four fp8 values of e4m3 kind. ‣ Half Precision Intrinsics ‣ Half Arithmetic Constants ‣ Half Arithmetic Functions ‣ Half2 Arithmetic Functions ‣ Half Comparison Functions ‣ Half2 Comparison Functions ‣ Half Precision Conversion and Data Movement ‣ Half Math Functions ‣ Half2 Math Functions ‣ Bfloat16 Precision Intrinsics ‣ Bfloat16 Arithmetic Constants ‣ Bfloat16 Arithmetic Functions ‣ Bfloat162 Arithmetic Functions ‣ Bfloat16 Comparison Functions CUDA Math API vRelease Version | 1 Modules ‣ Bfloat162 Comparison Functions ‣ Bfloat16 Precision Conversion and Data Movement ‣ Bfloat16 Math Functions ‣ Bfloat162 Math Functions ‣ Mathematical Functions ‣ Single Precision Mathematical Functions ‣ Double Precision Mathematical Functions ‣ Integer Mathematical Functions ‣ Single Precision Intrinsics ‣ Double Precision Intrinsics ‣ Integer Intrinsics ‣ Type Casting Intrinsics ‣ SIMD Intrinsics 1.1. FP8 Intrinsics This section describes fp8 intrinsic functions. To use these functions, include the header file cuda_fp8.h in your program. The following macros are available to help users selectively enable/disable various definitions present in the header file: ‣ CUDA_NO_FP8_CONVERSIONS - If defined, this macro will prevent any use of the C++ type conversions (converting constructors and conversion operators) defined in the header. ‣ CUDA_NO_FP8_CONVERSION_OPERATORS - If defined, this macro will prevent any use of the C++ conversion operators from fp8 to other types. FP8 Conversion and Data Movement C++ struct for handling fp8 data type of e5m2 kind. C++ struct for handling vector type of two fp8 values of e5m2 kind. CUDA Math API vRelease Version | 2 Modules C++ struct for handling vector type of four fp8 values of e5m2 kind. C++ struct for handling fp8 data type of e4m3 kind. C++ struct for handling vector type of two fp8 values of e4m3 kind. C++ struct for handling vector type of four fp8 values of e4m3 kind. 1.1.1. FP8 Conversion and Data Movement FP8 Intrinsics To use these functions, include the header file cuda_fp8.h in your program. enum nv_fp8_interpretation_t Enumerates the possible interpretations of the 8-bit values when referring to them as fp8 types. Values NV_E4M3 Stands for fp8 numbers of e4m3 kind. NV_E5M2 Stands for fp8 numbers of e5m2 kind. enum nv_saturation_t Enumerates the modes applicable when performing a narrowing conversion to fp8 destination types. Values NV_NOSAT Means no saturation to finite is performed when conversion results in rounding values outside the range of destination type. NOTE: for fp8 type of e4m3 kind, the results that are larger than the maximum representable finite number of the target format become NaN. NV_SATFINITE CUDA Math API vRelease Version | 3 Modules Means input larger than the maximum representable finite number MAXNORM of the target format round to the MAXNORM of the same sign as input. typedef unsigned char nv_fp8_storage_t 8-bit unsigned integer type abstraction used to for fp8 floating-point numbers storage. typedef unsigned short int nv_fp8x2_storage_t 16-bit unsigned integer type abstraction used to for storage of pairs of fp8 floating-point numbers. typedef unsigned int nv_fp8x4_storage_t 32-bit unsigned integer type abstraction used to for storage of tetrads of fp8 floating- point numbers. host device nv_fp8x2_storage_t nv_cvt_bfloat16raw2_to_fp8x2 (const nv_bfloat162_raw x, const nv_saturation_t saturate, const nv_fp8_interpretation_t fp8_interpretation) Converts input vector of two nv_bfloat16 precision numbers packed in nv_bfloat162_raw x into a vector of two values of fp8 type of the requested kind using round-to-nearest-even rounding and requested saturation mode. Returns ‣ The nv_fp8x2_storage_t value holds the result of conversion. Description Converts input vector x to a vector of two fp8 values of the kind specified by fp8_interpretation parameter, using round-to-nearest-even rounding and saturation mode specified by saturate parameter. host device nv_fp8_storage_t nv_cvt_bfloat16raw_to_fp8 (const nv_bfloat16_raw x, const nv_saturation_t saturate, const nv_fp8_interpretation_t fp8_interpretation) Converts input nv_bfloat16 precision x to fp8 type of the requested kind using round-to- nearest-even rounding and requested saturation mode. Returns ‣ The nv_fp8_storage_t value holds the result of conversion. CUDA Math API vRelease Version | 4 Modules Description Converts input x to fp8 type of the kind specified by fp8_interpretation parameter, using round-to-nearest-even rounding and saturation mode specified by saturate parameter. host device nv_fp8x2_storage_t nv_cvt_double2_to_fp8x2 (const double2 x, const nv_saturation_t saturate, const nv_fp8_interpretation_t fp8_interpretation) Converts input vector of two double precision numbers packed in double2 x into a vector of two values of fp8 type of the requested kind using round-to-nearest-even rounding and requested saturation mode. Returns ‣ The nv_fp8x2_storage_t value holds the result of conversion. Description Converts input vector x to a vector of two fp8 values of the kind specified by fp8_interpretation parameter, using round-to-nearest-even rounding and saturation mode specified by saturate parameter. host device nv_fp8_storage_t nv_cvt_double_to_fp8 (const double x, const nv_saturation_t saturate, const nv_fp8_interpretation_t fp8_interpretation) Converts input double precision x to fp8 type of the requested kind using round-to-nearest- even rounding and requested saturation mode. Returns ‣ The nv_fp8_storage_t value holds the result of conversion. Description Converts input x to fp8 type of the kind specified by fp8_interpretation parameter, using round-to-nearest-even rounding and saturation mode specified by saturate parameter. CUDA Math API vRelease Version | 5 Modules host device nv_fp8x2_storage_t nv_cvt_float2_to_fp8x2 (const float2 x, const nv_saturation_t saturate, const nv_fp8_interpretation_t fp8_interpretation) Converts input vector of two single precision numbers packed in float2 x into a vector of two values of fp8 type of the requested kind using round-to-nearest-even rounding and requested saturation mode. Returns ‣ The nv_fp8x2_storage_t value holds the result of conversion. Description Converts input vector x to a vector of two fp8 values of the kind specified by fp8_interpretation parameter, using round-to-nearest-even rounding and saturation mode specified by saturate parameter. host device nv_fp8_storage_t nv_cvt_float_to_fp8 (const float x, const nv_saturation_t saturate, const nv_fp8_interpretation_t fp8_interpretation) Converts input single precision x to fp8 type of the requested kind using round-to-nearest- even rounding and requested saturation mode. Returns ‣ The nv_fp8_storage_t value holds the result of conversion. Description Converts input x to fp8 type of the kind specified by fp8_interpretation parameter, using round-to-nearest-even rounding and saturation mode specified by saturate parameter. CUDA Math API vRelease Version | 6 Modules host device nv_cvt_fp8_to_halfraw (const nv_fp8_storage_t x, const nv_fp8_interpretation_t fp8_interpretation) Converts input fp8 x of the specified kind to half precision. Returns ‣ The half_raw Description value holds the result of conversion. Converts input x of fp8 type of the kind specified by fp8_interpretation parameter to half precision. host device nv_cvt_fp8x2_to_halfraw2 (const nv_fp8x2_storage_t x, const nv_fp8_interpretation_t fp8_interpretation) Converts input vector of two fp8 values of the specified kind to a vector of two half precision values packed in half2_raw structure. Returns ‣ The half2_raw Description value holds the result of conversion. Converts input vector x of fp8 type of the kind specified by fp8_interpretation parameter to a vector of two half precision values and returns as half2_raw structure. host device nv_fp8x2_storage_t nv_cvt_halfraw2_to_fp8x2 (const half2_raw x, const nv_saturation_t saturate, const nv_fp8_interpretation_t fp8_interpretation) Converts input vector of two half precision numbers packed in half2_raw x into a vector of two values of fp8 type of the requested kind using round-to-nearest-even rounding and requested saturation mode. Returns ‣ The nv_fp8x2_storage_t value holds the result of conversion. CUDA Math API vRelease Version | 7 Modules Description Converts input vector x to a vector of two fp8 values of the kind specified by fp8_interpretation parameter, using round-to-nearest-even rounding and saturation mode specified by saturate parameter. host device nv_fp8_storage_t nv_cvt_halfraw_to_fp8 (const half_raw x, const nv_saturation_t saturate, const nv_fp8_interpretation_t fp8_interpretation) Converts input half precision x to fp8 type of the requested kind using round-to-nearest- even rounding and requested saturation mode. Returns ‣ The nv_fp8_storage_t value holds the result of conversion. Description Converts input x to fp8 type of the kind specified by fp8_interpretation parameter, using round-to-nearest-even rounding and saturation mode specified by saturate parameter. 1.1.2. C++ struct for handling fp8 data type of e5m2 kind. FP8 Intrinsics struct nv_fp8_e5m2 nv_fp8_e5m2 datatype nv_fp8_storage_t :: nv_fp8_e5m2:: x Storage variable contains the fp8 floating-point data. host device nv_fp8_e5m2:: nv_fp8_e5m2 (const long long int val) Description Constructor from long long int data type, relies on NV_SATFINITE behavior for out-of- range values. CUDA Math API vRelease Version | 8 Modules host device nv_fp8_e5m2:: nv_fp8_e5m2 (const long int val) Description Constructor from long int data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e5m2:: nv_fp8_e5m2 (const int val) Description Constructor from int data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e5m2:: nv_fp8_e5m2 (const short int val) Description Constructor from short int data type. host device nv_fp8_e5m2:: nv_fp8_e5m2 (const unsigned long long int val) Description Constructor from unsigned long long int data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e5m2:: nv_fp8_e5m2 (const unsigned long int val) Description Constructor from unsigned long int data type, relies on NV_SATFINITE behavior for out-of-range values. CUDA Math API vRelease Version | 9 Modules host device nv_fp8_e5m2:: nv_fp8_e5m2 (const unsigned int val) Description Constructor from unsigned int data type, relies on NV_SATFINITE behavior for out-of- range values. host device nv_fp8_e5m2:: nv_fp8_e5m2 (const unsigned short int val) Description Constructor from unsigned short int data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e5m2:: nv_fp8_e5m2 (const double f) Description Constructor from double data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e5m2:: nv_fp8_e5m2 (const float f) Description Constructor from float data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e5m2:: nv_fp8_e5m2 (const nv_bfloat16 f) Description Constructor from nv_bfloat16 out-of-range values. data type, relies on NV_SATFINITE behavior for CUDA Math API vRelease Version | 10 Modules host device nv_fp8_e5m2:: nv_fp8_e5m2 (const half f) Description Constructor from half data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e5m2:: nv_fp8_e5m2 () Description Constructor by default. host device nv_fp8_e5m2::operator half () Description Conversion operator to half data type. host device nv_fp8_e5m2::operator nv_bfloat16 () Description Conversion operator to nv_bfloat16 data type. host device nv_fp8_e5m2::operator bool () Description Conversion operator to bool data type. +0 and -0 inputs convert to false. Non-zero inputs convert to true. host device nv_fp8_e5m2::operator char () Description Conversion operator to an implementation defined char data type. Detects signedness of the char type and proceeds accordingly, see further details in signed and unsigned char operators. Clamps inputs to the output range. NaN inputs convert to zero. CUDA Math API vRelease Version | 11 Modules host device nv_fp8_e5m2::operator double () Description Conversion operator to double data type. host device nv_fp8_e5m2::operator float () Description Conversion operator to float data type. host device nv_fp8_e5m2::operator int () Description Conversion operator to int data type. Clamps too large inputs to the output range. NaN inputs convert to zero. host device nv_fp8_e5m2::operator long int () Description Conversion operator to long int data type. Clamps too large inputs to the output range. NaN inputs convert to zero if output type is 32-bit. NaN inputs convert to 0x8000000000000000ULL if output type is 64-bit. host device nv_fp8_e5m2::operator long long int () Description Conversion operator to long long int data type. Clamps too large inputs to the output range. NaN inputs convert to 0x8000000000000000LL. host device nv_fp8_e5m2::operator short int () Description Conversion operator to short int data type. Clamps too large inputs to the output range. NaN inputs convert to zero. CUDA Math API vRelease Version | 12 Modules host device nv_fp8_e5m2::operator signed char () Description Conversion operator to signed char data type. Clamps too large inputs to the output range. NaN inputs convert to zero. host device nv_fp8_e5m2::operator unsigned char () Description Conversion operator to unsigned char data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero. host device nv_fp8_e5m2::operator unsigned int () Description Conversion operator to unsigned int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero. host device nv_fp8_e5m2::operator unsigned long int () Description Conversion operator to unsigned long int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero if output type is 32-bit. NaN inputs convert to 0x8000000000000000ULL if output type is 64-bit. host device nv_fp8_e5m2::operator unsigned long long int () Description Conversion operator to unsigned long long int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to 0x8000000000000000ULL. CUDA Math API vRelease Version | 13 Modules host device nv_fp8_e5m2::operator unsigned short int () Description Conversion operator to unsigned short int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero. 1.1.3. C++ struct for handling vector type of two fp8 values of e5m2 kind. FP8 Intrinsics struct nv_fp8x2_e5m2 nv_fp8x2_e5m2 datatype nv_fp8x2_storage_t :: nv_fp8x2_e5m2:: x Storage variable contains the vector of two fp8 floating-point data values. host device nv_fp8x2_e5m2:: nv_fp8x2_e5m2 (const double2 f) Description Constructor from double2 data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8x2_e5m2:: nv_fp8x2_e5m2 (const float2 f) Description Constructor from float2 data type, relies on NV_SATFINITE behavior for out-of-range values. CUDA Math API vRelease Version | 14 Modules host device nv_fp8x2_e5m2: nv_fp8x2_e5m2 (const nv_bfloat162 f) Description Constructor from nv_bfloat162 out-of-range values. data type, relies on NV_SATFINITE behavior for host device nv_fp8x2_e5m2: nv_fp8x2_e5m2 (const half2 f) Description Constructor from half2 data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8x2_e5m2:: nv_fp8x2_e5m2 () Description Constructor by default. host device nv_fp8x2_e5m2::operator half2 () Description Conversion operator to half2 data type. host device nv_fp8x2_e5m2::operator float2 () Description Conversion operator to float2 data type. 1.1.4. C++ struct for handling vector type of four fp8 values of e5m2 kind. FP8 Intrinsics CUDA Math API vRelease Version | 15 Modules struct nv_fp8x4_e5m2 nv_fp8x4_e5m2 datatype nv_fp8x4_storage_t :: nv_fp8x4_e5m2:: x Storage variable contains the vector of four fp8 floating-point data values. host device nv_fp8x4_e5m2:: nv_fp8x4_e5m2 (const double4 f) Description Constructor from double4 vector data type, relies on NV_SATFINITE behavior for out-of- range values. host device nv_fp8x4_e5m2:: nv_fp8x4_e5m2 (const float4 f) Description Constructor from float4 vector data type, relies on NV_SATFINITE behavior for out-of- range values. host device nv_fp8x4_e5m2:: nv_fp8x4_e5m2 (const nv_bfloat162 flo, const nv_bfloat162 fhi) Description Constructor from a pair of nv_bfloat162 data type values, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8x4_e5m2: nv_fp8x4_e5m2 (const half2 flo, const half2 fhi) Description Constructor from a pair of half2 data type values, relies on NV_SATFINITE behavior for out-of-range values. CUDA Math API vRelease Version | 16 Modules nv_fp8x4_e5m2:: nv_fp8x4_e5m2 () Description Constructor by default. host device nv_fp8x4_e5m2::operator float4 () Description Conversion operator to float4 vector data type. 1.1.5. C++ struct for handling fp8 data type of e4m3 kind. FP8 Intrinsics struct nv_fp8_e4m3 nv_fp8_e4m3 datatype nv_fp8_storage_t :: nv_fp8_e4m3:: x Storage variable contains the fp8 floating-point data. host device nv_fp8_e4m3:: nv_fp8_e4m3 (const long long int val) Description Constructor from long long int data type, relies on NV_SATFINITE behavior for out-of- range values. host device nv_fp8_e4m3:: nv_fp8_e4m3 (const long int val) Description Constructor from long int data type, relies on NV_SATFINITE behavior for out-of-range values. CUDA Math API vRelease Version | 17 Modules host device nv_fp8_e4m3:: nv_fp8_e4m3 (const int val) Description Constructor from int data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e4m3:: nv_fp8_e4m3 (const short int val) Description Constructor from short int data type, relies on NV_SATFINITE behavior for out-of- range values. host device nv_fp8_e4m3:: nv_fp8_e4m3 (const unsigned long long int val) Description Constructor from unsigned long long int data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e4m3:: nv_fp8_e4m3 (const unsigned long int val) Description Constructor from unsigned long int data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e4m3:: nv_fp8_e4m3 (const unsigned int val) Description Constructor from unsigned int data type, relies on NV_SATFINITE behavior for out-of- range values. CUDA Math API vRelease Version | 18 Modules host device nv_fp8_e4m3:: nv_fp8_e4m3 (const unsigned short int val) Description Constructor from unsigned short int data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e4m3:: nv_fp8_e4m3 (const double f) Description Constructor from double data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e4m3:: nv_fp8_e4m3 (const float f) Description Constructor from float data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8_e4m3:: nv_fp8_e4m3 (const nv_bfloat16 f) Description Constructor from nv_bfloat16 out-of-range values. data type, relies on NV_SATFINITE behavior for host device nv_fp8_e4m3:: nv_fp8_e4m3 (const half f) Description Constructor from half data type, relies on NV_SATFINITE behavior for out-of-range values. CUDA Math API vRelease Version | 19 Modules nv_fp8_e4m3:: nv_fp8_e4m3 () Description Constructor by default. host device nv_fp8_e4m3::operator half () Description Conversion operator to half data type. host device nv_fp8_e4m3::operator nv_bfloat16 () Description Conversion operator to nv_bfloat16 data type. host device nv_fp8_e4m3::operator bool () Description Conversion operator to bool data type. +0 and -0 inputs convert to false. Non-zero inputs convert to true. host device nv_fp8_e4m3::operator char () Description Conversion operator to an implementation defined char data type. Detects signedness of the char type and proceeds accordingly, see further details in signed and unsigned char operators. Clamps inputs to the output range. NaN inputs convert to zero. host device nv_fp8_e4m3::operator double () Description Conversion operator to double data type. CUDA Math API vRelease Version | 20 Modules host device nv_fp8_e4m3::operator float () Description Conversion operator to float data type. host device nv_fp8_e4m3::operator int () Description Conversion operator to int data type. NaN inputs convert to zero. host device nv_fp8_e4m3::operator long int () Description Conversion operator to long int data type. Clamps too large inputs to the output range. NaN inputs convert to zero if output type is 32-bit. NaN inputs convert to 0x8000000000000000ULL if output type is 64-bit. host device nv_fp8_e4m3::operator long long int () Description Conversion operator to long long int data type. NaN inputs convert to 0x8000000000000000LL. host device nv_fp8_e4m3::operator short int () Description Conversion operator to short int data type. NaN inputs convert to zero. host device nv_fp8_e4m3::operator signed char () Description Conversion operator to signed char data type. Clamps too large inputs to the output range. NaN inputs convert to zero. CUDA Math API vRelease Version | 21 Modules host device nv_fp8_e4m3::operator unsigned char () Description Conversion operator to unsigned char data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero. host device nv_fp8_e4m3::operator unsigned int () Description Conversion operator to unsigned int data type. Clamps negative inputs to zero. NaN inputs convert to zero. host device nv_fp8_e4m3::operator unsigned long int () Description Conversion operator to unsigned long int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero if output type is 32-bit. NaN inputs convert to 0x8000000000000000ULL if output type is 64-bit. host device nv_fp8_e4m3::operator unsigned long long int () Description Conversion operator to unsigned long long int data type. Clamps negative inputs to zero. NaN inputs convert to 0x8000000000000000ULL. host device nv_fp8_e4m3::operator unsigned short int () Description Conversion operator to unsigned short int data type. Clamps negative inputs to zero. NaN inputs convert to zero. CUDA Math API vRelease Version | 22 Modules 1.1.6. C++ struct for handling vector type of two fp8 values of e4m3 kind. FP8 Intrinsics struct nv_fp8x2_e4m3 nv_fp8x2_e4m3 datatype nv_fp8x2_storage_t :: nv_fp8x2_e4m3:: x Storage variable contains the vector of two fp8 floating-point data values. host device nv_fp8x2_e4m3:: nv_fp8x2_e4m3 (const double2 f) Description Constructor from double2 data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8x2_e4m3:: nv_fp8x2_e4m3 (const float2 f) Description Constructor from float2 data type, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8x2_e4m3:: nv_fp8x2_e4m3 (const nv_bfloat162 f) Description Constructor from nv_bfloat162 out-of-range values. data type, relies on NV_SATFINITE behavior for CUDA Math API vRelease Version | 23 Modules host device nv_fp8x2_e4m3: nv_fp8x2_e4m3 (const half2 f) Description Constructor from half2 data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8x2_e4m3:: nv_fp8x2_e4m3 () Description Constructor by default. host device nv_fp8x2_e4m3::operator half2 () Description Conversion operator to half2 data type. host device nv_fp8x2_e4m3::operator float2 () Description Conversion operator to float2 data type. 1.1.7. C++ struct for handling vector type of four fp8 values of e4m3 kind. FP8 Intrinsics struct nv_fp8x4_e4m3 nv_fp8x4_e4m3 datatype nv_fp8x4_storage_t :: nv_fp8x4_e4m3:: x Storage variable contains the vector of four fp8 floating-point data values. CUDA Math API vRelease Version | 24 Modules host device nv_fp8x4_e4m3: nv_fp8x4_e4m3 (const double4 f) Description Constructor from double4 vector data type, relies on NV_SATFINITE behavior for out-of- range values. host device nv_fp8x4_e4m3:: nv_fp8x4_e4m3 (const float4 f) Description Constructor from float4 vector data type, relies on NV_SATFINITE behavior for out-of- range values. host device nv_fp8x4_e4m3:: nv_fp8x4_e4m3 (const nv_bfloat162 flo, const nv_bfloat162 fhi) Description Constructor from a pair of nv_bfloat162 data type values, relies on NV_SATFINITE behavior for out-of-range values. host device nv_fp8x4_e4m3: nv_fp8x4_e4m3 (const half2 flo, const half2 fhi) Description Constructor from a pair of half2 data type values, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8x4_e4m3:: nv_fp8x4_e4m3 () Description Constructor by default. host device nv_fp8x4_e4m3::operator float4 () Description Conversion operator to float4 vector data type. CUDA Math API vRelease Version | 25 Modules 1.2. Half Precision Intrinsics This section describes half precision intrinsic functions. To use these functions, include the header file cuda_fp16.h in your program. All of the functions defined here are available in device code. Some of the functions are also available to host compilers, please refer to respective functions' documentation for details. NOTE: Aggressive floating-point optimizations performed by host or device compilers may affect numeric behavior of the functions implemented in this header. The following macros are available to help users selectively enable/disable various definitions present in the header file: ‣ CUDA_NO_HALF - If defined, this macro will prevent the definition of additional type aliases in the global namespace, helping to avoid potential conflicts with symbols defined in the user program. ‣ CUDA_NO_HALF_CONVERSIONS - If defined, this macro will prevent the use of the C ++ type conversions (converting constructors and conversion operators) that are common for built-in floating-point types, but may be undesirable for half which is essentially a user-defined type. ‣ CUDA_NO_HALF_OPERATORS and CUDA_NO_HALF2_OPERATORS - If defined, these macros will prevent the inadvertent use of usual arithmetic and comparison operators. This enforces the storage-only type semantics and prevents C++ style computations on half and half2 types. struct half half data type struct half2 half2 data type struct half2_raw half2_raw data type struct half_raw half_raw data type Half Arithmetic Constants CUDA Math API vRelease Version | 26 Modules Half Arithmetic Functions Half2 Arithmetic Functions Half Comparison Functions Half2 Comparison Functions Half Precision Conversion and Data Movement Half Math Functions Half2 Math Functions typedef nv_half This datatype is an nv_ prefixed alias. typedef nv_half2 This datatype is an nv_ prefixed alias. typedef nv_half2_raw This datatype is an nv_ prefixed alias. typedef nv_half_raw This datatype is an nv_ prefixed alias. typedef half This datatype is meant to be the first-class or fundamental implementation of the half- precision numbers format. Should be implemented in the compiler in the future. Current implementation is a simple typedef to a respective user-level type with underscores. CUDA Math API vRelease Version | 27 Modules typedef half2 This datatype is meant to be the first-class or fundamental implementation of type for pairs of half-precision numbers. Should be implemented in the compiler in the future. Current implementation is a simple typedef to a respective user-level type with underscores. typedef nv_half This datatype is an nv_ prefixed alias. typedef nv_half2 This datatype is an nv_ prefixed alias. 1.2.1. Half Arithmetic Constants Half Precision Intrinsics To use these constants, include the header file cuda_fp16.h in your program. #define CUDART_INF_FP16 ushort_as_half((unsigned short)0x7C00U) Defines floating-point positive infinity value for the half data type. #define CUDART_MAX_NORMAL_FP16 ushort_as_half((unsigned short)0x7BFFU) Defines a maximum representable value for the half data type. #define CUDART_MIN_DENORM_FP16 ushort_as_half((unsigned short)0x0001U) Defines a minimum representable (denormalized) value for the half data type. #define CUDART_NAN_FP16 ushort_as_half((unsigned short)0x7FFFU) Defines canonical NaN value for the half data type. #define CUDART_NEG_ZERO_FP16 ushort_as_half((unsigned short)0x8000U) Defines a negative zero value for the half data type. CUDA Math API vRelease Version | 28 Modules #define CUDART_ONE_FP16 ushort_as_half((unsigned short)0x3C00U) Defines a value of 1.0 for the half data type. #define CUDART_ZERO_FP16 ushort_as_half((unsigned short)0x0000U) Defines a positive zero value for the half data type. 1.2.2. Half Arithmetic Functions Half Precision Intrinsics To use these functions, include the header file cuda_fp16.h in your program. host device habs (const half a) Calculates the absolute value of input half number and returns the result. Parameters a - half. Is only being read. Returns half ‣ The absolute value of a. Description Calculates the absolute value of input half number and returns the result. host device hadd (const half a, const half b) Performs half addition in round-to-nearest-even mode. Description Performs half addition of inputs a and b, in round-to-nearest-even mode. CUDA Math API vRelease Version | 29 Modules host device hadd_rn (const half a, const half b) Performs half addition in round-to-nearest-even mode. Description Performs half addition of inputs a and b, in round-to-nearest-even mode. Prevents floating- point contractions of mul+add into fma. host device hadd_sat (const half a, const half b) Performs half addition in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - half. Is only being read. b - half. Is only being read. Returns half ‣ The sum of a and b, with respect to saturation. Description Performs half add of inputs a and b, in round-to-nearest-even mode, and clamps the result to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hdiv (const half a, const half b) Performs half division in round-to-nearest-even mode. Description Divides half input a by input b in round-to-nearest-even mode. CUDA Math API vRelease Version | 30 Modules device hfma (const half a, const half b, const half c) Performs half fused multiply-add in round-to-nearest-even mode. Description Performs half multiply on inputs a and b, then performs a half add of the result with c, rounding the result once in round-to-nearest-even mode. device hfma_relu (const half a, const half b, const half c) Performs half fused multiply-add in round-to-nearest-even mode with relu saturation. Parameters a - half. Is only being read. b - half. Is only being read. c - half. Is only being read. Returns half ‣ The result of fused multiply-add operation on a, b, and c with relu saturation. Description Performs half multiply on inputs a and b, then performs a half add of the result with c, rounding the result once in round-to-nearest-even mode. Then negative result is clamped to 0. NaN result is converted to canonical NaN. device hfma_sat (const half a, const half b, const half c) Performs half fused multiply-add in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - half. Is only being read. b - half. Is only being read. CUDA Math API vRelease Version | 31 Modules c - half. Is only being read. Returns half ‣ The result of fused multiply-add operation on a, b, and c, with respect to saturation. Description Performs half multiply on inputs a and b, then performs a half add of the result with c, rounding the result once in round-to-nearest-even mode, and clamps the result to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hmul (const half a, const half b) Performs half multiplication in round-to-nearest-even mode. Description Performs half multiplication of inputs a and b, in round-to-nearest-even mode. host device hmul_rn (const half a, const half b) Performs half multiplication in round-to-nearest-even mode. Description Performs half multiplication of inputs a and b, in round-to-nearest-even mode. Prevents floating-point contractions of mul+add or sub into fma. host device hmul_sat (const half a, const half b) Performs half multiplication in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - half. Is only being read. b - half. Is only being read. Returns half ‣ The result of multiplying a and b, with respect to saturation. CUDA Math API vRelease Version | 32 Modules Description Performs half multiplication of inputs a and b, in round-to-nearest-even mode, and clamps the result to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hneg (const half a) Negates input half number and returns the result. Description Negates input half number and returns the result. host device hsub (const half a, const half b) Performs half subtraction in round-to-nearest-even mode. Description Subtracts half input b from input a in round-to-nearest-even mode. host device hsub_rn (const half a, const half b) Performs half subtraction in round-to-nearest-even mode. Description Subtracts half input b from input a in round-to-nearest-even mode. Prevents floating-point contractions of mul+sub into fma. host device hsub_sat (const half a, const half b) Performs half subtraction in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - half. Is only being read. b - half. Is only being read. Returns half ‣ The result of subtraction of b from a, with respect to saturation. CUDA Math API vRelease Version | 33 Modules Description Subtracts half input b from input a in round-to-nearest-even mode, and clamps the result to range [0.0, 1.0]. NaN results are flushed to +0.0. device atomicAdd (const half *address, const half val) Adds val to the value stored at address in global or shared memory, and writes this value back to address. This operation is performed in one atomic operation. Parameters address - half*. An address in global or shared memory. val - half. The value to be added. Returns half ‣ The old value read from address. Description The location of address must be in global or shared memory. This operation has undefined behavior otherwise. This operation is only supported by devices of compute capability 7.x and higher. Note: For more details for this function see the Atomic Functions section in the CUDA C++ Programming Guide. host device operator* (const half lh, const half rh) Description Performs half multiplication operation. See also hmul( half, half) CUDA Math API vRelease Version | 34 Modules host device operator*= ( half lh, const half rh) Description Performs half compound assignment with multiplication operation. host device operator+ (const half h) Description Implements half unary plus operator, returns input value. host device operator+ (const half lh, const half rh) Description Performs half addition operation. See also hadd( half, half) host device operator++ ( half h, const int ignored) Description Performs half postfix increment operation. host device operator++ ( half h) Description Performs half prefix increment operation. host device operator+= ( half lh, const half rh) Description Performs half compound assignment with addition operation. host device operator- (const half h) Description Implements half unary minus operator. See also hneg( half) CUDA Math API vRelease Version | 35 Modules host device operator- (const half lh, const half rh) Description Performs half subtraction operation. See also hsub( half, half) host device operator-- ( half h, const int ignored) Description Performs half postfix decrement operation. host device operator-- ( half h) Description Performs half prefix decrement operation. host device operator-= ( half lh, const half rh) Description Performs half compound assignment with subtraction operation. host device operator/ (const half lh, const half rh) Description Performs half division operation. See also hdiv( half, half) host device operator/= ( half lh, const half rh) Description Performs half compound assignment with division operation. 1.2.3. Half2 Arithmetic Functions Half Precision Intrinsics To use these functions, include the header file cuda_fp16.h in your program. CUDA Math API vRelease Version | 36 Modules host device h2div (const half2 a, const half2 b) Performs half2 vector division in round-to-nearest-even mode. Description Divides half2 input vector a by input vector b in round-to-nearest-even mode. host device habs2 (const half2 a) Calculates the absolute value of both halves of the input half2 number and returns the result. Parameters a - half2. Is only being read. Returns half2 ‣ Returns a with the absolute value of both halves. Description Calculates the absolute value of both halves of the input half2 number and returns the result. host device hadd2 (const half2 a, const half2 b) Performs half2 vector addition in round-to-nearest-even mode. Description Performs half2 vector add of inputs a and b, in round-to-nearest-even mode. host device hadd2_rn (const half2 a, const half2 b) Performs half2 vector addition in round-to-nearest-even mode. Description Performs half2 vector add of inputs a and b, in round-to-nearest-even mode. Prevents floating-point contractions of mul+add into fma. CUDA Math API vRelease Version | 37 Modules host device hadd2_sat (const half2 a, const half2 b) Performs half2 vector addition in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The sum of a and b, with respect to saturation. Description Performs half2 vector add of inputs a and b, in round-to-nearest-even mode, and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0. device hcmadd (const half2 a, const half2 b, const half2 c) Performs fast complex multiply-accumulate. Parameters a - half2. Is only being read. b - half2. Is only being read. c - half2. Is only being read. Returns half2 ‣ The result of complex multiply-accumulate operation on complex numbers a, b, and c Description Interprets vector half2 input pairs a, b, and c as complex numbers in half precision and performs complex multiply-accumulate operation: a*b + c CUDA Math API vRelease Version | 38 Modules device hfma2 (const half2 a, const half2 b, const half2 c) Performs half2 vector fused multiply-add in round-to-nearest-even mode. Description Performs half2 vector multiply on inputs a and b, then performs a half2 vector add of the result with c, rounding the result once in round-to-nearest-even mode. device hfma2_relu (const half2 a, const half2 b, const half2 c) Performs half2 vector fused multiply-add in round-to-nearest-even mode with relu saturation. Parameters a - half2. Is only being read. b - half2. Is only being read. c - half2. Is only being read. Returns half2 ‣ The result of elementwise fused multiply-add operation on vectors a, b, and c with relu saturation. Description Performs half2 vector multiply on inputs a and b, then performs a half2 vector add of the result with c, rounding the result once in round-to-nearest-even mode. Then negative result is clamped to 0. NaN result is converted to canonical NaN. device hfma2_sat (const half2 a, const half2 b, const half2 c) Performs half2 vector fused multiply-add in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - half2. Is only being read. CUDA Math API vRelease Version | 39 Modules b - half2. Is only being read. c - half2. Is only being read. Returns half2 ‣ The result of elementwise fused multiply-add operation on vectors a, b, and c, with respect to saturation. Description Performs half2 vector multiply on inputs a and b, then performs a half2 vector add of the result with c, rounding the result once in round-to-nearest-even mode, and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hmul2 (const half2 a, const half2 b) Performs half2 vector multiplication in round-to-nearest-even mode. Description Performs half2 vector multiplication of inputs a and b, in round-to-nearest-even mode. host device hmul2_rn (const half2 a, const half2 b) Performs half2 vector multiplication in round-to-nearest-even mode. Description Performs half2 vector multiplication of inputs a and b, in round-to-nearest-even mode. Prevents floating-point contractions of mul+add or sub into fma. host device hmul2_sat (const half2 a, const half2 b) Performs half2 vector multiplication in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - half2. Is only being read. CUDA Math API vRelease Version | 40 Modules b - half2. Is only being read. Returns half2 ‣ The result of elementwise multiplication of vectors a and b, with respect to saturation. Description Performs half2 vector multiplication of inputs a and b, in round-to-nearest-even mode, and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hneg2 (const half2 a) Negates both halves of the input half2 number and returns the result. Description Negates both halves of the input half2 number a and returns the result. host device hsub2 (const half2 a, const half2 b) Performs half2 vector subtraction in round-to-nearest-even mode. Description Subtracts half2 input vector b from input vector a in round-to-nearest-even mode. host device hsub2_rn (const half2 a, const half2 b) Performs half2 vector subtraction in round-to-nearest-even mode. Description Subtracts half2 input vector b from input vector a in round-to-nearest-even mode. Prevents floating-point contractions of mul+sub into fma. CUDA Math API vRelease Version | 41 Modules host device hsub2_sat (const half2 a, const half2 b) Performs half2 vector subtraction in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The subtraction of vector b from a, with respect to saturation. Description Subtracts half2 input vector b from input vector a in round-to-nearest-even mode, and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0. device atomicAdd (const half2 *address, const half2 val) Vector add val to the value stored at address in global or shared memory, and writes this value back to address. The atomicity of the add operation is guaranteed separately for each of the two half elements; the entire half2 is not guaranteed to be atomic as a single 32-bit access. Parameters address - half2*. An address in global or shared memory. val - half2. The value to be added. Returns half2 ‣ The old value read from address. CUDA Math API vRelease Version | 42 Modules Description The location of address must be in global or shared memory. This operation has undefined behavior otherwise. This operation is natively supported by devices of compute capability 6.x and higher, older devices use emulation path. Note: For more details for this function see the Atomic Functions section in the CUDA C++ Programming Guide. host device operator* (const half2 lh, const half2 rh) Description Performs packed half multiplication operation. See also hmul2( half2, half2) host device operator*= ( half2 lh, const half2 rh) Description Performs packed half compound assignment with multiplication operation. host device operator+ (const half2 h) Description Implements packed half unary plus operator, returns input value. host device operator+ (const half2 lh, const half2 rh) Description Performs packed half addition operation. See also hadd2( half2, half2) host device operator++ ( half2 h, const int ignored) Description Performs packed half postfix increment operation. CUDA Math API vRelease Version | 43 Modules host device operator++ ( half2 h) Description Performs packed half prefix increment operation. host device operator+= ( half2 lh, const half2 rh) Description Performs packed half compound assignment with addition operation. host device operator- (const half2 h) Description Implements packed half unary minus operator. See also hneg2( half2) host device operator- (const half2 lh, const half2 rh) Description Performs packed half subtraction operation. See also hsub2( half2, half2) host device operator-- ( half2 h, const int ignored) Description Performs packed half postfix decrement operation. host device operator-- ( half2 h) Description Performs packed half prefix decrement operation. host device operator-= ( half2 lh, const half2 rh) Description Performs packed half compound assignment with subtraction operation. CUDA Math API vRelease Version | 44 Modules host device operator/ (const half2 lh, const half2 rh) Description Performs packed half division operation. See also h2div( half2, half2) host device operator/= ( half2 lh, const half2 rh) Description Performs packed half compound assignment with division operation. 1.2.4. Half Comparison Functions Half Precision Intrinsics To use these functions, include the header file cuda_fp16.h in your program. host device bool heq (const half a, const half b) Performs half if-equal comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool ‣ The boolean result of if-equal comparison of a and b. Description Performs half if-equal comparison of inputs a and b. NaN inputs generate false results. CUDA Math API vRelease Version | 45 Modules host device bool hequ (const half a, const half b) Performs half unordered if-equal comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool ‣ The boolean result of unordered if-equal comparison of a and b. Description Performs half if-equal comparison of inputs a and b. NaN inputs generate true results. host device bool hge (const half a, const half b) Performs half greater-equal comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool ‣ The boolean result of greater-equal comparison of a and b. Description Performs half greater-equal comparison of inputs a and b. NaN inputs generate false results. CUDA Math API vRelease Version | 46 Modules host device bool hgeu (const half a, const half b) Performs half unordered greater-equal comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool ‣ The boolean result of unordered greater-equal comparison of a and b. Description Performs half greater-equal comparison of inputs a and b. NaN inputs generate true results. host device bool hgt (const half a, const half b) Performs half greater-than comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool ‣ The boolean result of greater-than comparison of a and b. Description Performs half greater-than comparison of inputs a and b. NaN inputs generate false results. CUDA Math API vRelease Version | 47 Modules host device bool hgtu (const half a, const half b) Performs half unordered greater-than comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool ‣ The boolean result of unordered greater-than comparison of a and b. Description Performs half greater-than comparison of inputs a and b. NaN inputs generate true results. host device int hisinf (const half a) Checks if the input half number is infinite. Parameters a - half. Is only being read. Returns int ‣ -1 iff a is equal to negative infinity, ‣ 1 iff a is equal to positive infinity, ‣ 0 otherwise. Description Checks if the input half number a is infinite. CUDA Math API vRelease Version | 48 Modules host device bool hisnan (const half a) Determine whether half argument is a NaN. Parameters a - half. Is only being read. Returns bool ‣ true iff argument is NaN. Description Determine whether half value a is a NaN. host device bool hle (const half a, const half b) Performs half less-equal comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool ‣ The boolean result of less-equal comparison of a and b. Description Performs half less-equal comparison of inputs a and b. NaN inputs generate false results. host device bool hleu (const half a, const half b) Performs half unordered less-equal comparison. Parameters a - half. Is only being read. CUDA Math API vRelease Version | 49 Modules b - half. Is only being read. Returns bool ‣ The boolean result of unordered less-equal comparison of a and b. Description Performs half less-equal comparison of inputs a and b. NaN inputs generate true results. host device bool hlt (const half a, const half b) Performs half less-than comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool ‣ The boolean result of less-than comparison of a and b. Description Performs half less-than comparison of inputs a and b. NaN inputs generate false results. host device bool hltu (const half a, const half b) Performs half unordered less-than comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool CUDA Math API vRelease Version | 50 Modules ‣ The boolean result of unordered less-than comparison of a and b. Description Performs half less-than comparison of inputs a and b. NaN inputs generate true results. host device hmax (const half a, const half b) Calculates half maximum of two input values. Description Calculates half max(a, b) defined as (a > b) ? a : b. ‣ If either of inputs is NaN, the other input is returned. ‣ If both inputs are NaNs, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 host device hmax_nan (const half a, const half b) Calculates half maximum of two input values, NaNs pass through. Description Calculates half max(a, b) defined as (a > b) ? a : b. ‣ If either of inputs is NaN, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 host device hmin (const half a, const half b) Calculates half minimum of two input values. Description Calculates half min(a, b) defined as (a < b) ? a : b. ‣ If either of inputs is NaN, the other input is returned. ‣ If both inputs are NaNs, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 CUDA Math API vRelease Version | 51 Modules host device hmin_nan (const half a, const half b) Calculates half minimum of two input values, NaNs pass through. Description Calculates half min(a, b) defined as (a < b) ? a : b. ‣ If either of inputs is NaN, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 host device bool hne (const half a, const half b) Performs half not-equal comparison. Parameters a - half. Is only being read. b - half. Is only being read. Returns bool ‣ The boolean result of not-equal comparison of a and b. Description Performs half not-equal comparison of inputs a and b. NaN inputs generate false results. host device bool hneu (const half a, const half b) Performs half unordered not-equal comparison. Parameters a - half. Is only being read. b - half. Is only being read. CUDA Math API vRelease Version | 52 Modules Returns bool ‣ The boolean result of unordered not-equal comparison of a and b. Description Performs half not-equal comparison of inputs a and b. NaN inputs generate true results. host device CUDA_FP16_FORCEINLINE bool operator!= (const half lh, const half rh) Description Performs half unordered compare not-equal operation. See also hneu( half, half) host device CUDA_FP16_FORCEINLINE bool operator< (const half lh, const half rh) Description Performs half ordered less-than compare operation. See also hlt( half, half) host device CUDA_FP16_FORCEINLINE bool operator<= (const half lh, const half rh) Description Performs half ordered less-or-equal compare operation. See also hle( half, half) host device CUDA_FP16_FORCEINLINE bool operator== (const half lh, const half rh) Description Performs half ordered compare equal operation. See also heq( half, half) CUDA Math API vRelease Version | 53 Modules host device CUDA_FP16_FORCEINLINE bool operator> (const half lh, const half rh) Description Performs half ordered greater-than compare operation. See also hgt( half, half) host device CUDA_FP16_FORCEINLINE bool operator>= (const half lh, const half rh) Description Performs half ordered greater-or-equal compare operation. See also hge( half, half) 1.2.5. Half2 Comparison Functions Half Precision Intrinsics To use these functions, include the header file cuda_fp16.h in your program. host device bool hbeq2 (const half2 a, const half2 b) Performs half2 vector if-equal comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of if-equal comparison of vectors a and b are true; ‣ false otherwise. Description Performs half2 vector if-equal comparison of inputs a and b. The bool result is set to true only if both half if-equal comparisons evaluate to true, or false otherwise. NaN inputs generate false results. CUDA Math API vRelease Version | 54 Modules host device bool hbequ2 (const half2 a, const half2 b) Performs half2 vector unordered if-equal comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of unordered if-equal comparison of vectors a and b are true; ‣ false otherwise. Description Performs half2 vector if-equal comparison of inputs a and b. The bool result is set to true only if both half if-equal comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device bool hbge2 (const half2 a, const half2 b) Performs half2 vector greater-equal comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of greater-equal comparison of vectors a and b are true; ‣ false otherwise. CUDA Math API vRelease Version | 55 Modules Description Performs half2 vector greater-equal comparison of inputs a and b. The bool result is set to true only if both half greater-equal comparisons evaluate to true, or false otherwise. NaN inputs generate false results. host device bool hbgeu2 (const half2 a, const half2 b) Performs half2 vector unordered greater-equal comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of unordered greater-equal comparison of vectors a and b are true; ‣ false otherwise. Description Performs half2 vector greater-equal comparison of inputs a and b. The bool result is set to true only if both half greater-equal comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device bool hbgt2 (const half2 a, const half2 b) Performs half2 vector greater-than comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. CUDA Math API vRelease Version | 56 Modules Returns bool ‣ true if both half results of greater-than comparison of vectors a and b are true; ‣ false otherwise. Description Performs half2 vector greater-than comparison of inputs a and b. The bool result is set to true only if both half greater-than comparisons evaluate to true, or false otherwise. NaN inputs generate false results. host device bool hbgtu2 (const half2 a, const half2 b) Performs half2 vector unordered greater-than comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of unordered greater-than comparison of vectors a and b are true; ‣ false otherwise. Description Performs half2 vector greater-than comparison of inputs a and b. The bool result is set to true only if both half greater-than comparisons evaluate to true, or false otherwise. NaN inputs generate true results. CUDA Math API vRelease Version | 57 Modules host device bool hble2 (const half2 a, const half2 b) Performs half2 vector less-equal comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of less-equal comparison of vectors a and b are true; ‣ false otherwise. Description Performs half2 vector less-equal comparison of inputs a and b. The bool result is set to true only if both half less-equal comparisons evaluate to true, or false otherwise. NaN inputs generate false results. host device bool hbleu2 (const half2 a, const half2 b) Performs half2 vector unordered less-equal comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of unordered less-equal comparison of vectors a and b are true; ‣ false otherwise. CUDA Math API vRelease Version | 58 Modules Description Performs half2 vector less-equal comparison of inputs a and b. The bool result is set to true only if both half less-equal comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device bool hblt2 (const half2 a, const half2 b) Performs half2 vector less-than comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of less-than comparison of vectors a and b are true; ‣ false otherwise. Description Performs half2 vector less-than comparison of inputs a and b. The bool result is set to true only if both half less-than comparisons evaluate to true, or false otherwise. NaN inputs generate false results. host device bool hbltu2 (const half2 a, const half2 b) Performs half2 vector unordered less-than comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. CUDA Math API vRelease Version | 59 Modules Returns bool ‣ true if both half results of unordered less-than comparison of vectors a and b are true; ‣ false otherwise. Description Performs half2 vector less-than comparison of inputs a and b. The bool result is set to true only if both half less-than comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device bool hbne2 (const half2 a, const half2 b) Performs half2 vector not-equal comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of not-equal comparison of vectors a and b are true, ‣ false otherwise. Description Performs half2 vector not-equal comparison of inputs a and b. The bool result is set to true only if both half not-equal comparisons evaluate to true, or false otherwise. NaN inputs generate false results. CUDA Math API vRelease Version | 60 Modules host device bool hbneu2 (const half2 a, const half2 b) Performs half2 vector unordered not-equal comparison and returns boolean true iff both half results are true, boolean false otherwise. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns bool ‣ true if both half results of unordered not-equal comparison of vectors a and b are true; ‣ false otherwise. Description Performs half2 vector not-equal comparison of inputs a and b. The bool result is set to true only if both half not-equal comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device heq2 (const half2 a, const half2 b) Performs half2 vector if-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The vector result of if-equal comparison of vectors a and b. Description Performs half2 vector if-equal comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. CUDA Math API vRelease Version | 61 Modules host device unsigned heq2_mask (const half2 a, const half2 b) Performs half2 vector if-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of if-equal comparison of vectors a and b. Description Performs half2 vector if-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hequ2 (const half2 a, const half2 b) Performs half2 vector unordered if-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The vector result of unordered if-equal comparison of vectors a and b. Description Performs half2 vector if-equal comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. CUDA Math API vRelease Version | 62 Modules host device unsigned hequ2_mask (const half2 a, const half2 b) Performs half2 vector unordered if-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of unordered if-equal comparison of vectors a and b. Description Performs half2 vector if-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hge2 (const half2 a, const half2 b) Performs half2 vector greater-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The vector result of greater-equal comparison of vectors a and b. Description Performs half2 vector greater-equal comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. CUDA Math API vRelease Version | 63 Modules host device unsigned hge2_mask (const half2 a, const half2 b) Performs half2 vector greater-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of greater-equal comparison of vectors a and b. Description Performs half2 vector greater-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hgeu2 (const half2 a, const half2 b) Performs half2 vector unordered greater-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The half2 vector result of unordered greater-equal comparison of vectors a and b. Description Performs half2 vector greater-equal comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. CUDA Math API vRelease Version | 64 Modules host device unsigned hgeu2_mask (const half2 a, const half2 b) Performs half2 vector unordered greater-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of unordered greater-equal comparison of vectors a and b. Description Performs half2 vector greater-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hgt2 (const half2 a, const half2 b) Performs half2 vector greater-than comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The vector result of greater-than comparison of vectors a and b. Description Performs half2 vector greater-than comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. CUDA Math API vRelease Version | 65 Modules host device unsigned hgt2_mask (const half2 a, const half2 b) Performs half2 vector greater-than comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of greater-than comparison of vectors a and b. Description Performs half2 vector greater-than comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hgtu2 (const half2 a, const half2 b) Performs half2 vector unordered greater-than comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The half2 vector result of unordered greater-than comparison of vectors a and b. Description Performs half2 vector greater-than comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. CUDA Math API vRelease Version | 66 Modules host device unsigned hgtu2_mask (const half2 a, const half2 b) Performs half2 vector unordered greater-than comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of unordered greater-than comparison of vectors a and b. Description Performs half2 vector greater-than comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hisnan2 (const half2 a) Determine whether half2 argument is a NaN. Parameters a - half2. Is only being read. Returns half2 ‣ The half2 with the corresponding half results set to 1.0 for NaN, 0.0 otherwise. Description Determine whether each half of input half2 number a is a NaN. host device hle2 (const half2 a, const half2 b) Performs half2 vector less-equal comparison. Parameters a - half2. Is only being read. CUDA Math API vRelease Version | 67 Modules b - half2. Is only being read. Returns half2 ‣ The half2 result of less-equal comparison of vectors a and b. Description Performs half2 vector less-equal comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. host device unsigned hle2_mask (const half2 a, const half2 b) Performs half2 vector less-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of less-equal comparison of vectors a and b. Description Performs half2 vector less-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hleu2 (const half2 a, const half2 b) Performs half2 vector unordered less-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. CUDA Math API vRelease Version | 68 Modules Returns half2 ‣ The vector result of unordered less-equal comparison of vectors a and b. Description Performs half2 vector less-equal comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. host device unsigned hleu2_mask (const half2 a, const half2 b) Performs half2 vector unordered less-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of unordered less-equal comparison of vectors a and b. Description Performs half2 vector less-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hlt2 (const half2 a, const half2 b) Performs half2 vector less-than comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The half2 vector result of less-than comparison of vectors a and b. CUDA Math API vRelease Version | 69 Modules Description Performs half2 vector less-than comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. host device unsigned hlt2_mask (const half2 a, const half2 b) Performs half2 vector less-than comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of less-than comparison of vectors a and b. Description Performs half2 vector less-than comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hltu2 (const half2 a, const half2 b) Performs half2 vector unordered less-than comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The vector result of unordered less-than comparison of vectors a and b. CUDA Math API vRelease Version | 70 Modules Description Performs half2 vector less-than comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. host device unsigned hltu2_mask (const half2 a, const half2 b) Performs half2 vector unordered less-than comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of unordered less-than comparison of vectors a and b. Description Performs half2 vector less-than comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hmax2 (const half2 a, const half2 b) Calculates half2 vector maximum of two inputs. Description Calculates half2 vector max(a, b). Elementwise half operation is defined as (a > b) ? a : b. ‣ If either of inputs is NaN, the other input is returned. ‣ If both inputs are NaNs, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 ‣ The result of elementwise maximum of vectors a and b CUDA Math API vRelease Version | 71 Modules host device hmax2_nan (const half2 a, const half2 b) Calculates half2 vector maximum of two inputs, NaNs pass through. Description Calculates half2 vector max(a, b). Elementwise half operation is defined as (a > b) ? a : b. ‣ If either of inputs is NaN, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 ‣ The result of elementwise maximum of vectors a and b, with NaNs pass through host device hmin2 (const half2 a, const half2 b) Calculates half2 vector minimum of two inputs. Description Calculates half2 vector min(a, b). Elementwise half operation is defined as (a < b) ? a : b. ‣ If either of inputs is NaN, the other input is returned. ‣ If both inputs are NaNs, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 ‣ The result of elementwise minimum of vectors a and b host device hmin2_nan (const half2 a, const half2 b) Calculates half2 vector minimum of two inputs, NaNs pass through. Description Calculates half2 vector min(a, b). Elementwise half operation is defined as (a < b) ? a : b. ‣ If either of inputs is NaN, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 ‣ The result of elementwise minimum of vectors a and b, with NaNs pass through CUDA Math API vRelease Version | 72 Modules host device hne2 (const half2 a, const half2 b) Performs half2 vector not-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The vector result of not-equal comparison of vectors a and b. Description Performs half2 vector not-equal comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. host device unsigned hne2_mask (const half2 a, const half2 b) Performs half2 vector not-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of not-equal comparison of vectors a and b. Description Performs half2 vector not-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. CUDA Math API vRelease Version | 73 Modules host device hneu2 (const half2 a, const half2 b) Performs half2 vector unordered not-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The vector result of unordered not-equal comparison of vectors a and b. Description Performs half2 vector not-equal comparison of inputs a and b. The corresponding half results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. host device unsigned hneu2_mask (const half2 a, const half2 b) Performs half2 vector unordered not-equal comparison. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns unsigned int ‣ The vector mask result of unordered not-equal comparison of vectors a and b. Description Performs half2 vector not-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. CUDA Math API vRelease Version | 74 Modules host device CUDA_FP16_FORCEINLINE bool operator!= (const half2 lh, const half2 rh) Description Performs packed half unordered compare not-equal operation. See also hbneu2( half2, half2) host device CUDA_FP16_FORCEINLINE bool operator< (const half2 lh, const half2 rh) Description Performs packed half ordered less-than compare operation. See also hblt2( half2, half2) host device CUDA_FP16_FORCEINLINE bool operator<= (const half2 lh, const half2 rh) Description Performs packed half ordered less-or-equal compare operation. See also hble2( half2, half2) host device CUDA_FP16_FORCEINLINE bool operator== (const half2 lh, const half2 rh) Description Performs packed half ordered compare equal operation. See also hbeq2( half2, half2) host device CUDA_FP16_FORCEINLINE bool operator> (const half2 lh, const half2 rh) Description Performs packed half ordered greater-than compare operation. See also hbgt2( half2, half2) CUDA Math API vRelease Version | 75 Modules host device CUDA_FP16_FORCEINLINE bool operator>= (const half2 lh, const half2 rh) Description Performs packed half ordered greater-or-equal compare operation. See also hbge2( half2, half2) 1.2.6. Half Precision Conversion and Data Movement Half Precision Intrinsics To use these functions, include the header file cuda_fp16.h in your program. host device double2half (const double a) Converts double number to half precision in round-to-nearest-even mode and returns half with converted value. Parameters a - double. Is only being read. Returns half ‣ a converted to half. Description Converts double number a to half precision in round-to-nearest-even mode. host device float22half2_rn (const float2 a) Converts both components of float2 number to half precision in round-to-nearest-even mode and returns half2 with converted values. Parameters a - float2. Is only being read. Returns half2 CUDA Math API vRelease Version | 76 Modules ‣ The half2 which has corresponding halves equal to the converted float2 components. Description Converts both components of float2 to half precision in round-to-nearest-even mode and combines the results into one half2 number. Low 16 bits of the return value correspond to a.x and high 16 bits of the return value correspond to a.y. host device float2half (const float a) Converts float number to half precision in round-to-nearest-even mode and returns half with converted value. Parameters a - float. Is only being read. Returns half ‣ a converted to half. Description Converts float number a to half precision in round-to-nearest-even mode. host device float2half2_rn (const float a) Converts input to half precision in round-to-nearest-even mode and populates both halves of half2 with converted value. Parameters a - float. Is only being read. Returns half2 ‣ The half2 value with both halves equal to the converted half precision number. Description Converts input a to half precision in round-to-nearest-even mode and populates both halves of half2 with converted value. CUDA Math API vRelease Version | 77 Modules host device float2half_rd (const float a) Converts float number to half precision in round-down mode and returns half with converted value. Parameters a - float. Is only being read. Returns half ‣ a converted to half. Description Converts float number a to half precision in round-down mode. host device float2half_rn (const float a) Converts float number to half precision in round-to-nearest-even mode and returns half with converted value. Parameters a - float. Is only being read. Returns half ‣ a converted to half. Description Converts float number a to half precision in round-to-nearest-even mode. host device float2half_ru (const float a) Converts float number to half precision in round-up mode and returns half with converted value. Parameters a - float. Is only being read. CUDA Math API vRelease Version | 78 Modules Returns half ‣ a converted to half. Description Converts float number a to half precision in round-up mode. host device float2half_rz (const float a) Converts float number to half precision in round-towards-zero mode and returns half with converted value. Parameters a - float. Is only being read. Returns half ‣ a converted to half. Description Converts float number a to half precision in round-towards-zero mode. host device floats2half2_rn (const float a, const float b) Converts both input floats to half precision in round-to-nearest-even mode and returns half2 with converted values. Parameters a - float. Is only being read. b - float. Is only being read. Returns half2 ‣ The half2 value with corresponding halves equal to the converted input floats. CUDA Math API vRelease Version | 79 Modules Description Converts both input floats to half precision in round-to-nearest-even mode and combines the results into one half2 number. Low 16 bits of the return value correspond to the input a, high 16 bits correspond to the input b. host device float2 half22float2 (const half2 a) Converts both halves of half2 to float2 and returns the result. Parameters a - half2. Is only being read. Returns float2 ‣ a converted to float2. Description Converts both halves of half2 input a to float2 and returns the result. host device signed char half2char_rz (const half h) Convert a half to a signed char in round-towards-zero mode. Parameters h - half. Is only being read. Returns signed char ‣ h converted to a signed char. Description Convert the half-precision floating-point value h to a signed char integer in round-towards- zero mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 80 Modules host device float half2float (const half a) Converts half number to float. Parameters a - float. Is only being read. Returns float ‣ a converted to float. Description Converts half number a to float. host device half2half2 (const half a) Returns half2 with both halves equal to the input value. Parameters a - half. Is only being read. Returns half2 ‣ The vector which has both its halves equal to the input a. Description Returns half2 number with both halves equal to the input a half number. device int half2int_rd (const half h) Convert a half to a signed integer in round-down mode. Parameters h - half. Is only being read. Returns int ‣ h converted to a signed integer. CUDA Math API vRelease Version | 81 Modules Description Convert the half-precision floating-point value h to a signed integer in round-down mode. NaN inputs are converted to 0. device int half2int_rn (const half h) Convert a half to a signed integer in round-to-nearest-even mode. Parameters h - half. Is only being read. Returns int ‣ h converted to a signed integer. Description Convert the half-precision floating-point value h to a signed integer in round-to-nearest-even mode. NaN inputs are converted to 0. device int half2int_ru (const half h) Convert a half to a signed integer in round-up mode. Parameters h - half. Is only being read. Returns int ‣ h converted to a signed integer. Description Convert the half-precision floating-point value h to a signed integer in round-up mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 82 Modules host device int half2int_rz (const half h) Convert a half to a signed integer in round-towards-zero mode. Parameters h - half. Is only being read. Returns int ‣ h converted to a signed integer. Description Convert the half-precision floating-point value h to a signed integer in round-towards-zero mode. NaN inputs are converted to 0. device long long int half2ll_rd (const half h) Convert a half to a signed 64-bit integer in round-down mode. Parameters h - half. Is only being read. Returns long long int ‣ h converted to a signed 64-bit integer. Description Convert the half-precision floating-point value h to a signed 64-bit integer in round-down mode. NaN inputs return a long long int with hex value of 0x8000000000000000. device long long int half2ll_rn (const half h) Convert a half to a signed 64-bit integer in round-to-nearest-even mode. Parameters h - half. Is only being read. CUDA Math API vRelease Version | 83 Modules Returns long long int ‣ h converted to a signed 64-bit integer. Description Convert the half-precision floating-point value h to a signed 64-bit integer in round-to- nearest-even mode. NaN inputs return a long long int with hex value of 0x8000000000000000. device long long int half2ll_ru (const half h) Convert a half to a signed 64-bit integer in round-up mode. Parameters h - half. Is only being read. Returns long long int ‣ h converted to a signed 64-bit integer. Description Convert the half-precision floating-point value h to a signed 64-bit integer in round-up mode. NaN inputs return a long long int with hex value of 0x8000000000000000. host device long long int half2ll_rz (const half h) Convert a half to a signed 64-bit integer in round-towards-zero mode. Parameters h - half. Is only being read. Returns long long int ‣ h converted to a signed 64-bit integer. CUDA Math API vRelease Version | 84 Modules Description Convert the half-precision floating-point value h to a signed 64-bit integer in round-towards- zero mode. NaN inputs return a long long int with hex value of 0x8000000000000000. device short int half2short_rd (const half h) Convert a half to a signed short integer in round-down mode. Parameters h - half. Is only being read. Returns short int ‣ h converted to a signed short integer. Description Convert the half-precision floating-point value h to a signed short integer in round-down mode. NaN inputs are converted to 0. device short int half2short_rn (const half h) Convert a half to a signed short integer in round-to-nearest-even mode. Parameters h - half. Is only being read. Returns short int ‣ h converted to a signed short integer. Description Convert the half-precision floating-point value h to a signed short integer in round-to-nearest- even mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 85 Modules device short int half2short_ru (const half h) Convert a half to a signed short integer in round-up mode. Parameters h - half. Is only being read. Returns short int ‣ h converted to a signed short integer. Description Convert the half-precision floating-point value h to a signed short integer in round-up mode. NaN inputs are converted to 0. host device short int half2short_rz (const half h) Convert a half to a signed short integer in round-towards-zero mode. Parameters h - half. Is only being read. Returns short int ‣ h converted to a signed short integer. Description Convert the half-precision floating-point value h to a signed short integer in round-towards- zero mode. NaN inputs are converted to 0. host device unsigned char half2uchar_rz (const half h) Convert a half to an unsigned char in round-towards-zero mode. Parameters h - half. Is only being read. CUDA Math API vRelease Version | 86 Modules Returns unsigned char ‣ h converted to an unsigned char. Description Convert the half-precision floating-point value h to an unsigned char in round-towards-zero mode. NaN inputs are converted to 0. device unsigned int half2uint_rd (const half h) Convert a half to an unsigned integer in round-down mode. Parameters h - half. Is only being read. Returns unsigned int ‣ h converted to an unsigned integer. Description Convert the half-precision floating-point value h to an unsigned integer in round-down mode. NaN inputs are converted to 0. device unsigned int half2uint_rn (const half h) Convert a half to an unsigned integer in round-to-nearest-even mode. Parameters h - half. Is only being read. Returns unsigned int ‣ h converted to an unsigned integer. Description Convert the half-precision floating-point value h to an unsigned integer in round-to-nearest- even mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 87 Modules device unsigned int half2uint_ru (const half h) Convert a half to an unsigned integer in round-up mode. Parameters h - half. Is only being read. Returns unsigned int ‣ h converted to an unsigned integer. Description Convert the half-precision floating-point value h to an unsigned integer in round-up mode. NaN inputs are converted to 0. host device unsigned int half2uint_rz (const half h) Convert a half to an unsigned integer in round-towards-zero mode. Parameters h - half. Is only being read. Returns unsigned int ‣ h converted to an unsigned integer. Description Convert the half-precision floating-point value h to an unsigned integer in round-towards-zero mode. NaN inputs are converted to 0. device unsigned long long int half2ull_rd (const half h) Convert a half to an unsigned 64-bit integer in round-down mode. Parameters h - half. Is only being read. CUDA Math API vRelease Version | 88 Modules Returns unsigned long long int ‣ h converted to an unsigned 64-bit integer. Description Convert the half-precision floating-point value h to an unsigned 64-bit integer in round-down mode. NaN inputs return 0x8000000000000000. device unsigned long long int half2ull_rn (const half h) Convert a half to an unsigned 64-bit integer in round-to-nearest-even mode. Parameters h - half. Is only being read. Returns unsigned long long int ‣ h converted to an unsigned 64-bit integer. Description Convert the half-precision floating-point value h to an unsigned 64-bit integer in round-to- nearest-even mode. NaN inputs return 0x8000000000000000. device unsigned long long int half2ull_ru (const half h) Convert a half to an unsigned 64-bit integer in round-up mode. Parameters h - half. Is only being read. Returns unsigned long long int ‣ h converted to an unsigned 64-bit integer. CUDA Math API vRelease Version | 89 Modules Description Convert the half-precision floating-point value h to an unsigned 64-bit integer in round-up mode. NaN inputs return 0x8000000000000000. host device unsigned long long int half2ull_rz (const half h) Convert a half to an unsigned 64-bit integer in round-towards-zero mode. Parameters h - half. Is only being read. Returns unsigned long long int ‣ h converted to an unsigned 64-bit integer. Description Convert the half-precision floating-point value h to an unsigned 64-bit integer in round- towards-zero mode. NaN inputs return 0x8000000000000000. device unsigned short int half2ushort_rd (const half h) Convert a half to an unsigned short integer in round-down mode. Parameters h - half. Is only being read. Returns unsigned short int ‣ h converted to an unsigned short integer. Description Convert the half-precision floating-point value h to an unsigned short integer in round-down mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 90 Modules device unsigned short int half2ushort_rn (const half h) Convert a half to an unsigned short integer in round-to-nearest-even mode. Parameters h - half. Is only being read. Returns unsigned short int ‣ h converted to an unsigned short integer. Description Convert the half-precision floating-point value h to an unsigned short integer in round-to- nearest-even mode. NaN inputs are converted to 0. device unsigned short int half2ushort_ru (const half h) Convert a half to an unsigned short integer in round-up mode. Parameters h - half. Is only being read. Returns unsigned short int ‣ h converted to an unsigned short integer. Description Convert the half-precision floating-point value h to an unsigned short integer in round-up mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 91 Modules host device unsigned short int half2ushort_rz (const half h) Convert a half to an unsigned short integer in round-towards-zero mode. Parameters h - half. Is only being read. Returns unsigned short int ‣ h converted to an unsigned short integer. Description Convert the half-precision floating-point value h to an unsigned short integer in round- towards-zero mode. NaN inputs are converted to 0. host device short int half_as_short (const half h) Reinterprets bits in a half as a signed short integer. Parameters h - half. Is only being read. Returns short int ‣ The reinterpreted value. Description Reinterprets the bits in the half-precision floating-point number h as a signed short integer. CUDA Math API vRelease Version | 92 Modules host device unsigned short int half_as_ushort (const half h) Reinterprets bits in a half as an unsigned short integer. Parameters h - half. Is only being read. Returns unsigned short int ‣ The reinterpreted value. Description Reinterprets the bits in the half-precision floating-point h as an unsigned short number. host device halves2half2 (const half a, const half b) Combines two half numbers into one half2 number. Parameters a - half. Is only being read. b - half. Is only being read. Returns half2 ‣ The half2 with one half equal to a and the other to b. Description Combines two input half number a and b into one half2 number. Input a is stored in low 16 bits of the return value, input b is stored in high 16 bits of the return value. CUDA Math API vRelease Version | 93 Modules host device float high2float (const half2 a) Converts high 16 bits of half2 to float and returns the result. Parameters a - half2. Is only being read. Returns float ‣ The high 16 bits of a converted to float. Description Converts high 16 bits of half2 input a to 32-bit floating-point number and returns the result. host device high2half (const half2 a) Returns high 16 bits of half2 input. Parameters a - half2. Is only being read. Returns half ‣ The high 16 bits of the input. Description Returns high 16 bits of half2 input a. host device high2half2 (const half2 a) Extracts high 16 bits from half2 input. Parameters a - half2. Is only being read. Returns half2 ‣ The half2 with both halves equal to the high 16 bits of the input. CUDA Math API vRelease Version | 94 Modules Description Extracts high 16 bits from half2 input a and returns a new half2 number which has both halves equal to the extracted bits. host device highs2half2 (const half2 a, const half2 b) Extracts high 16 bits from each of the two half2 inputs and combines into one half2 number. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The high 16 bits of a and of b. Description Extracts high 16 bits from each of the two half2 inputs and combines into one half2 number. High 16 bits from input a is stored in low 16 bits of the return value, high 16 bits from input b is stored in high 16 bits of the return value. host device int2half_rd (const int i) Convert a signed integer to a half in round-down mode. Parameters i - int. Is only being read. Returns half ‣ i converted to half. Description Convert the signed integer value i to a half-precision floating-point value in round-down mode. CUDA Math API vRelease Version | 95 Modules host device int2half_rn (const int i) Convert a signed integer to a half in round-to-nearest-even mode. Parameters i - int. Is only being read. Returns half ‣ i converted to half. Description Convert the signed integer value i to a half-precision floating-point value in round-to-nearest- even mode. host device int2half_ru (const int i) Convert a signed integer to a half in round-up mode. Parameters i - int. Is only being read. Returns half ‣ i converted to half. Description Convert the signed integer value i to a half-precision floating-point value in round-up mode. host device int2half_rz (const int i) Convert a signed integer to a half in round-towards-zero mode. Parameters i - int. Is only being read. Returns half CUDA Math API vRelease Version | 96 Modules ‣ i converted to half. Description Convert the signed integer value i to a half-precision floating-point value in round-towards- zero mode. device ldca (const half *ptr) Generates a `ld.global.ca` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldca (const half2 *ptr) Generates a `ld.global.ca` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldcg (const half *ptr) Generates a `ld.global.cg` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` CUDA Math API vRelease Version | 97 Modules device ldcg (const half2 *ptr) Generates a `ld.global.cg` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldcs (const half *ptr) Generates a `ld.global.cs` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldcs (const half2 *ptr) Generates a `ld.global.cs` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldcv (const half *ptr) Generates a `ld.global.cv` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` CUDA Math API vRelease Version | 98 Modules device ldcv (const half2 *ptr) Generates a `ld.global.cv` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldg (const half *ptr) Generates a `ld.global.nc` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldg (const half2 *ptr) Generates a `ld.global.nc` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` Description defined( CUDA_ARCH ) || ( CUDA_ARCH >= 300) device ldlu (const half *ptr) Generates a `ld.global.lu` load instruction. Parameters ptr - memory location CUDA Math API vRelease Version | 99 Modules Returns The value pointed by `ptr` device ldlu (const half2 *ptr) Generates a `ld.global.lu` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` host device ll2half_rd (const long long int i) Convert a signed 64-bit integer to a half in round-down mode. Parameters i - long long int. Is only being read. Returns half ‣ i converted to half. Description Convert the signed 64-bit integer value i to a half-precision floating-point value in round- down mode. host device ll2half_rn (const long long int i) Convert a signed 64-bit integer to a half in round-to-nearest-even mode. Parameters i - long long int. Is only being read. Returns half ‣ i converted to half. CUDA Math API vRelease Version | 100 Modules Description Convert the signed 64-bit integer value i to a half-precision floating-point value in round-to- nearest-even mode. host device ll2half_ru (const long long int i) Convert a signed 64-bit integer to a half in round-up mode. Parameters i - long long int. Is only being read. Returns half ‣ i converted to half. Description Convert the signed 64-bit integer value i to a half-precision floating-point value in round-up mode. host device ll2half_rz (const long long int i) Convert a signed 64-bit integer to a half in round-towards-zero mode. Parameters i - long long int. Is only being read. Returns half ‣ i converted to half. Description Convert the signed 64-bit integer value i to a half-precision floating-point value in round- towards-zero mode. CUDA Math API vRelease Version | 101 Modules host device float low2float (const half2 a) Converts low 16 bits of half2 to float and returns the result. Parameters a - half2. Is only being read. Returns float ‣ The low 16 bits of a converted to float. Description Converts low 16 bits of half2 input a to 32-bit floating-point number and returns the result. host device low2half (const half2 a) Returns low 16 bits of half2 input. Parameters a - half2. Is only being read. Returns half ‣ Returns half which contains low 16 bits of the input a. Description Returns low 16 bits of half2 input a. host device low2half2 (const half2 a) Extracts low 16 bits from half2 input. Parameters a - half2. Is only being read. Returns half2 ‣ The half2 with both halves equal to the low 16 bits of the input. CUDA Math API vRelease Version | 102 Modules Description Extracts low 16 bits from half2 input a and returns a new half2 number which has both halves equal to the extracted bits. host device lowhigh2highlow (const half2 a) Swaps both halves of the half2 input. Parameters a - half2. Is only being read. Returns half2 ‣ a with its halves being swapped. Description Swaps both halves of the half2 input and returns a new half2 number with swapped halves. host device lows2half2 (const half2 a, const half2 b) Extracts low 16 bits from each of the two half2 inputs and combines into one half2 number. Parameters a - half2. Is only being read. b - half2. Is only being read. Returns half2 ‣ The low 16 bits of a and of b. Description Extracts low 16 bits from each of the two half2 inputs and combines into one half2 number. Low 16 bits from input a is stored in low 16 bits of the return value, low 16 bits from input b is stored in high 16 bits of the return value. CUDA Math API vRelease Version | 103 Modules device shfl_down_sync (const unsigned mask, const half var, const unsigned int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread with higher ID relative to the caller. Parameters mask - unsigned int. Is only being read. var - half. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 2-byte word referenced by var from the source thread ID as half. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by adding delta to the caller's thread ID. The value of var held by the resulting thread ID is returned: this has the effect of shifting var down the warp by delta threads. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. As for shfl_up_sync(), the ID number of the source thread will not wrap around the value of width and so the upper delta threads will remain unchanged. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. CUDA Math API vRelease Version | 104 Modules device shfl_down_sync (const unsigned mask, const half2 var, const unsigned int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread with higher ID relative to the caller. Parameters mask - unsigned int. Is only being read. var - half2. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 4-byte word referenced by var from the source thread ID as half2. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by adding delta to the caller's thread ID. The value of var held by the resulting thread ID is returned: this has the effect of shifting var down the warp by delta threads. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. As for shfl_up_sync(), the ID number of the source thread will not wrap around the value of width and so the upper delta threads will remain unchanged. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. device shfl_sync (const unsigned mask, const half var, const int delta, const int width) Exchange a variable between threads within a warp. Direct copy from indexed thread. Parameters mask - unsigned int. Is only being read. CUDA Math API vRelease Version | 105 Modules var - half. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 2-byte word referenced by var from the source thread ID as half. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Returns the value of var held by the thread whose ID is given by delta. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. If delta is outside the range [0:width-1], the value returned corresponds to the value of var held by the delta modulo width (i.e. within the same subsection). width must have a value which is a power of 2; results are undefined if width is not a power of 2, or is a number greater than warpSize. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. device shfl_sync (const unsigned mask, const half2 var, const int delta, const int width) Exchange a variable between threads within a warp. Direct copy from indexed thread. Parameters mask - unsigned int. Is only being read. var - half2. Is only being read. delta - int. Is only being read. width - int. Is only being read. CUDA Math API vRelease Version | 106 Modules Returns Returns the 4-byte word referenced by var from the source thread ID as half2. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Returns the value of var held by the thread whose ID is given by delta. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. If delta is outside the range [0:width-1], the value returned corresponds to the value of var held by the delta modulo width (i.e. within the same subsection). width must have a value which is a power of 2; results are undefined if width is not a power of 2, or is a number greater than warpSize. device shfl_up_sync (const unsigned mask, const half var, const unsigned int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread with lower ID relative to the caller. Parameters mask - unsigned int. Is only being read. var - half. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 2-byte word referenced by var from the source thread ID as half. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by subtracting delta from the caller's lane ID. The value of var held by the resulting lane ID is returned: in effect, var is shifted up the warp by delta threads. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. The source thread index will not wrap around the value of width, so effectively the lower delta threads will be unchanged. width must have a value which CUDA Math API vRelease Version | 107 Modules is a power of 2; results are undefined if width is not a power of 2, or is a number greater than warpSize. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. device shfl_up_sync (const unsigned mask, const half2 var, const unsigned int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread with lower ID relative to the caller. Parameters mask - unsigned int. Is only being read. var - half2. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 4-byte word referenced by var from the source thread ID as half2. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by subtracting delta from the caller's lane ID. The value of var held by the resulting lane ID is returned: in effect, var is shifted up the warp by delta threads. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. The source thread index will not wrap around the value of width, so effectively the lower delta threads will be unchanged. width must have a value which is a power of 2; results are undefined if width is not a power of 2, or is a number greater than warpSize. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. CUDA Math API vRelease Version | 108 Modules device shfl_xor_sync (const unsigned mask, const half var, const int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread based on bitwise XOR of own thread ID. Parameters mask - unsigned int. Is only being read. var - half. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 2-byte word referenced by var from the source thread ID as half. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by performing a bitwise XOR of the caller's thread ID with mask: the value of var held by the resulting thread ID is returned. If width is less than warpSize then each group of width consecutive threads are able to access elements from earlier groups of threads, however if they attempt to access elements from later groups of threads their own value of var will be returned. This mode implements a butterfly addressing pattern such as is used in tree reduction and broadcast. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. CUDA Math API vRelease Version | 109 Modules device shfl_xor_sync (const unsigned mask, const half2 var, const int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread based on bitwise XOR of own thread ID. Parameters mask - unsigned int. Is only being read. var - half2. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 4-byte word referenced by var from the source thread ID as half2. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by performing a bitwise XOR of the caller's thread ID with mask: the value of var held by the resulting thread ID is returned. If width is less than warpSize then each group of width consecutive threads are able to access elements from earlier groups of threads, however if they attempt to access elements from later groups of threads their own value of var will be returned. This mode implements a butterfly addressing pattern such as is used in tree reduction and broadcast. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. host device short2half_rd (const short int i) Convert a signed short integer to a half in round-down mode. Parameters i - short int. Is only being read. CUDA Math API vRelease Version | 110 Modules Returns half ‣ i converted to half. Description Convert the signed short integer value i to a half-precision floating-point value in round-down mode. host device short2half_rn (const short int i) Convert a signed short integer to a half in round-to-nearest-even mode. Parameters i - short int. Is only being read. Returns half ‣ i converted to half. Description Convert the signed short integer value i to a half-precision floating-point value in round-to- nearest-even mode. host device short2half_ru (const short int i) Convert a signed short integer to a half in round-up mode. Parameters i - short int. Is only being read. Returns half ‣ i converted to half. Description Convert the signed short integer value i to a half-precision floating-point value in round-up mode. CUDA Math API vRelease Version | 111 Modules host device short2half_rz (const short int i) Convert a signed short integer to a half in round-towards-zero mode. Parameters i - short int. Is only being read. Returns half ‣ i converted to half. Description Convert the signed short integer value i to a half-precision floating-point value in round- towards-zero mode. host device short_as_half (const short int i) Reinterprets bits in a signed short integer as a half. Parameters i - short int. Is only being read. Returns half ‣ The reinterpreted value. Description Reinterprets the bits in the signed short integer i as a half-precision floating-point number. device void stcg (const half *ptr, const half value) Generates a `st.global.cg` store instruction. Parameters ptr - memory location value - the value to be stored CUDA Math API vRelease Version | 112 Modules device void stcg (const half2 *ptr, const half2 value) Generates a `st.global.cg` store instruction. Parameters ptr - memory location value - the value to be stored device void stcs (const half *ptr, const half value) Generates a `st.global.cs` store instruction. Parameters ptr - memory location value - the value to be stored device void stcs (const half2 *ptr, const half2 value) Generates a `st.global.cs` store instruction. Parameters ptr - memory location value - the value to be stored device void stwb (const half *ptr, const half value) Generates a `st.global.wb` store instruction. Parameters ptr - memory location value - the value to be stored CUDA Math API vRelease Version | 113 Modules device void stwb (const half2 *ptr, const half2 value) Generates a `st.global.wb` store instruction. Parameters ptr - memory location value - the value to be stored device void stwt (const half *ptr, const half value) Generates a `st.global.wt` store instruction. Parameters ptr - memory location value - the value to be stored device void stwt (const half2 *ptr, const half2 value) Generates a `st.global.wt` store instruction. Parameters ptr - memory location value - the value to be stored host device uint2half_rd (const unsigned int i) Convert an unsigned integer to a half in round-down mode. Parameters i - unsigned int. Is only being read. Returns half CUDA Math API vRelease Version | 114 Modules ‣ i converted to half. Description Convert the unsigned integer value i to a half-precision floating-point value in round-down mode. host device uint2half_rn (const unsigned int i) Convert an unsigned integer to a half in round-to-nearest-even mode. Parameters i - unsigned int. Is only being read. Returns half ‣ i converted to half. Description Convert the unsigned integer value i to a half-precision floating-point value in round-to- nearest-even mode. host device uint2half_ru (const unsigned int i) Convert an unsigned integer to a half in round-up mode. Parameters i - unsigned int. Is only being read. Returns half ‣ i converted to half. Description Convert the unsigned integer value i to a half-precision floating-point value in round-up mode. CUDA Math API vRelease Version | 115 Modules host device uint2half_rz (const unsigned int i) Convert an unsigned integer to a half in round-towards-zero mode. Parameters i - unsigned int. Is only being read. Returns half ‣ i converted to half. Description Convert the unsigned integer value i to a half-precision floating-point value in round-towards- zero mode. host device ull2half_rd (const unsigned long long int i) Convert an unsigned 64-bit integer to a half in round-down mode. Parameters i - unsigned long long int. Is only being read. Returns half ‣ i converted to half. Description Convert the unsigned 64-bit integer value i to a half-precision floating-point value in round- down mode. host device ull2half_rn (const unsigned long long int i) Convert an unsigned 64-bit integer to a half in round-to-nearest-even mode. Parameters i - unsigned long long int. Is only being read. CUDA Math API vRelease Version | 116 Modules Returns half ‣ i converted to half. Description Convert the unsigned 64-bit integer value i to a half-precision floating-point value in round- to-nearest-even mode. host device ull2half_ru (const unsigned long long int i) Convert an unsigned 64-bit integer to a half in round-up mode. Parameters i - unsigned long long int. Is only being read. Returns half ‣ i converted to half. Description Convert the unsigned 64-bit integer value i to a half-precision floating-point value in round-up mode. host device ull2half_rz (const unsigned long long int i) Convert an unsigned 64-bit integer to a half in round-towards-zero mode. Parameters i - unsigned long long int. Is only being read. Returns half ‣ i converted to half. CUDA Math API vRelease Version | 117 Modules Description Convert the unsigned 64-bit integer value i to a half-precision floating-point value in round- towards-zero mode. host device ushort2half_rd (const unsigned short int i) Convert an unsigned short integer to a half in round-down mode. Parameters i - unsigned short int. Is only being read. Returns half ‣ i converted to half. Description Convert the unsigned short integer value i to a half-precision floating-point value in round- down mode. host device ushort2half_rn (const unsigned short int i) Convert an unsigned short integer to a half in round-to-nearest-even mode. Parameters i - unsigned short int. Is only being read. Returns half ‣ i converted to half. Description Convert the unsigned short integer value i to a half-precision floating-point value in round-to- nearest-even mode. CUDA Math API vRelease Version | 118 Modules host device ushort2half_ru (const unsigned short int i) Convert an unsigned short integer to a half in round-up mode. Parameters i - unsigned short int. Is only being read. Returns half ‣ i converted to half. Description Convert the unsigned short integer value i to a half-precision floating-point value in round-up mode. host device ushort2half_rz (const unsigned short int i) Convert an unsigned short integer to a half in round-towards-zero mode. Parameters i - unsigned short int. Is only being read. Returns half ‣ i converted to half. Description Convert the unsigned short integer value i to a half-precision floating-point value in round- towards-zero mode. CUDA Math API vRelease Version | 119 Modules host device ushort_as_half (const unsigned short int i) Reinterprets bits in an unsigned short integer as a half. Parameters i - unsigned short int. Is only being read. Returns half ‣ The reinterpreted value. Description Reinterprets the bits in the unsigned short integer i as a half-precision floating-point number. host device make_half2 (const half x, const half y) Vector function, combines two half numbers into one half2 number. Parameters x - half. Is only being read. y - half. Is only being read. Returns half2 ‣ The half2 vector with one half equal to x and the other to y. Description Combines two input half number x and y into one half2 number. Input x is stored in low 16 bits of the return value, input y is stored in high 16 bits of the return value. 1.2.7. Half Math Functions Half Precision Intrinsics To use these functions, include the header file cuda_fp16.h in your program. CUDA Math API vRelease Version | 120 Modules device hceil (const half h) Calculate ceiling of the input argument. Parameters h - half. Is only being read. Returns half ‣ The smallest integer value not less than h. Description Compute the smallest integer value not less than h. device hcos (const half a) Calculates half cosine in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The cosine of a. Description Calculates half cosine of input a in round-to-nearest-even mode. device hexp (const half a) Calculates half natural exponential function in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The natural exponential function on a. CUDA Math API vRelease Version | 121 Modules Description Calculates half natural exponential function of input a in round-to-nearest-even mode. device hexp10 (const half a) Calculates half decimal exponential function in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The decimal exponential function on a. Description Calculates half decimal exponential function of input a in round-to-nearest-even mode. device hexp2 (const half a) Calculates half binary exponential function in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The binary exponential function on a. Description Calculates half binary exponential function of input a in round-to-nearest-even mode. device hfloor (const half h) Calculate the largest integer less than or equal to h. Parameters h - half. Is only being read. CUDA Math API vRelease Version | 122 Modules Returns half ‣ The largest integer value which is less than or equal to h. Description Calculate the largest integer value which is less than or equal to h. device hlog (const half a) Calculates half natural logarithm in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The natural logarithm of a. Description Calculates half natural logarithm of input a in round-to-nearest-even mode. device hlog10 (const half a) Calculates half decimal logarithm in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The decimal logarithm of a. Description Calculates half decimal logarithm of input a in round-to-nearest-even mode. CUDA Math API vRelease Version | 123 Modules device hlog2 (const half a) Calculates half binary logarithm in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The binary logarithm of a. Description Calculates half binary logarithm of input a in round-to-nearest-even mode. device hrcp (const half a) Calculates half reciprocal in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The reciprocal of a. Description Calculates half reciprocal of input a in round-to-nearest-even mode. device hrint (const half h) Round input to nearest integer value in half-precision floating-point number. Parameters h - half. Is only being read. Returns half ‣ The nearest integer to h. CUDA Math API vRelease Version | 124 Modules Description Round h to the nearest integer value in half-precision floating-point format, with halfway cases rounded to the nearest even integer value. device hrsqrt (const half a) Calculates half reciprocal square root in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The reciprocal square root of a. Description Calculates half reciprocal square root of input a in round-to-nearest-even mode. device hsin (const half a) Calculates half sine in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The sine of a. Description Calculates half sine of input a in round-to-nearest-even mode. CUDA Math API vRelease Version | 125 Modules device hsqrt (const half a) Calculates half square root in round-to-nearest-even mode. Parameters a - half. Is only being read. Returns half ‣ The square root of a. Description Calculates half square root of input a in round-to-nearest-even mode. device htrunc (const half h) Truncate input argument to the integral part. Parameters h - half. Is only being read. Returns half ‣ The truncated integer value. Description Round h to the nearest integer value that does not exceed h in magnitude. 1.2.8. Half2 Math Functions Half Precision Intrinsics To use these functions, include the header file cuda_fp16.h in your program. CUDA Math API vRelease Version | 126 Modules device h2ceil (const half2 h) Calculate half2 vector ceiling of the input argument. Parameters h - half2. Is only being read. Returns half2 ‣ The vector of smallest integers not less than h. Description For each component of vector h compute the smallest integer value not less than h. device h2cos (const half2 a) Calculates half2 vector cosine in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 ‣ The elementwise cosine on vector a. Description Calculates half2 cosine of input vector a in round-to-nearest-even mode. device h2exp (const half2 a) Calculates half2 vector exponential function in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 ‣ The elementwise exponential function on vector a. CUDA Math API vRelease Version | 127 Modules Description Calculates half2 exponential function of input vector a in round-to-nearest-even mode. device h2exp10 (const half2 a) Calculates half2 vector decimal exponential function in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 ‣ The elementwise decimal exponential function on vector a. Description Calculates half2 decimal exponential function of input vector a in round-to-nearest-even mode. device h2exp2 (const half2 a) Calculates half2 vector binary exponential function in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 ‣ The elementwise binary exponential function on vector a. Description Calculates half2 binary exponential function of input vector a in round-to-nearest-even mode. CUDA Math API vRelease Version | 128 Modules device h2floor (const half2 h) Calculate the largest integer less than or equal to h. Parameters h - half2. Is only being read. Returns half2 ‣ The vector of largest integers which is less than or equal to h. Description For each component of vector h calculate the largest integer value which is less than or equal to h. device h2log (const half2 a) Calculates half2 vector natural logarithm in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 ‣ The elementwise natural logarithm on vector a. Description Calculates half2 natural logarithm of input vector a in round-to-nearest-even mode. device h2log10 (const half2 a) Calculates half2 vector decimal logarithm in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 CUDA Math API vRelease Version | 129 Modules ‣ The elementwise decimal logarithm on vector a. Description Calculates half2 decimal logarithm of input vector a in round-to-nearest-even mode. device h2log2 (const half2 a) Calculates half2 vector binary logarithm in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 ‣ The elementwise binary logarithm on vector a. Description Calculates half2 binary logarithm of input vector a in round-to-nearest-even mode. device h2rcp (const half2 a) Calculates half2 vector reciprocal in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 ‣ The elementwise reciprocal on vector a. Description Calculates half2 reciprocal of input vector a in round-to-nearest-even mode. CUDA Math API vRelease Version | 130 Modules device h2rint (const half2 h) Round input to nearest integer value in half-precision floating-point number. Parameters h - half2. Is only being read. Returns half2 ‣ The vector of rounded integer values. Description Round each component of half2 vector h to the nearest integer value in half-precision floating-point format, with halfway cases rounded to the nearest even integer value. device h2rsqrt (const half2 a) Calculates half2 vector reciprocal square root in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 ‣ The elementwise reciprocal square root on vector a. Description Calculates half2 reciprocal square root of input vector a in round-to-nearest-even mode. device h2sin (const half2 a) Calculates half2 vector sine in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 CUDA Math API vRelease Version | 131 Modules ‣ The elementwise sine on vector a. Description Calculates half2 sine of input vector a in round-to-nearest-even mode. device h2sqrt (const half2 a) Calculates half2 vector square root in round-to-nearest-even mode. Parameters a - half2. Is only being read. Returns half2 ‣ The elementwise square root on vector a. Description Calculates half2 square root of input vector a in round-to-nearest-even mode. device h2trunc (const half2 h) Truncate half2 vector input argument to the integral part. Parameters h - half2. Is only being read. Returns half2 ‣ The truncated h. Description Round each component of vector h to the nearest integer value that does not exceed h in magnitude. 1.3. Bfloat16 Precision Intrinsics This section describes nv_bfloat16 precision intrinsic functions. To use these functions, include the header file cuda_bf16.h in your program. All of the functions defined here are CUDA Math API vRelease Version | 132 Modules available in device code. Some of the functions are also available to host compilers, please refer to respective functions' documentation for details. NOTE: Aggressive floating-point optimizations performed by host or device compilers may affect numeric behavior of the functions implemented in this header. Specific examples are: ‣ hsin( nv_bfloat16); ‣ hcos( nv_bfloat16); ‣ h2sin( nv_bfloat162); ‣ h2cos( nv_bfloat162); The following macros are available to help users selectively enable/disable various definitions present in the header file: ‣ CUDA_NO_BFLOAT16 - If defined, this macro will prevent the definition of additional type aliases in the global namespace, helping to avoid potential conflicts with symbols defined in the user program. ‣ CUDA_NO_BFLOAT16_CONVERSIONS - If defined, this macro will prevent the use of the C++ type conversions (converting constructors and conversion operators) that are common for built-in floating-point types, but may be undesirable for nv_bfloat16 which is essentially a user-defined type. ‣ CUDA_NO_BFLOAT16_OPERATORS and CUDA_NO_BFLOAT162_OPERATORS - If defined, these macros will prevent the inadvertent use of usual arithmetic and comparison operators. This enforces the storage-only type semantics and prevents C++ style computations on nv_bfloat16 struct nv_bfloat16 nv_bfloat16 datatype struct nv_bfloat162 nv_bfloat162 datatype struct nv_bfloat162_raw nv_bfloat162_raw data type struct nv_bfloat16_raw nv_bfloat16_raw data type and nv_bfloat162 types. Bfloat16 Arithmetic Constants Bfloat16 Arithmetic Functions CUDA Math API vRelease Version | 133 Modules Bfloat162 Arithmetic Functions Bfloat16 Comparison Functions Bfloat162 Comparison Functions Bfloat16 Precision Conversion and Data Movement Bfloat16 Math Functions Bfloat162 Math Functions typedef nv_bfloat16 This datatype is meant to be the first-class or fundamental implementation of the bfloat16 numbers format. Should be implemented in the compiler in the future. Current implementation is a simple typedef to a respective user-level type with underscores. typedef nv_bfloat162 This datatype is meant to be the first-class or fundamental implementation of type for pairs of bfloat16 numbers. Should be implemented in the compiler in the future. Current implementation is a simple typedef to a respective user-level type with underscores. 1.3.1. Bfloat16 Arithmetic Constants Bfloat16 Precision Intrinsics To use these constants, include the header file cuda_bf16.h in your program. #define CUDART_INF_BF16 ushort_as_bfloat16((unsigned short)0x7F80U) Defines floating-point positive infinity value for the nv_bfloat16 data type. CUDA Math API vRelease Version | 134 Modules #define CUDART_MAX_NORMAL_BF16 ushort_as_bfloat16((unsigned short)0x7F7FU) Defines a maximum representable value for the nv_bfloat16 data type. #define CUDART_MIN_DENORM_BF16 ushort_as_bfloat16((unsigned short)0x0001U) Defines a minimum representable (denormalized) value for the nv_bfloat16 data type. #define CUDART_NAN_BF16 ushort_as_bfloat16((unsigned short)0x7FFFU) Defines canonical NaN value for the nv_bfloat16 data type. #define CUDART_NEG_ZERO_BF16 ushort_as_bfloat16((unsigned short)0x8000U) Defines a negative zero value for the nv_bfloat16 data type. #define CUDART_ONE_BF16 ushort_as_bfloat16((unsigned short)0x3F80U) Defines a value of 1.0 for the nv_bfloat16 data type. #define CUDART_ZERO_BF16 ushort_as_bfloat16((unsigned short)0x0000U) Defines a positive zero value for the nv_bfloat16 data type. 1.3.2. Bfloat16 Arithmetic Functions Bfloat16 Precision Intrinsics To use these functions, include the header file cuda_bf16.h in your program. host device h2div (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector division in round-to-nearest-even mode. Description Divides nv_bfloat162 input vector a by input vector b in round-to-nearest-even mode. CUDA Math API vRelease Version | 135 Modules host device habs (const nv_bfloat16 a) Calculates the absolute value of input nv_bfloat16 number and returns the result. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The absolute value of a. Description Calculates the absolute value of input nv_bfloat16 number and returns the result. host device hadd (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 addition in round-to-nearest-even mode. Description Performs nv_bfloat16 addition of inputs a and b, in round-to-nearest-even mode. host device hadd_rn (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 addition in round-to-nearest-even mode. Description Performs nv_bfloat16 addition of inputs a and b, in round-to-nearest-even mode. Prevents floating-point contractions of mul+add into fma. host device hadd_sat (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 addition in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. CUDA Math API vRelease Version | 136 Modules Returns nv_bfloat16 ‣ The sum of a and b, with respect to saturation. Description Performs nv_bfloat16 add of inputs a and b, in round-to-nearest-even mode, and clamps the result to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hdiv (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 division in round-to-nearest-even mode. Description Divides nv_bfloat16 input a by input b in round-to-nearest-even mode. device hfma (const nv_bfloat16 a, const nv_bfloat16 b, const nv_bfloat16 c) Performs nv_bfloat16 fused multiply-add in round-to-nearest-even mode. Description Performs nv_bfloat16 multiply on inputs a and b, then performs a nv_bfloat16 add of the result with c, rounding the result once in round-to-nearest-even mode. device hfma_relu (const nv_bfloat16 a, const nv_bfloat16 b, const nv_bfloat16 c) Performs nv_bfloat16 fused multiply-add in round-to-nearest-even mode with relu saturation. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. c - nv_bfloat16. Is only being read. Returns nv_bfloat16 CUDA Math API vRelease Version | 137 Modules ‣ The result of fused multiply-add operation on a, b, and c with relu saturation. Description Performs nv_bfloat16 multiply on inputs a and b, then performs a nv_bfloat16 add of the result with c, rounding the result once in round-to-nearest-even mode. Then negative result is clamped to 0. NaN result is converted to canonical NaN. device hfma_sat (const nv_bfloat16 a, const nv_bfloat16 b, const nv_bfloat16 c) Performs nv_bfloat16 fused multiply-add in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. c - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The result of fused multiply-add operation on a, b, and c, with respect to saturation. Description Performs nv_bfloat16 multiply on inputs a and b, then performs a nv_bfloat16 add of the result with c, rounding the result once in round-to-nearest-even mode, and clamps the result to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hmul (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 multiplication in round-to-nearest-even mode. Description Performs nv_bfloat16 multiplication of inputs a and b, in round-to-nearest-even mode. CUDA Math API vRelease Version | 138 Modules host device hmul_rn (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 multiplication in round-to-nearest-even mode. Description Performs nv_bfloat16 multiplication of inputs a and b, in round-to-nearest-even mode. Prevents floating-point contractions of mul+add or sub into fma. host device hmul_sat (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 multiplication in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The result of multiplying a and b, with respect to saturation. Description Performs nv_bfloat16 multiplication of inputs a and b, in round-to-nearest-even mode, and clamps the result to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hneg (const nv_bfloat16 a) Negates input nv_bfloat16 number and returns the result. Description Negates input nv_bfloat16 number and returns the result. CUDA Math API vRelease Version | 139 Modules host device hsub (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 subtraction in round-to-nearest-even mode. Description Subtracts nv_bfloat16 input b from input a in round-to-nearest-even mode. host device hsub_rn (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 subtraction in round-to-nearest-even mode. Description Subtracts nv_bfloat16 input b from input a in round-to-nearest-even mode. Prevents floating-point contractions of mul+sub into fma. host device hsub_sat (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 subtraction in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The result of subtraction of b from a, with respect to saturation. Description Subtracts nv_bfloat16 input b from input a in round-to-nearest-even mode, and clamps the result to range [0.0, 1.0]. NaN results are flushed to +0.0. CUDA Math API vRelease Version | 140 Modules device atomicAdd (const nv_bfloat16 *address, const nv_bfloat16 val) Adds val to the value stored at address in global or shared memory, and writes this value back to address. This operation is performed in one atomic operation. Parameters address - nv_bfloat16*. An address in global or shared memory. val - nv_bfloat16. The value to be added. Returns nv_bfloat16 ‣ The old value read from address. Description The location of address must be in global or shared memory. This operation has undefined behavior otherwise. This operation is natively supported by devices of compute capability 9.x and higher, older devices of compute capability 7.x and 8.x use emulation path. Note: For more details for this function see the Atomic Functions section in the CUDA C++ Programming Guide. host device operator* (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 multiplication operation. See also hmul( nv_bfloat16, nv_bfloat16) host device operator*= ( nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 compound assignment with multiplication operation. CUDA Math API vRelease Version | 141 Modules host device operator+ (const nv_bfloat16 h) Description Implements nv_bfloat16 unary plus operator, returns input value. host device operator+ (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 addition operation. See also hadd( nv_bfloat16, nv_bfloat16) host device operator++ ( nv_bfloat16 h, const int ignored) Description Performs nv_bfloat16 postfix increment operation. host device operator++ ( nv_bfloat16 h) Description Performs nv_bfloat16 prefix increment operation. host device operator+= ( nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 compound assignment with addition operation. host device operator- (const nv_bfloat16 h) Description Implements nv_bfloat16 unary minus operator. See also hneg( nv_bfloat16) CUDA Math API vRelease Version | 142 Modules host device operator- (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 subtraction operation. See also hsub( nv_bfloat16, nv_bfloat16) host device operator-- ( nv_bfloat16 h, const int ignored) Description Performs nv_bfloat16 postfix decrement operation. host device operator-- ( nv_bfloat16 h) Description Performs nv_bfloat16 prefix decrement operation. host device operator-= ( nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 compound assignment with subtraction operation. host device operator/ (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 division operation. See also hdiv( nv_bfloat16, nv_bfloat16) host device operator/= ( nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 compound assignment with division operation. CUDA Math API vRelease Version | 143 Modules 1.3.3. Bfloat162 Arithmetic Functions Bfloat16 Precision Intrinsics To use these functions, include the header file cuda_bf16.h in your program. host device habs2 (const nv_bfloat162 a) Calculates the absolute value of both halves of the input nv_bfloat162 number and returns the result. Parameters a - nv_bfloat162. Is only being read. Returns bfloat2 ‣ Returns a with the absolute value of both halves. Description Calculates the absolute value of both halves of the input nv_bfloat162 number and returns the result. host device hadd2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector addition in round-to-nearest-even mode. Description Performs nv_bfloat162 vector add of inputs a and b, in round-to-nearest-even mode. host device hadd2_rn (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector addition in round-to-nearest-even mode. Description Performs nv_bfloat162 vector add of inputs a and b, in round-to-nearest-even mode. Prevents floating-point contractions of mul+add into fma. CUDA Math API vRelease Version | 144 Modules host device hadd2_sat (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector addition in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The sum of a and b, with respect to saturation. Description Performs nv_bfloat162 vector add of inputs a and b, in round-to-nearest-even mode, and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0. device hcmadd (const nv_bfloat162 a, const nv_bfloat162 b, const nv_bfloat162 c) Performs fast complex multiply-accumulate. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. c - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The result of complex multiply-accumulate operation on complex numbers a, b, and c Description Interprets vector nv_bfloat162 input pairs a, b, and c as complex numbers in nv_bfloat16 precision and performs complex multiply-accumulate operation: a*b + c CUDA Math API vRelease Version | 145 Modules device hfma2 (const nv_bfloat162 a, const nv_bfloat162 b, const nv_bfloat162 c) Performs nv_bfloat162 vector fused multiply-add in round-to-nearest-even mode. Description Performs nv_bfloat162 vector multiply on inputs a and b, then performs a nv_bfloat162 vector add of the result with c, rounding the result once in round-to-nearest-even mode. device hfma2_relu (const nv_bfloat162 a, const nv_bfloat162 b, const nv_bfloat162 c) Performs nv_bfloat162 vector fused multiply-add in round-to-nearest-even mode with relu saturation. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. c - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The result of elementwise fused multiply-add operation on vectors a, b, and c with relu saturation. Description Performs nv_bfloat162 vector multiply on inputs a and b, then performs a nv_bfloat162 vector add of the result with c, rounding the result once in round-to-nearest-even mode. Then negative result is clamped to 0. NaN result is converted to canonical NaN. device hfma2_sat (const nv_bfloat162 a, const nv_bfloat162 b, const nv_bfloat162 c) Performs nv_bfloat162 vector fused multiply-add in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - nv_bfloat162. Is only being read. CUDA Math API vRelease Version | 146 Modules b - nv_bfloat162. Is only being read. c - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The result of elementwise fused multiply-add operation on vectors a, b, and c, with respect to saturation. Description Performs nv_bfloat162 vector multiply on inputs a and b, then performs a nv_bfloat162 vector add of the result with c, rounding the result once in round-to-nearest-even mode, and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hmul2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector multiplication in round-to-nearest-even mode. Description Performs nv_bfloat162 vector multiplication of inputs a and b, in round-to-nearest-even mode. host device hmul2_rn (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector multiplication in round-to-nearest-even mode. Description Performs nv_bfloat162 vector multiplication of inputs a and b, in round-to-nearest-even mode. Prevents floating-point contractions of mul+add or sub into fma. host device hmul2_sat (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector multiplication in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - nv_bfloat162. Is only being read. CUDA Math API vRelease Version | 147 Modules b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The result of elementwise multiplication of vectors a and b, with respect to saturation. Description Performs nv_bfloat162 vector multiplication of inputs a and b, in round-to-nearest-even mode, and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0. host device hneg2 (const nv_bfloat162 a) Negates both halves of the input nv_bfloat162 number and returns the result. Description Negates both halves of the input nv_bfloat162 number a and returns the result. host device hsub2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector subtraction in round-to-nearest-even mode. Description Subtracts nv_bfloat162 input vector b from input vector a in round-to-nearest-even mode. host device hsub2_rn (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector subtraction in round-to-nearest-even mode. Description Subtracts nv_bfloat162 input vector b from input vector a in round-to-nearest-even mode. Prevents floating-point contractions of mul+sub into fma. CUDA Math API vRelease Version | 148 Modules host device hsub2_sat (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector subtraction in round-to-nearest-even mode, with saturation to [0.0, 1.0]. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The subtraction of vector b from a, with respect to saturation. Description Subtracts nv_bfloat162 input vector b from input vector a in round-to-nearest-even mode, and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0. device atomicAdd (const nv_bfloat162 *address, const nv_bfloat162 val) Vector add val to the value stored at address in global or shared memory, and writes this value back to address. The atomicity of the add operation is guaranteed separately for each of the two nv_bfloat16 elements; the entire nv_bfloat162 is not guaranteed to be atomic as a single 32-bit access. Parameters address - nv_bfloat162*. An address in global or shared memory. val - nv_bfloat162. The value to be added. Returns nv_bfloat162 ‣ The old value read from address. CUDA Math API vRelease Version | 149 Modules Description The location of address must be in global or shared memory. This operation has undefined behavior otherwise. This operation is natively supported by devices of compute capability 9.x and higher, older devices use emulation path. Note: For more details for this function see the Atomic Functions section in the CUDA C++ Programming Guide. host device operator* (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 multiplication operation. See also hmul2( nv_bfloat162, nv_bfloat162) host device operator*= ( nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 compound assignment with multiplication operation. host device operator+ (const nv_bfloat162 h) Description Implements packed nv_bfloat16 unary plus operator, returns input value. host device operator+ (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 addition operation. See also hadd2( nv_bfloat162, nv_bfloat162) CUDA Math API vRelease Version | 150 Modules host device operator++ ( nv_bfloat162 h, const int ignored) Description Performs packed nv_bfloat16 postfix increment operation. host device operator++ ( nv_bfloat162 h) Description Performs packed nv_bfloat16 prefix increment operation. host device operator+= ( nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 compound assignment with addition operation. host device operator- (const nv_bfloat162 h) Description Implements packed nv_bfloat16 unary minus operator. See also hneg2( nv_bfloat162) host device operator- (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 subtraction operation. See also hsub2( nv_bfloat162, nv_bfloat162) host device operator-- ( nv_bfloat162 h, const int ignored) Description Performs packed nv_bfloat16 postfix decrement operation. CUDA Math API vRelease Version | 151 Modules host device operator-- ( nv_bfloat162 h) Description Performs packed nv_bfloat16 prefix decrement operation. host device operator-= ( nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 compound assignment with subtraction operation. host device operator/ (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 division operation. See also h2div( nv_bfloat162, nv_bfloat162) host device operator/= ( nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 compound assignment with division operation. 1.3.4. Bfloat16 Comparison Functions Bfloat16 Precision Intrinsics To use these functions, include the header file cuda_bf16.h in your program. host device bool heq (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 if-equal comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. CUDA Math API vRelease Version | 152 Modules Returns bool ‣ The boolean result of if-equal comparison of a and b. Description Performs nv_bfloat16 if-equal comparison of inputs a and b. NaN inputs generate false results. host device bool hequ (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 unordered if-equal comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of unordered if-equal comparison of a and b. Description Performs nv_bfloat16 if-equal comparison of inputs a and b. NaN inputs generate true results. host device bool hge (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 greater-equal comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool CUDA Math API vRelease Version | 153 Modules ‣ The boolean result of greater-equal comparison of a and b. Description Performs nv_bfloat16 greater-equal comparison of inputs a and b. NaN inputs generate false results. host device bool hgeu (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 unordered greater-equal comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of unordered greater-equal comparison of a and b. Description Performs nv_bfloat16 greater-equal comparison of inputs a and b. NaN inputs generate true results. host device bool hgt (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 greater-than comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of greater-than comparison of a and b. CUDA Math API vRelease Version | 154 Modules Description Performs nv_bfloat16 greater-than comparison of inputs a and b. NaN inputs generate false results. host device bool hgtu (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 unordered greater-than comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of unordered greater-than comparison of a and b. Description Performs nv_bfloat16 greater-than comparison of inputs a and b. NaN inputs generate true results. host device int hisinf (const nv_bfloat16 a) Checks if the input nv_bfloat16 number is infinite. Parameters a - nv_bfloat16. Is only being read. Returns int ‣ -1 iff a is equal to negative infinity, ‣ 1 iff a is equal to positive infinity, ‣ 0 otherwise. Description Checks if the input nv_bfloat16 number a is infinite. CUDA Math API vRelease Version | 155 Modules host device bool hisnan (const nv_bfloat16 a) Determine whether nv_bfloat16 argument is a NaN. Parameters a - nv_bfloat16. Is only being read. Returns bool ‣ true iff argument is NaN. Description Determine whether nv_bfloat16 value a is a NaN. host device bool hle (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 less-equal comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of less-equal comparison of a and b. Description Performs nv_bfloat16 less-equal comparison of inputs a and b. NaN inputs generate false results. CUDA Math API vRelease Version | 156 Modules host device bool hleu (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 unordered less-equal comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of unordered less-equal comparison of a and b. Description Performs nv_bfloat16 less-equal comparison of inputs a and b. NaN inputs generate true results. host device bool hlt (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 less-than comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of less-than comparison of a and b. Description Performs nv_bfloat16 less-than comparison of inputs a and b. NaN inputs generate false results. CUDA Math API vRelease Version | 157 Modules host device bool hltu (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 unordered less-than comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of unordered less-than comparison of a and b. Description Performs nv_bfloat16 less-than comparison of inputs a and b. NaN inputs generate true results. host device hmax (const nv_bfloat16 a, const nv_bfloat16 b) Calculates nv_bfloat16 maximum of two input values. Description Calculates nv_bfloat16 max(a, b) defined as (a > b) ? a : b. ‣ If either of inputs is NaN, the other input is returned. ‣ If both inputs are NaNs, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 host device hmax_nan (const nv_bfloat16 a, const nv_bfloat16 b) Calculates nv_bfloat16 maximum of two input values, NaNs pass through. Description Calculates nv_bfloat16 max(a, b) defined as (a > b) ? a : b. ‣ If either of inputs is NaN, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 CUDA Math API vRelease Version | 158 Modules host device hmin (const nv_bfloat16 a, const nv_bfloat16 b) Calculates nv_bfloat16 minimum of two input values. Description Calculates nv_bfloat16 min(a, b) defined as (a < b) ? a : b. ‣ If either of inputs is NaN, the other input is returned. ‣ If both inputs are NaNs, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 host device hmin_nan (const nv_bfloat16 a, const nv_bfloat16 b) Calculates nv_bfloat16 minimum of two input values, NaNs pass through. Description Calculates nv_bfloat16 min(a, b) defined as (a < b) ? a : b. ‣ If either of inputs is NaN, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 host device bool hne (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 not-equal comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of not-equal comparison of a and b. Description Performs nv_bfloat16 not-equal comparison of inputs a and b. NaN inputs generate false results. CUDA Math API vRelease Version | 159 Modules host device bool hneu (const nv_bfloat16 a, const nv_bfloat16 b) Performs nv_bfloat16 unordered not-equal comparison. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns bool ‣ The boolean result of unordered not-equal comparison of a and b. Description Performs nv_bfloat16 not-equal comparison of inputs a and b. NaN inputs generate true results. host device CUDA_BF16_FORCEINLINE bool operator!= (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 unordered compare not-equal operation. See also hneu( nv_bfloat16, nv_bfloat16) host device CUDA_BF16_FORCEINLINE bool operator< (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 ordered less-than compare operation. See also hlt( nv_bfloat16, nv_bfloat16) CUDA Math API vRelease Version | 160 Modules host device CUDA_BF16_FORCEINLINE bool operator<= (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 ordered less-or-equal compare operation. See also hle( nv_bfloat16, nv_bfloat16) host device CUDA_BF16_FORCEINLINE bool operator== (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 ordered compare equal operation. See also heq( nv_bfloat16, nv_bfloat16) host device CUDA_BF16_FORCEINLINE bool operator> (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 ordered greater-than compare operation. See also hgt( nv_bfloat16, nv_bfloat16) host device CUDA_BF16_FORCEINLINE bool operator>= (const nv_bfloat16 lh, const nv_bfloat16 rh) Description Performs nv_bfloat16 ordered greater-or-equal compare operation. See also hge( nv_bfloat16, nv_bfloat16) 1.3.5. Bfloat162 Comparison Functions Bfloat16 Precision Intrinsics To use these functions, include the header file cuda_bf16.h in your program. CUDA Math API vRelease Version | 161 Modules host device bool hbeq2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector if-equal comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of if-equal comparison of vectors a and b are true; ‣ false otherwise. Description Performs nv_bfloat162 vector if-equal comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 if-equal comparisons evaluate to true, or false otherwise. NaN inputs generate false results. host device bool hbequ2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered if-equal comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of unordered if-equal comparison of vectors a and b are true; ‣ false otherwise. CUDA Math API vRelease Version | 162 Modules Description Performs nv_bfloat162 vector if-equal comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 if-equal comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device bool hbge2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector greater-equal comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of greater-equal comparison of vectors a and b are true; ‣ false otherwise. Description Performs nv_bfloat162 vector greater-equal comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 greater-equal comparisons evaluate to true, or false otherwise. NaN inputs generate false results. host device bool hbgeu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered greater-equal comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. CUDA Math API vRelease Version | 163 Modules Returns bool ‣ true if both nv_bfloat16 results of unordered greater-equal comparison of vectors a and b are true; ‣ false otherwise. Description Performs nv_bfloat162 vector greater-equal comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 greater-equal comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device bool hbgt2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector greater-than comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of greater-than comparison of vectors a and b are true; ‣ false otherwise. Description Performs nv_bfloat162 vector greater-than comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 greater-than comparisons evaluate to true, or false otherwise. NaN inputs generate false results. CUDA Math API vRelease Version | 164 Modules host device bool hbgtu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered greater-than comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of unordered greater-than comparison of vectors a and b are true; ‣ false otherwise. Description Performs nv_bfloat162 vector greater-than comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 greater-than comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device bool hble2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector less-equal comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of less-equal comparison of vectors a and b are true; ‣ false otherwise. CUDA Math API vRelease Version | 165 Modules Description Performs nv_bfloat162 vector less-equal comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 less-equal comparisons evaluate to true, or false otherwise. NaN inputs generate false results. host device bool hbleu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered less-equal comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of unordered less-equal comparison of vectors a and b are true; ‣ false otherwise. Description Performs nv_bfloat162 vector less-equal comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 less-equal comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device bool hblt2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector less-than comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. CUDA Math API vRelease Version | 166 Modules Returns bool ‣ true if both nv_bfloat16 results of less-than comparison of vectors a and b are true; ‣ false otherwise. Description Performs nv_bfloat162 vector less-than comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 less-than comparisons evaluate to true, or false otherwise. NaN inputs generate false results. host device bool hbltu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered less-than comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of unordered less-than comparison of vectors a and b are true; ‣ false otherwise. Description Performs nv_bfloat162 vector less-than comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 less-than comparisons evaluate to true, or false otherwise. NaN inputs generate true results. CUDA Math API vRelease Version | 167 Modules host device bool hbne2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector not-equal comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of not-equal comparison of vectors a and b are true, ‣ false otherwise. Description Performs nv_bfloat162 vector not-equal comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 not-equal comparisons evaluate to true, or false otherwise. NaN inputs generate false results. host device bool hbneu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered not-equal comparison and returns boolean true iff both nv_bfloat16 results are true, boolean false otherwise. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns bool ‣ true if both nv_bfloat16 results of unordered not-equal comparison of vectors a and b are true; ‣ false otherwise. CUDA Math API vRelease Version | 168 Modules Description Performs nv_bfloat162 vector not-equal comparison of inputs a and b. The bool result is set to true only if both nv_bfloat16 not-equal comparisons evaluate to true, or false otherwise. NaN inputs generate true results. host device heq2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector if-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector result of if-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector if-equal comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. host device unsigned heq2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector if-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of if-equal comparison of vectors a and b. CUDA Math API vRelease Version | 169 Modules Description Performs nv_bfloat162 vector if-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hequ2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered if-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector result of unordered if-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector if-equal comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. host device unsigned hequ2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered if-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of unordered if-equal comparison of vectors a and b. CUDA Math API vRelease Version | 170 Modules Description Performs nv_bfloat162 vector if-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hge2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector greater-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector result of greater-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector greater-equal comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. host device unsigned hge2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector greater-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of greater-equal comparison of vectors a and b. CUDA Math API vRelease Version | 171 Modules Description Performs nv_bfloat162 vector greater-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hgeu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered greater-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 vector result of unordered greater-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector greater-equal comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. host device unsigned hgeu2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered greater-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of unordered greater-equal comparison of vectors a and b. CUDA Math API vRelease Version | 172 Modules Description Performs nv_bfloat162 vector greater-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hgt2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector greater-than comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector result of greater-than comparison of vectors a and b. Description Performs nv_bfloat162 vector greater-than comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. host device unsigned hgt2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector greater-than comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of greater-than comparison of vectors a and b. CUDA Math API vRelease Version | 173 Modules Description Performs nv_bfloat162 vector greater-than comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hgtu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered greater-than comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 vector result of unordered greater-than comparison of vectors a and b. Description Performs nv_bfloat162 vector greater-than comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. host device unsigned hgtu2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered greater-than comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of unordered greater-than comparison of vectors a and b. CUDA Math API vRelease Version | 174 Modules Description Performs nv_bfloat162 vector greater-than comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hisnan2 (const nv_bfloat162 a) Determine whether nv_bfloat162 argument is a NaN. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 with the corresponding nv_bfloat16 results set to 1.0 for NaN, 0.0 otherwise. Description Determine whether each nv_bfloat16 of input nv_bfloat162 number a is a NaN. host device hle2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector less-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 result of less-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector less-equal comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. CUDA Math API vRelease Version | 175 Modules host device unsigned hle2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector less-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of less-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector less-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hleu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered less-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector result of unordered less-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector less-equal comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. CUDA Math API vRelease Version | 176 Modules host device unsigned hleu2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered less-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of unordered less-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector less-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hlt2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector less-than comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 vector result of less-than comparison of vectors a and b. Description Performs nv_bfloat162 vector less-than comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. CUDA Math API vRelease Version | 177 Modules host device unsigned hlt2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector less-than comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of less-than comparison of vectors a and b. Description Performs nv_bfloat162 vector less-than comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. host device hltu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered less-than comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector result of unordered less-than comparison of vectors a and b. Description Performs nv_bfloat162 vector less-than comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. CUDA Math API vRelease Version | 178 Modules host device unsigned hltu2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered less-than comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of unordered less-than comparison of vectors a and b. Description Performs nv_bfloat162 vector less-than comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. host device hmax2 (const nv_bfloat162 a, const nv_bfloat162 b) Calculates nv_bfloat162 vector maximum of two inputs. Description Calculates nv_bfloat162 vector max(a, b). Elementwise nv_bfloat16 operation is defined as (a > b) ? a : b. ‣ If either of inputs is NaN, the other input is returned. ‣ If both inputs are NaNs, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 ‣ The result of elementwise maximum of vectors a and b CUDA Math API vRelease Version | 179 Modules host device hmax2_nan (const nv_bfloat162 a, const nv_bfloat162 b) Calculates nv_bfloat162 vector maximum of two inputs, NaNs pass through. Description Calculates nv_bfloat162 vector max(a, b). Elementwise nv_bfloat16 operation is defined as (a > b) ? a : b. ‣ If either of inputs is NaN, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 ‣ The result of elementwise maximum of vectors a and b, with NaNs pass through host device hmin2 (const nv_bfloat162 a, const nv_bfloat162 b) Calculates nv_bfloat162 vector minimum of two inputs. Description Calculates nv_bfloat162 vector min(a, b). Elementwise nv_bfloat16 operation is defined as (a < b) ? a : b. ‣ If either of inputs is NaN, the other input is returned. ‣ If both inputs are NaNs, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 ‣ The result of elementwise minimum of vectors a and b host device hmin2_nan (const nv_bfloat162 a, const nv_bfloat162 b) Calculates nv_bfloat162 vector minimum of two inputs, NaNs pass through. Description Calculates nv_bfloat162 vector min(a, b). Elementwise nv_bfloat16 operation is defined as (a < b) ? a : b. ‣ If either of inputs is NaN, then canonical NaN is returned. ‣ If values of both inputs are 0.0, then +0.0 > -0.0 ‣ The result of elementwise minimum of vectors a and b, with NaNs pass through CUDA Math API vRelease Version | 180 Modules host device hne2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector not-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector result of not-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector not-equal comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate false results. host device unsigned hne2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector not-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of not-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector not-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate false results. CUDA Math API vRelease Version | 181 Modules host device hneu2 (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered not-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector result of unordered not-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector not-equal comparison of inputs a and b. The corresponding nv_bfloat16 results are set to 1.0 for true, or 0.0 for false. NaN inputs generate true results. host device unsigned hneu2_mask (const nv_bfloat162 a, const nv_bfloat162 b) Performs nv_bfloat162 vector unordered not-equal comparison. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns unsigned int ‣ The vector mask result of unordered not-equal comparison of vectors a and b. Description Performs nv_bfloat162 vector not-equal comparison of inputs a and b. The corresponding unsigned bits are set to 0xFFFF for true, or 0x0 for false. NaN inputs generate true results. CUDA Math API vRelease Version | 182 Modules host device CUDA_BF16_FORCEINLINE bool operator!= (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 unordered compare not-equal operation. See also hbneu2( nv_bfloat162, nv_bfloat162) host device CUDA_BF16_FORCEINLINE bool operator< (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 ordered less-than compare operation. See also hblt2( nv_bfloat162, nv_bfloat162) host device CUDA_BF16_FORCEINLINE bool operator<= (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 ordered less-or-equal compare operation. See also hble2( nv_bfloat162, nv_bfloat162) host device CUDA_BF16_FORCEINLINE bool operator== (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 ordered compare equal operation. See also hbeq2( nv_bfloat162, nv_bfloat162) CUDA Math API vRelease Version | 183 Modules host device CUDA_BF16_FORCEINLINE bool operator> (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 ordered greater-than compare operation. See also hbgt2( nv_bfloat162, nv_bfloat162) host device CUDA_BF16_FORCEINLINE bool operator>= (const nv_bfloat162 lh, const nv_bfloat162 rh) Description Performs packed nv_bfloat16 ordered greater-or-equal compare operation. See also hbge2( nv_bfloat162, nv_bfloat162) 1.3.6. Bfloat16 Precision Conversion and Data Movement Bfloat16 Precision Intrinsics To use these functions, include the header file cuda_bf16.h in your program. host device float2 bfloat1622float2 (const nv_bfloat162 a) Converts both halves of nv_bfloat162 to float2 and returns the result. Parameters a - nv_bfloat162. Is only being read. Returns float2 ‣ a converted to float2. Description Converts both halves of nv_bfloat162 input a to float2 and returns the result. CUDA Math API vRelease Version | 184 Modules host device bfloat162bfloat162 (const nv_bfloat16 a) Returns nv_bfloat162 with both halves equal to the input value. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat162 ‣ The vector which has both its halves equal to the input a. Description Returns nv_bfloat162 number with both halves equal to the input a nv_bfloat16 number. host device signed char bfloat162char_rz (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed char in round-towards-zero mode. Parameters h - nv_bfloat16. Is only being read. Returns signed char ‣ h converted to a signed char. Description Convert the nv_bfloat16 floating-point value h to a signed char in round-towards-zero mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 185 Modules host device float bfloat162float (const nv_bfloat16 a) Converts nv_bfloat16 number to float. Parameters a - float. Is only being read. Returns float ‣ a converted to float. Description Converts nv_bfloat16 number a to float. device int bfloat162int_rd (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed integer in round-down mode. Parameters h - nv_bfloat16. Is only being read. Returns int ‣ h converted to a signed integer. Description Convert the nv_bfloat16 floating-point value h to a signed integer in round-down mode. NaN inputs are converted to 0. device int bfloat162int_rn (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed integer in round-to-nearest-even mode. Parameters h - nv_bfloat16. Is only being read. CUDA Math API vRelease Version | 186 Modules Returns int ‣ h converted to a signed integer. Description Convert the nv_bfloat16 floating-point value h to a signed integer in round-to-nearest-even mode. NaN inputs are converted to 0. device int bfloat162int_ru (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed integer in round-up mode. Parameters h - nv_bfloat16. Is only being read. Returns int ‣ h converted to a signed integer. Description Convert the nv_bfloat16 floating-point value h to a signed integer in round-up mode. NaN inputs are converted to 0. host device int bfloat162int_rz (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed integer in round-towards-zero mode. Parameters h - nv_bfloat16. Is only being read. Returns int ‣ h converted to a signed integer. CUDA Math API vRelease Version | 187 Modules Description Convert the nv_bfloat16 floating-point value h to a signed integer in round-towards-zero mode. NaN inputs are converted to 0. device long long int bfloat162ll_rd (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed 64-bit integer in round-down mode. Parameters h - nv_bfloat16. Is only being read. Returns long long int ‣ h converted to a signed 64-bit integer. Description Convert the nv_bfloat16 floating-point value h to a signed 64-bit integer in round-down mode. NaN inputs return a long long int with hex value of 0x8000000000000000. device long long int bfloat162ll_rn (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed 64-bit integer in round-to-nearest-even mode. Parameters h - nv_bfloat16. Is only being read. Returns long long int ‣ h converted to a signed 64-bit integer. Description Convert the nv_bfloat16 floating-point value h to a signed 64-bit integer in round-to-nearest- even mode. NaN inputs return a long long int with hex value of 0x8000000000000000. CUDA Math API vRelease Version | 188 Modules device long long int bfloat162ll_ru (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed 64-bit integer in round-up mode. Parameters h - nv_bfloat16. Is only being read. Returns long long int ‣ h converted to a signed 64-bit integer. Description Convert the nv_bfloat16 floating-point value h to a signed 64-bit integer in round-up mode. NaN inputs return a long long int with hex value of 0x8000000000000000. host device long long int bfloat162ll_rz (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed 64-bit integer in round-towards-zero mode. Parameters h - nv_bfloat16. Is only being read. Returns long long int ‣ h converted to a signed 64-bit integer. Description Convert the nv_bfloat16 floating-point value h to a signed 64-bit integer in round-towards-zero mode. NaN inputs return a long long int with hex value of 0x8000000000000000. CUDA Math API vRelease Version | 189 Modules device short int bfloat162short_rd (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed short integer in round-down mode. Parameters h - nv_bfloat16. Is only being read. Returns short int ‣ h converted to a signed short integer. Description Convert the nv_bfloat16 floating-point value h to a signed short integer in round-down mode. NaN inputs are converted to 0. device short int bfloat162short_rn (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed short integer in round-to-nearest-even mode. Parameters h - nv_bfloat16. Is only being read. Returns short int ‣ h converted to a signed short integer. Description Convert the nv_bfloat16 floating-point value h to a signed short integer in round-to-nearest- even mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 190 Modules device short int bfloat162short_ru (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed short integer in round-up mode. Parameters h - nv_bfloat16. Is only being read. Returns short int ‣ h converted to a signed short integer. Description Convert the nv_bfloat16 floating-point value h to a signed short integer in round-up mode. NaN inputs are converted to 0. host device short int bfloat162short_rz (const nv_bfloat16 h) Convert a nv_bfloat16 to a signed short integer in round-towards-zero mode. Parameters h - nv_bfloat16. Is only being read. Returns short int ‣ h converted to a signed short integer. Description Convert the nv_bfloat16 floating-point value h to a signed short integer in round-towards-zero mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 191 Modules host device unsigned char bfloat162uchar_rz (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned char in round-towards-zero mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned char ‣ h converted to an unsigned char. Description Convert the nv_bfloat16 floating-point value h to an unsigned char in round-towards-zero mode. NaN inputs are converted to 0. device unsigned int bfloat162uint_rd (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned integer in round-down mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned int ‣ h converted to an unsigned integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned integer in round-down mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 192 Modules device unsigned int bfloat162uint_rn (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned integer in round-to-nearest-even mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned int ‣ h converted to an unsigned integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned integer in round-to-nearest-even mode. NaN inputs are converted to 0. device unsigned int bfloat162uint_ru (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned integer in round-up mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned int ‣ h converted to an unsigned integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned integer in round-up mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 193 Modules host device unsigned int bfloat162uint_rz (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned integer in round-towards-zero mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned int ‣ h converted to an unsigned integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned integer in round-towards-zero mode. NaN inputs are converted to 0. device unsigned long long int bfloat162ull_rd (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned 64-bit integer in round-down mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned long long int ‣ h converted to an unsigned 64-bit integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned 64-bit integer in round-down mode. NaN inputs return 0x8000000000000000. CUDA Math API vRelease Version | 194 Modules device unsigned long long int bfloat162ull_rn (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned 64-bit integer in round-to-nearest-even mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned long long int ‣ h converted to an unsigned 64-bit integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned 64-bit integer in round-to- nearest-even mode. NaN inputs return 0x8000000000000000. device unsigned long long int bfloat162ull_ru (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned 64-bit integer in round-up mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned long long int ‣ h converted to an unsigned 64-bit integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned 64-bit integer in round-up mode. NaN inputs return 0x8000000000000000. CUDA Math API vRelease Version | 195 Modules host device unsigned long long int bfloat162ull_rz (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned 64-bit integer in round-towards-zero mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned long long int ‣ h converted to an unsigned 64-bit integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned 64-bit integer in round-towards- zero mode. NaN inputs return 0x8000000000000000. device unsigned short int bfloat162ushort_rd (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned short integer in round-down mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned short int ‣ h converted to an unsigned short integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned short integer in round-down mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 196 Modules device unsigned short int bfloat162ushort_rn (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned short integer in round-to-nearest-even mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned short int ‣ h converted to an unsigned short integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned short integer in round-to- nearest-even mode. NaN inputs are converted to 0. device unsigned short int bfloat162ushort_ru (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned short integer in round-up mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned short int ‣ h converted to an unsigned short integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned short integer in round-up mode. NaN inputs are converted to 0. CUDA Math API vRelease Version | 197 Modules host device unsigned short int bfloat162ushort_rz (const nv_bfloat16 h) Convert a nv_bfloat16 to an unsigned short integer in round-towards-zero mode. Parameters h - nv_bfloat16. Is only being read. Returns unsigned short int ‣ h converted to an unsigned short integer. Description Convert the nv_bfloat16 floating-point value h to an unsigned short integer in round-towards- zero mode. NaN inputs are converted to 0. host device short int bfloat16_as_short (const nv_bfloat16 h) Reinterprets bits in a nv_bfloat16 as a signed short integer. Parameters h - nv_bfloat16. Is only being read. Returns short int ‣ The reinterpreted value. Description Reinterprets the bits in the nv_bfloat16 floating-point number h as a signed short integer. CUDA Math API vRelease Version | 198 Modules host device unsigned short int bfloat16_as_ushort (const nv_bfloat16 h) Reinterprets bits in a nv_bfloat16 as an unsigned short integer. Parameters h - nv_bfloat16. Is only being read. Returns unsigned short int ‣ The reinterpreted value. Description Reinterprets the bits in the nv_bfloat16 floating-point h as an unsigned short number. host device double2bfloat16 (const double a) Converts double number to nv_bfloat16 precision in round-to-nearest-even mode and returns nv_bfloat16 with converted value. Parameters a - double. Is only being read. Returns nv_bfloat16 ‣ a converted to nv_bfloat16. Description Converts double number a to nv_bfloat16 precision in round-to-nearest-even mode. host device float22bfloat162_rn (const float2 a) Converts both components of float2 number to nv_bfloat16 precision in round-to-nearest-even mode and returns nv_bfloat162 with converted values. Parameters a - float2. Is only being read. CUDA Math API vRelease Version | 199 Modules Returns nv_bfloat162 ‣ The nv_bfloat162 which has corresponding halves equal to the converted float2 components. Description Converts both components of float2 to nv_bfloat16 precision in round-to-nearest-even mode and combines the results into one nv_bfloat162 number. Low 16 bits of the return value correspond to a.x and high 16 bits of the return value correspond to a.y. host device float2bfloat16 (const float a) Converts float number to nv_bfloat16 precision in round-to-nearest-even mode and returns nv_bfloat16 with converted value. Parameters a - float. Is only being read. Returns nv_bfloat16 ‣ a converted to nv_bfloat16. Description Converts float number a to nv_bfloat16 precision in round-to-nearest-even mode. host device float2bfloat162_rn (const float a) Converts input to nv_bfloat16 precision in round-to-nearest-even mode and populates both halves of nv_bfloat162 with converted value. Parameters a - float. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 value with both halves equal to the converted nv_bfloat16 precision number. CUDA Math API vRelease Version | 200 Modules Description Converts input a to nv_bfloat16 precision in round-to-nearest-even mode and populates both halves of nv_bfloat162 with converted value. host device float2bfloat16_rd (const float a) Converts float number to nv_bfloat16 precision in round-down mode and returns nv_bfloat16 with converted value. Parameters a - float. Is only being read. Returns nv_bfloat16 ‣ a converted to nv_bfloat16. Description Converts float number a to nv_bfloat16 precision in round-down mode. host device float2bfloat16_rn (const float a) Converts float number to nv_bfloat16 precision in round-to-nearest-even mode and returns nv_bfloat16 with converted value. Parameters a - float. Is only being read. Returns nv_bfloat16 ‣ a converted to nv_bfloat16. Description Converts float number a to nv_bfloat16 precision in round-to-nearest-even mode. CUDA Math API vRelease Version | 201 Modules host device float2bfloat16_ru (const float a) Converts float number to nv_bfloat16 precision in round-up mode and returns nv_bfloat16 with converted value. Parameters a - float. Is only being read. Returns nv_bfloat16 ‣ a converted to nv_bfloat16. Description Converts float number a to nv_bfloat16 precision in round-up mode. host device float2bfloat16_rz (const float a) Converts float number to nv_bfloat16 precision in round-towards-zero mode and returns nv_bfloat16 with converted value. Parameters a - float. Is only being read. Returns nv_bfloat16 ‣ a converted to nv_bfloat16. Description Converts float number a to nv_bfloat16 precision in round-towards-zero mode. host device floats2bfloat162_rn (const float a, const float b) Converts both input floats to nv_bfloat16 precision in round-to-nearest-even mode and returns nv_bfloat162 with converted values. Parameters a - float. Is only being read. CUDA Math API vRelease Version | 202 Modules b - float. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 value with corresponding halves equal to the converted input floats. Description Converts both input floats to nv_bfloat16 precision in round-to-nearest-even mode and combines the results into one nv_bfloat162 number. Low 16 bits of the return value correspond to the input a, high 16 bits correspond to the input b. host device halves2bfloat162 (const nv_bfloat16 a, const nv_bfloat16 b) Combines two nv_bfloat16 numbers into one nv_bfloat162 number. Parameters a - nv_bfloat16. Is only being read. b - nv_bfloat16. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 with one nv_bfloat16 equal to a and the other to b. Description Combines two input nv_bfloat16 number a and b into one nv_bfloat162 number. Input a is stored in low 16 bits of the return value, input b is stored in high 16 bits of the return value. host device high2bfloat16 (const nv_bfloat162 a) Returns high 16 bits of nv_bfloat162 input. Parameters a - nv_bfloat162. Is only being read. CUDA Math API vRelease Version | 203 Modules Returns nv_bfloat16 ‣ The high 16 bits of the input. Description Returns high 16 bits of nv_bfloat162 input a. host device high2bfloat162 (const nv_bfloat162 a) Extracts high 16 bits from nv_bfloat162 input. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 with both halves equal to the high 16 bits of the input. Description Extracts high 16 bits from nv_bfloat162 input a and returns a new nv_bfloat162 number which has both halves equal to the extracted bits. host device float high2float (const nv_bfloat162 a) Converts high 16 bits of nv_bfloat162 to float and returns the result. Parameters a - nv_bfloat162. Is only being read. Returns float ‣ The high 16 bits of a converted to float. CUDA Math API vRelease Version | 204 Modules Description Converts high 16 bits of nv_bfloat162 input a to 32-bit floating-point number and returns the result. host device highs2bfloat162 (const nv_bfloat162 a, const nv_bfloat162 b) Extracts high 16 bits from each of the two nv_bfloat162 inputs and combines into one nv_bfloat162 number. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The high 16 bits of a and of b. Description Extracts high 16 bits from each of the two nv_bfloat162 inputs and combines into one nv_bfloat162 number. High 16 bits from input a is stored in low 16 bits of the return value, high 16 bits from input b is stored in high 16 bits of the return value. device int2bfloat16_rd (const int i) Convert a signed integer to a nv_bfloat16 in round-down mode. Parameters i - int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed integer value i to a nv_bfloat16 floating-point value in round-down mode. CUDA Math API vRelease Version | 205 Modules host device int2bfloat16_rn (const int i) Convert a signed integer to a nv_bfloat16 in round-to-nearest-even mode. Parameters i - int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed integer value i to a nv_bfloat16 floating-point value in round-to-nearest- even mode. device int2bfloat16_ru (const int i) Convert a signed integer to a nv_bfloat16 in round-up mode. Parameters i - int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed integer value i to a nv_bfloat16 floating-point value in round-up mode. device int2bfloat16_rz (const int i) Convert a signed integer to a nv_bfloat16 in round-towards-zero mode. Parameters i - int. Is only being read. Returns nv_bfloat16 CUDA Math API vRelease Version | 206 Modules ‣ i converted to nv_bfloat16. Description Convert the signed integer value i to a nv_bfloat16 floating-point value in round-towards-zero mode. device ldca (const nv_bfloat16 *ptr) Generates a `ld.global.ca` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldca (const nv_bfloat162 *ptr) Generates a `ld.global.ca` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldcg (const nv_bfloat16 *ptr) Generates a `ld.global.cg` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` CUDA Math API vRelease Version | 207 Modules device ldcg (const nv_bfloat162 *ptr) Generates a `ld.global.cg` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldcs (const nv_bfloat16 *ptr) Generates a `ld.global.cs` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldcs (const nv_bfloat162 *ptr) Generates a `ld.global.cs` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldcv (const nv_bfloat16 *ptr) Generates a `ld.global.cv` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` CUDA Math API vRelease Version | 208 Modules device ldcv (const nv_bfloat162 *ptr) Generates a `ld.global.cv` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldg (const nv_bfloat16 *ptr) Generates a `ld.global.nc` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldg (const nv_bfloat162 *ptr) Generates a `ld.global.nc` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ldlu (const nv_bfloat16 *ptr) Generates a `ld.global.lu` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` CUDA Math API vRelease Version | 209 Modules device ldlu (const nv_bfloat162 *ptr) Generates a `ld.global.lu` load instruction. Parameters ptr - memory location Returns The value pointed by `ptr` device ll2bfloat16_rd (const long long int i) Convert a signed 64-bit integer to a nv_bfloat16 in round-down mode. Parameters i - long long int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed 64-bit integer value i to a nv_bfloat16 floating-point value in round-down mode. host device ll2bfloat16_rn (const long long int i) Convert a signed 64-bit integer to a nv_bfloat16 in round-to-nearest-even mode. Parameters i - long long int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed 64-bit integer value i to a nv_bfloat16 floating-point value in round-to- nearest-even mode. CUDA Math API vRelease Version | 210 Modules device ll2bfloat16_ru (const long long int i) Convert a signed 64-bit integer to a nv_bfloat16 in round-up mode. Parameters i - long long int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed 64-bit integer value i to a nv_bfloat16 floating-point value in round-up mode. device ll2bfloat16_rz (const long long int i) Convert a signed 64-bit integer to a nv_bfloat16 in round-towards-zero mode. Parameters i - long long int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed 64-bit integer value i to a nv_bfloat16 floating-point value in round- towards-zero mode. host device low2bfloat16 (const nv_bfloat162 a) Returns low 16 bits of nv_bfloat162 input. Parameters a - nv_bfloat162. Is only being read. CUDA Math API vRelease Version | 211 Modules Returns nv_bfloat16 ‣ Returns nv_bfloat16 which contains low 16 bits of the input a. Description Returns low 16 bits of nv_bfloat162 input a. host device low2bfloat162 (const nv_bfloat162 a) Extracts low 16 bits from nv_bfloat162 input. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 with both halves equal to the low 16 bits of the input. Description Extracts low 16 bits from nv_bfloat162 input a and returns a new nv_bfloat162 number which has both halves equal to the extracted bits. host device float low2float (const nv_bfloat162 a) Converts low 16 bits of nv_bfloat162 to float and returns the result. Parameters a - nv_bfloat162. Is only being read. Returns float ‣ The low 16 bits of a converted to float. CUDA Math API vRelease Version | 212 Modules Description Converts low 16 bits of nv_bfloat162 input a to 32-bit floating-point number and returns the result. host device lowhigh2highlow (const nv_bfloat162 a) Swaps both halves of the nv_bfloat162 input. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ a with its halves being swapped. Description Swaps both halves of the nv_bfloat162 input and returns a new nv_bfloat162 number with swapped halves. host device lows2bfloat162 (const nv_bfloat162 a, const nv_bfloat162 b) Extracts low 16 bits from each of the two nv_bfloat162 inputs and combines into one nv_bfloat162 number. Parameters a - nv_bfloat162. Is only being read. b - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The low 16 bits of a and of b. CUDA Math API vRelease Version | 213 Modules Description Extracts low 16 bits from each of the two nv_bfloat162 inputs and combines into one nv_bfloat162 number. Low 16 bits from input a is stored in low 16 bits of the return value, low 16 bits from input b is stored in high 16 bits of the return value. device shfl_down_sync (const unsigned mask, const nv_bfloat16 var, const unsigned int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread with higher ID relative to the caller. Parameters mask - unsigned int. Is only being read. var - nv_bfloat16. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 2-byte word referenced by var from the source thread ID as nv_bfloat16. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by adding delta to the caller's thread ID. The value of var held by the resulting thread ID is returned: this has the effect of shifting var down the warp by delta threads. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. As for shfl_up_sync(), the ID number of the source thread will not wrap around the value of width and so the upper delta threads will remain unchanged. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. CUDA Math API vRelease Version | 214 Modules device shfl_down_sync (const unsigned mask, const nv_bfloat162 var, const unsigned int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread with higher ID relative to the caller. Parameters mask - unsigned int. Is only being read. var - nv_bfloat162. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 4-byte word referenced by var from the source thread ID as nv_bfloat162. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by adding delta to the caller's thread ID. The value of var held by the resulting thread ID is returned: this has the effect of shifting var down the warp by delta threads. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. As for shfl_up_sync(), the ID number of the source thread will not wrap around the value of width and so the upper delta threads will remain unchanged. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. device shfl_sync (const unsigned mask, const nv_bfloat16 var, const int delta, const int width) Exchange a variable between threads within a warp. Direct copy from indexed thread. Parameters mask - unsigned int. Is only being read. CUDA Math API vRelease Version | 215 Modules var - nv_bfloat16. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 2-byte word referenced by var from the source thread ID as nv_bfloat16. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Returns the value of var held by the thread whose ID is given by delta. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. If delta is outside the range [0:width-1], the value returned corresponds to the value of var held by the delta modulo width (i.e. within the same subsection). width must have a value which is a power of 2; results are undefined if width is not a power of 2, or is a number greater than warpSize. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. device shfl_sync (const unsigned mask, const nv_bfloat162 var, const int delta, const int width) Exchange a variable between threads within a warp. Direct copy from indexed thread. Parameters mask - unsigned int. Is only being read. var - nv_bfloat162. Is only being read. delta - int. Is only being read. width - int. Is only being read. CUDA Math API vRelease Version | 216 Modules Returns Returns the 4-byte word referenced by var from the source thread ID as nv_bfloat162. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Returns the value of var held by the thread whose ID is given by delta. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. If delta is outside the range [0:width-1], the value returned corresponds to the value of var held by the delta modulo width (i.e. within the same subsection). width must have a value which is a power of 2; results are undefined if width is not a power of 2, or is a number greater than warpSize. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. device shfl_up_sync (const unsigned mask, const nv_bfloat16 var, const unsigned int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread with lower ID relative to the caller. Parameters mask - unsigned int. Is only being read. var - nv_bfloat16. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 2-byte word referenced by var from the source thread ID as nv_bfloat16. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. CUDA Math API vRelease Version | 217 Modules Description Calculates a source thread ID by subtracting delta from the caller's lane ID. The value of var held by the resulting lane ID is returned: in effect, var is shifted up the warp by delta threads. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. The source thread index will not wrap around the value of width, so effectively the lower delta threads will be unchanged. width must have a value which is a power of 2; results are undefined if width is not a power of 2, or is a number greater than warpSize. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. device shfl_up_sync (const unsigned mask, const nv_bfloat162 var, const unsigned int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread with lower ID relative to the caller. Parameters mask - unsigned int. Is only being read. var - nv_bfloat162. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 4-byte word referenced by var from the source thread ID as nv_bfloat162. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by subtracting delta from the caller's lane ID. The value of var held by the resulting lane ID is returned: in effect, var is shifted up the warp by delta threads. If width is less than warpSize then each subsection of the warp behaves as a separate entity with a starting logical thread ID of 0. The source thread index will not wrap around the value of width, so effectively the lower delta threads will be unchanged. width must have a value which CUDA Math API vRelease Version | 218 Modules is a power of 2; results are undefined if width is not a power of 2, or is a number greater than warpSize. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. device shfl_xor_sync (const unsigned mask, const nv_bfloat16 var, const int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread based on bitwise XOR of own thread ID. Parameters mask - unsigned int. Is only being read. var - nv_bfloat16. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 2-byte word referenced by var from the source thread ID as nv_bfloat16. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by performing a bitwise XOR of the caller's thread ID with mask: the value of var held by the resulting thread ID is returned. If width is less than warpSize then each group of width consecutive threads are able to access elements from earlier groups of threads, however if they attempt to access elements from later groups of threads their own value of var will be returned. This mode implements a butterfly addressing pattern such as is used in tree reduction and broadcast. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. CUDA Math API vRelease Version | 219 Modules device shfl_xor_sync (const unsigned mask, const nv_bfloat162 var, const int delta, const int width) Exchange a variable between threads within a warp. Copy from a thread based on bitwise XOR of own thread ID. Parameters mask - unsigned int. Is only being read. var - nv_bfloat162. Is only being read. delta - int. Is only being read. width - int. Is only being read. Returns Returns the 4-byte word referenced by var from the source thread ID as nv_bfloat162. If the source thread ID is out of range or the source thread has exited, the calling thread's own var is returned. Description Calculates a source thread ID by performing a bitwise XOR of the caller's thread ID with mask: the value of var held by the resulting thread ID is returned. If width is less than warpSize then each group of width consecutive threads are able to access elements from earlier groups of threads, however if they attempt to access elements from later groups of threads their own value of var will be returned. This mode implements a butterfly addressing pattern such as is used in tree reduction and broadcast. Note: For more details for this function see the Warp Shuffle Functions section in the CUDA C++ Programming Guide. device short2bfloat16_rd (const short int i) Convert a signed short integer to a nv_bfloat16 in round-down mode. Parameters i - short int. Is only being read. CUDA Math API vRelease Version | 220 Modules Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed short integer value i to a nv_bfloat16 floating-point value in round-down mode. host device short2bfloat16_rn (const short int i) Convert a signed short integer to a nv_bfloat16 in round-to-nearest-even mode. Parameters i - short int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed short integer value i to a nv_bfloat16 floating-point value in round-to- nearest-even mode. device short2bfloat16_ru (const short int i) Convert a signed short integer to a nv_bfloat16 in round-up mode. Parameters i - short int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed short integer value i to a nv_bfloat16 floating-point value in round-up mode. CUDA Math API vRelease Version | 221 Modules device short2bfloat16_rz (const short int i) Convert a signed short integer to a nv_bfloat16 in round-towards-zero mode. Parameters i - short int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the signed short integer value i to a nv_bfloat16 floating-point value in round- towards-zero mode. host device short_as_bfloat16 (const short int i) Reinterprets bits in a signed short integer as a nv_bfloat16. Parameters i - short int. Is only being read. Returns nv_bfloat16 ‣ The reinterpreted value. Description Reinterprets the bits in the signed short integer i as a nv_bfloat16 floating-point number. device void stcg (const nv_bfloat16 *ptr, const nv_bfloat16 value) Generates a `st.global.cg` store instruction. Parameters ptr - memory location value - the value to be stored CUDA Math API vRelease Version | 222 Modules device void stcg (const nv_bfloat162 *ptr, const nv_bfloat162 value) Generates a `st.global.cg` store instruction. Parameters ptr - memory location value - the value to be stored device void stcs (const nv_bfloat16 *ptr, const nv_bfloat16 value) Generates a `st.global.cs` store instruction. Parameters ptr - memory location value - the value to be stored device void stcs (const nv_bfloat162 *ptr, const nv_bfloat162 value) Generates a `st.global.cs` store instruction. Parameters ptr - memory location value - the value to be stored device void stwb (const nv_bfloat16 *ptr, const nv_bfloat16 value) Generates a `st.global.wb` store instruction. Parameters ptr - memory location value - the value to be stored CUDA Math API vRelease Version | 223 Modules device void stwb (const nv_bfloat162 *ptr, const nv_bfloat162 value) Generates a `st.global.wb` store instruction. Parameters ptr - memory location value - the value to be stored device void stwt (const nv_bfloat16 *ptr, const nv_bfloat16 value) Generates a `st.global.wt` store instruction. Parameters ptr - memory location value - the value to be stored device void stwt (const nv_bfloat162 *ptr, const nv_bfloat162 value) Generates a `st.global.wt` store instruction. Parameters ptr - memory location value - the value to be stored device uint2bfloat16_rd (const unsigned int i) Convert an unsigned integer to a nv_bfloat16 in round-down mode. Parameters i - unsigned int. Is only being read. Returns nv_bfloat16 CUDA Math API vRelease Version | 224 Modules ‣ i converted to nv_bfloat16. Description Convert the unsigned integer value i to a nv_bfloat16 floating-point value in round-down mode. host device uint2bfloat16_rn (const unsigned int i) Convert an unsigned integer to a nv_bfloat16 in round-to-nearest-even mode. Parameters i - unsigned int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned integer value i to a nv_bfloat16 floating-point value in round-to-nearest- even mode. device uint2bfloat16_ru (const unsigned int i) Convert an unsigned integer to a nv_bfloat16 in round-up mode. Parameters i - unsigned int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned integer value i to a nv_bfloat16 floating-point value in round-up mode. CUDA Math API vRelease Version | 225 Modules device uint2bfloat16_rz (const unsigned int i) Convert an unsigned integer to a nv_bfloat16 in round-towards-zero mode. Parameters i - unsigned int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned integer value i to a nv_bfloat16 floating-point value in round-towards- zero mode. device ull2bfloat16_rd (const unsigned long long int i) Convert an unsigned 64-bit integer to a nv_bfloat16 in round-down mode. Parameters i - unsigned long long int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned 64-bit integer value i to a nv_bfloat16 floating-point value in round- down mode. host device ull2bfloat16_rn (const unsigned long long int i) Convert an unsigned 64-bit integer to a nv_bfloat16 in round-to-nearest-even mode. Parameters i - unsigned long long int. Is only being read. CUDA Math API vRelease Version | 226 Modules Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned 64-bit integer value i to a nv_bfloat16 floating-point value in round-to- nearest-even mode. device ull2bfloat16_ru (const unsigned long long int i) Convert an unsigned 64-bit integer to a nv_bfloat16 in round-up mode. Parameters i - unsigned long long int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned 64-bit integer value i to a nv_bfloat16 floating-point value in round-up mode. device ull2bfloat16_rz (const unsigned long long int i) Convert an unsigned 64-bit integer to a nv_bfloat16 in round-towards-zero mode. Parameters i - unsigned long long int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned 64-bit integer value i to a nv_bfloat16 floating-point value in round- towards-zero mode. CUDA Math API vRelease Version | 227 Modules device ushort2bfloat16_rd (const unsigned short int i) Convert an unsigned short integer to a nv_bfloat16 in round-down mode. Parameters i - unsigned short int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned short integer value i to a nv_bfloat16 floating-point value in round-down mode. host device ushort2bfloat16_rn (const unsigned short int i) Convert an unsigned short integer to a nv_bfloat16 in round-to-nearest-even mode. Parameters i - unsigned short int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned short integer value i to a nv_bfloat16 floating-point value in round-to- nearest-even mode. device ushort2bfloat16_ru (const unsigned short int i) Convert an unsigned short integer to a nv_bfloat16 in round-up mode. Parameters i - unsigned short int. Is only being read. CUDA Math API vRelease Version | 228 Modules Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned short integer value i to a nv_bfloat16 floating-point value in round-up mode. device ushort2bfloat16_rz (const unsigned short int i) Convert an unsigned short integer to a nv_bfloat16 in round-towards-zero mode. Parameters i - unsigned short int. Is only being read. Returns nv_bfloat16 ‣ i converted to nv_bfloat16. Description Convert the unsigned short integer value i to a nv_bfloat16 floating-point value in round- towards-zero mode. host device ushort_as_bfloat16 (const unsigned short int i) Reinterprets bits in an unsigned short integer as a nv_bfloat16. Parameters i - unsigned short int. Is only being read. Returns nv_bfloat16 ‣ The reinterpreted value. Description Reinterprets the bits in the unsigned short integer i as a nv_bfloat16 floating-point number. CUDA Math API vRelease Version | 229 Modules host device make_bfloat162 (const nv_bfloat16 x, const nv_bfloat16 y) Vector function, combines two nv_bfloat16 numbers into one nv_bfloat162 number. Parameters x - nv_bfloat16. Is only being read. y - nv_bfloat16. Is only being read. Returns nv_bfloat162 ‣ The nv_bfloat162 Description vector with one half equal to x and the other to y. Combines two input nv_bfloat16 number x and y into one nv_bfloat162 number. Input x is stored in low 16 bits of the return value, input y is stored in high 16 bits of the return value. 1.3.7. Bfloat16 Math Functions Bfloat16 Precision Intrinsics To use these functions, include the header file cuda_bf16.h in your program. device hceil (const nv_bfloat16 h) Calculate ceiling of the input argument. Parameters h - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The smallest integer value not less than h. Description Compute the smallest integer value not less than h. CUDA Math API vRelease Version | 230 Modules device hcos (const nv_bfloat16 a) Calculates nv_bfloat16 cosine in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The cosine of a. Description Calculates nv_bfloat16 cosine of input a in round-to-nearest-even mode. NOTE: this function's implementation calls cosf( float) function and is exposed to compiler optimizations. Specifically, --use_fast_math flag changes cosf( float) into an intrinsic cosf( float), which has less accurate numeric behavior. device hexp (const nv_bfloat16 a) Calculates nv_bfloat16 natural exponential function in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The natural exponential function on a. Description Calculates nv_bfloat16 natural exponential function of input a in round-to-nearest-even mode. device hexp10 (const nv_bfloat16 a) Calculates nv_bfloat16 decimal exponential function in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. CUDA Math API vRelease Version | 231 Modules Returns nv_bfloat16 ‣ The decimal exponential function on a. Description Calculates nv_bfloat16 decimal exponential function of input a in round-to-nearest-even mode. device hexp2 (const nv_bfloat16 a) Calculates nv_bfloat16 binary exponential function in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The binary exponential function on a. Description Calculates nv_bfloat16 binary exponential function of input a in round-to-nearest-even mode. device hfloor (const nv_bfloat16 h) Calculate the largest integer less than or equal to h. Parameters h - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The largest integer value which is less than or equal to h. Description Calculate the largest integer value which is less than or equal to h. CUDA Math API vRelease Version | 232 Modules device hlog (const nv_bfloat16 a) Calculates nv_bfloat16 natural logarithm in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The natural logarithm of a. Description Calculates nv_bfloat16 natural logarithm of input a in round-to-nearest-even mode. device hlog10 (const nv_bfloat16 a) Calculates nv_bfloat16 decimal logarithm in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The decimal logarithm of a. Description Calculates nv_bfloat16 decimal logarithm of input a in round-to-nearest-even mode. device hlog2 (const nv_bfloat16 a) Calculates nv_bfloat16 binary logarithm in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The binary logarithm of a. CUDA Math API vRelease Version | 233 Modules Description Calculates nv_bfloat16 binary logarithm of input a in round-to-nearest-even mode. device hrcp (const nv_bfloat16 a) Calculates nv_bfloat16 reciprocal in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The reciprocal of a. Description Calculates nv_bfloat16 reciprocal of input a in round-to-nearest-even mode. device hrint (const nv_bfloat16 h) Round input to nearest integer value in nv_bfloat16 floating-point number. Parameters h - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The nearest integer to h. Description Round h to the nearest integer value in nv_bfloat16 floating-point format, with bfloat16way cases rounded to the nearest even integer value. CUDA Math API vRelease Version | 234 Modules device hrsqrt (const nv_bfloat16 a) Calculates nv_bfloat16 reciprocal square root in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The reciprocal square root of a. Description Calculates nv_bfloat16 reciprocal square root of input a in round-to-nearest-even mode. device hsin (const nv_bfloat16 a) Calculates nv_bfloat16 sine in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The sine of a. Description Calculates nv_bfloat16 sine of input a in round-to-nearest-even mode. NOTE: this function's implementation calls sinf( float) function and is exposed to compiler optimizations. Specifically, --use_fast_math flag changes sinf( float) into an intrinsic sinf( float), which has less accurate numeric behavior. device hsqrt (const nv_bfloat16 a) Calculates nv_bfloat16 square root in round-to-nearest-even mode. Parameters a - nv_bfloat16. Is only being read. CUDA Math API vRelease Version | 235 Modules Returns nv_bfloat16 ‣ The square root of a. Description Calculates nv_bfloat16 square root of input a in round-to-nearest-even mode. device htrunc (const nv_bfloat16 h) Truncate input argument to the integral part. Parameters h - nv_bfloat16. Is only being read. Returns nv_bfloat16 ‣ The truncated integer value. Description Round h to the nearest integer value that does not exceed h in magnitude. 1.3.8. Bfloat162 Math Functions Bfloat16 Precision Intrinsics To use these functions, include the header file cuda_bf16.h in your program. device h2ceil (const nv_bfloat162 h) Calculate nv_bfloat162 vector ceiling of the input argument. Parameters h - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector of smallest integers not less than h. CUDA Math API vRelease Version | 236 Modules Description For each component of vector h compute the smallest integer value not less than h. device h2cos (const nv_bfloat162 a) Calculates nv_bfloat162 vector cosine in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise cosine on vector a. Description Calculates nv_bfloat162 cosine of input vector a in round-to-nearest-even mode. NOTE: this function's implementation calls cosf( float) function and is exposed to compiler optimizations. Specifically, --use_fast_math flag changes cosf( float) into an intrinsic cosf( float), which has less accurate numeric behavior. device h2exp (const nv_bfloat162 a) Calculates nv_bfloat162 vector exponential function in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise exponential function on vector a. Description Calculates nv_bfloat162 exponential function of input vector a in round-to-nearest-even mode. CUDA Math API vRelease Version | 237 Modules device h2exp10 (const nv_bfloat162 a) Calculates nv_bfloat162 vector decimal exponential function in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise decimal exponential function on vector a. Description Calculates nv_bfloat162 decimal exponential function of input vector a in round-to- nearest-even mode. device h2exp2 (const nv_bfloat162 a) Calculates nv_bfloat162 vector binary exponential function in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise binary exponential function on vector a. Description Calculates nv_bfloat162 binary exponential function of input vector a in round-to-nearest- even mode. device h2floor (const nv_bfloat162 h) Calculate the largest integer less than or equal to h. Parameters h - nv_bfloat162. Is only being read. CUDA Math API vRelease Version | 238 Modules Returns nv_bfloat162 ‣ The vector of largest integers which is less than or equal to h. Description For each component of vector h calculate the largest integer value which is less than or equal to h. device h2log (const nv_bfloat162 a) Calculates nv_bfloat162 vector natural logarithm in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise natural logarithm on vector a. Description Calculates nv_bfloat162 natural logarithm of input vector a in round-to-nearest-even mode. device h2log10 (const nv_bfloat162 a) Calculates nv_bfloat162 vector decimal logarithm in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise decimal logarithm on vector a. Description Calculates nv_bfloat162 decimal logarithm of input vector a in round-to-nearest-even mode. CUDA Math API vRelease Version | 239 Modules device h2log2 (const nv_bfloat162 a) Calculates nv_bfloat162 vector binary logarithm in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise binary logarithm on vector a. Description Calculates nv_bfloat162 binary logarithm of input vector a in round-to-nearest-even mode. device h2rcp (const nv_bfloat162 a) Calculates nv_bfloat162 vector reciprocal in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise reciprocal on vector a. Description Calculates nv_bfloat162 reciprocal of input vector a in round-to-nearest-even mode. device h2rint (const nv_bfloat162 h) Round input to nearest integer value in nv_bfloat16 floating-point number. Parameters h - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The vector of rounded integer values. CUDA Math API vRelease Version | 240 Modules Description Round each component of nv_bfloat162 vector h to the nearest integer value in nv_bfloat16 floating-point format, with bfloat16way cases rounded to the nearest even integer value. device h2rsqrt (const nv_bfloat162 a) Calculates nv_bfloat162 vector reciprocal square root in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise reciprocal square root on vector a. Description Calculates nv_bfloat162 reciprocal square root of input vector a in round-to-nearest-even mode. device h2sin (const nv_bfloat162 a) Calculates nv_bfloat162 vector sine in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise sine on vector a. Description Calculates nv_bfloat162 sine of input vector a in round-to-nearest-even mode. NOTE: this function's implementation calls sinf( float) function and is exposed to compiler optimizations. Specifically, --use_fast_math flag changes sinf( float) into an intrinsic sinf( float), which has less accurate numeric behavior. CUDA Math API vRelease Version | 241 Modules device h2sqrt (const nv_bfloat162 a) Calculates nv_bfloat162 vector square root in round-to-nearest-even mode. Parameters a - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The elementwise square root on vector a. Description Calculates nv_bfloat162 square root of input vector a in round-to-nearest-even mode. device h2trunc (const nv_bfloat162 h) Truncate nv_bfloat162 vector input argument to the integral part. Parameters h - nv_bfloat162. Is only being read. Returns nv_bfloat162 ‣ The truncated h. Description Round each component of vector h to the nearest integer value that does not exceed h in magnitude. 1.4. Mathematical Functions CUDA mathematical functions are always available in device code. Host implementations of the common mathematical functions are mapped in a platform- specific way to standard math library functions, provided by the host compiler and respective host libm where available. Some functions, not available with the host compilers, are implemented in crt/math_functions.hpp header file. For example, see erfinv(). Other, less common functions, like rhypot(), cyl_bessel_i0() are only available in device code. CUDA Math API vRelease Version | 242 Modules Note that many floating-point and integer functions names are overloaded for different argument types. For example, the log() function has the following prototypes: f double log(double x); float log(float x); float logf(float x); Note also that due to implementation constraints, certain math functions from std:: namespace may be callable in device code even via explicitly qualified std:: names. However, such use is discouraged, since this capability is unsupported, unverified, undocumented, not portable, and may change without notice. 1.5. Single Precision Mathematical Functions This section describes single precision mathematical functions. To use these functions you do not need to include any additional header files in your program. device float acosf (float x) Calculate the arc cosine of the input argument. Returns Result will be in radians, in the interval [0, ] for x inside [-1, +1]. ‣ acosf(1) returns +0. ‣ acosf(x) returns NaN for x outside [-1, +1]. Description Calculate the principal value of the arc cosine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float acoshf (float x) Calculate the nonnegative inverse hyperbolic cosine of the input argument. Returns Result will be in the interval [0, ]. CUDA Math API vRelease Version | 243 Modules ‣ acoshf(1) returns 0. ‣ acoshf(x) returns NaN for x in the interval [ , 1). ‣ acoshf( ) returns . Description Calculate the nonnegative inverse hyperbolic cosine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float asinf (float x) Calculate the arc sine of the input argument. Returns Result will be in radians, in the interval [- , + ] for x inside [-1, +1]. ‣ asinf( ) returns . ‣ asinf(x) returns NaN for x outside [-1, +1]. Description Calculate the principal value of the arc sine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float asinhf (float x) Calculate the inverse hyperbolic sine of the input argument. Returns ‣ asinhf( ) returns . ‣ asinhf( ) returns . Description Calculate the inverse hyperbolic sine of the input argument x. CUDA Math API vRelease Version | 244 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float atan2f (float y, float x) Calculate the arc tangent of the ratio of first and second input arguments. Returns Result will be in radians, in the interval [- , + ]. ‣ atan2f( , -0) returns . ‣ atan2f( , +0) returns . ‣ atan2f( , x) returns for x < 0. ‣ atan2f( , x) returns for x > 0. ‣ atan2f(y, ) returns /2 for y < 0. ‣ atan2f(y, ) returns /2 for y > 0. ‣ atan2f( , ) returns for finite y > 0. ‣ atan2f( , ) returns for finite y > 0. ‣ atan2f( , x) returns /2 for finite x. ‣ atan2f( , ) returns /4. ‣ atan2f( , ) returns /4. Description Calculate the principal value of the arc tangent of the ratio of first and second input arguments y / x. The quadrant of the result is determined by the signs of inputs y and x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 245 Modules device float atanf (float x) Calculate the arc tangent of the input argument. Returns Result will be in radians, in the interval [- , + ]. ‣ atanf( ) returns . ‣ atanf( ) returns /2. Description Calculate the principal value of the arc tangent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float atanhf (float x) Calculate the inverse hyperbolic tangent of the input argument. Returns ‣ atanhf( ) returns . ‣ atanhf( ) returns . ‣ atanhf(x) returns NaN for x outside interval [-1, 1]. Description Calculate the inverse hyperbolic tangent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 246 Modules device float cbrtf (float x) Calculate the cube root of the input argument. Returns Returns . ‣ cbrtf( ) returns . ‣ cbrtf( ) returns . Description Calculate the cube root of x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float ceilf (float x) Calculate ceiling of the input argument. Returns Returns expressed as a floating-point number. ‣ ceilf( ) returns . ‣ ceilf( ) returns . Description Compute the smallest integer value not less than x. device float copysignf (float x, float y) Create value with given magnitude, copying sign of second value. Returns Returns a value with the magnitude of x and the sign of y. Description Create a floating-point value with the magnitude x and the sign of y. CUDA Math API vRelease Version | 247 Modules device float cosf (float x) Calculate the cosine of the input argument. Returns ‣ cosf( ) returns 1. ‣ cosf( ) returns NaN. Description Calculate the cosine of the input argument x (measured in radians). Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. device float coshf (float x) Calculate the hyperbolic cosine of the input argument. Returns ‣ coshf( ) returns 1. ‣ coshf( ) returns . Description Calculate the hyperbolic cosine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 248 Modules device float cospif (float x) Calculate the cosine of the input argument . Returns ‣ cospif( ) returns 1. ‣ cospif( ) returns NaN. Description Calculate the cosine of x (measured in radians), where x is the input argument. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float cyl_bessel_i0f (float x) Calculate the value of the regular modified cylindrical Bessel function of order 0 for the input argument. Returns Returns the value of the regular modified cylindrical Bessel function of order 0. Description Calculate the value of the regular modified cylindrical Bessel function of order 0 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float cyl_bessel_i1f (float x) Calculate the value of the regular modified cylindrical Bessel function of order 1 for the input argument. Returns Returns the value of the regular modified cylindrical Bessel function of order 1. CUDA Math API vRelease Version | 249 Modules Description Calculate the value of the regular modified cylindrical Bessel function of order 1 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float erfcf (float x) Calculate the complementary error function of the input argument. Returns ‣ erfcf( ) returns 2. ‣ erfcf( ) returns +0. Description Calculate the complementary error function of the input argument x, 1 - erf(x). Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float erfcinvf (float x) Calculate the inverse complementary error function of the input argument. Returns ‣ erfcinvf( ) returns . ‣ erfcinvf(2) returns . ‣ erfcinvf(x) returns NaN for x outside [0, 2]. Description Calculate the inverse complementary error function (x), of the input argument x in the interval [0, 2]. CUDA Math API vRelease Version | 250 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float erfcxf (float x) Calculate the scaled complementary error function of the input argument. Returns ‣ erfcxf( ) returns . ‣ erfcxf( ) returns +0. Description Calculate the scaled complementary error function of the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float erff (float x) Calculate the error function of the input argument. Returns ‣ erff( ) returns . ‣ erff( ) returns . Description Calculate the value of the error function for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 251 Modules device float erfinvf (float x) Calculate the inverse error function of the input argument. Returns ‣ erfinvf( ) returns . ‣ erfinvf(1) returns . ‣ erfinvf(-1) returns . ‣ erfinvf(x) returns NaN for x outside [-1, +1]. Description Calculate the inverse error function (x), of the input argument x in the interval [-1, 1]. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float exp10f (float x) Calculate the base 10 exponential of the input argument. Returns ‣ exp10f( ) returns 1. ‣ exp10f( ) returns +0. ‣ exp10f( ) returns . Description Calculate , the base 10 exponential of the input argument x. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. CUDA Math API vRelease Version | 252 Modules device float exp2f (float x) Calculate the base 2 exponential of the input argument. Returns ‣ exp2f( ) returns 1. ‣ exp2f( ) returns +0. ‣ exp2f( ) returns . Description Calculate , the base 2 exponential of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float expf (float x) Calculate the base exponential of the input argument. Returns ‣ expf( ) returns 1. ‣ expf( ) returns +0. ‣ expf( ) returns . Description Calculate , the base exponential of the input argument x. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. CUDA Math API vRelease Version | 253 Modules device float expm1f (float x) Calculate the base exponential of the input argument, minus 1. Returns ‣ expm1f( ) returns . ‣ expm1f( ) returns -1. ‣ expm1f( ) returns . Description Calculate -1, the base exponential of the input argument x, minus 1. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fabsf (float x) Calculate the absolute value of its argument. Returns Returns the absolute value of its argument. ‣ fabsf( ) returns . ‣ fabsf( ) returns +0. ‣ fabsf(NaN) returns an unspecified NaN. Description Calculate the absolute value of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 254 Modules device float fdimf (float x, float y) Compute the positive difference between x and y. Returns Returns the positive difference between x and y. ‣ fdimf(x, y) returns x - y if x > y. ‣ fdimf(x, y) returns +0 if x y. Description Compute the positive difference between x and y. The positive difference is x - y when x > y and +0 otherwise. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fdividef (float x, float y) Divide two floating-point values. Returns Returns x / y. Description Compute x divided by y. If --use_fast_math is specified, use fdividef() for higher performance, otherwise use normal division. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. CUDA Math API vRelease Version | 255 Modules device float floorf (float x) Calculate the largest integer less than or equal to x. Returns Returns expressed as a floating-point number. ‣ floorf( ) returns . ‣ floorf( ) returns . Description Calculate the largest integer value which is less than or equal to x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fmaf (float x, float y, float z) Compute as a single operation. Returns Returns the rounded value of as a single operation. ‣ fmaf( , , z) returns NaN. ‣ fmaf( , , z) returns NaN. ‣ fmaf(x, y, ) returns NaN if is an exact . ‣ fmaf(x, y, ) returns NaN if is an exact . Description Compute the value of as a single ternary operation. After computing the value to infinite precision, the value is rounded once. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 256 Modules device float fmaxf (float x, float y) Determine the maximum numeric value of the arguments. Returns Returns the maximum numeric values of the arguments x and y. ‣ If both arguments are NaN, returns NaN. ‣ If one argument is NaN, returns the numeric argument. Description Determines the maximum numeric value of the arguments x and y. Treats NaN arguments as missing data. If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fminf (float x, float y) Determine the minimum numeric value of the arguments. Returns Returns the minimum numeric value of the arguments x and y. ‣ If both arguments are NaN, returns NaN. ‣ If one argument is NaN, returns the numeric argument. Description Determines the minimum numeric value of the arguments x and y. Treats NaN arguments as missing data. If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 257 Modules device float fmodf (float x, float y) Calculate the floating-point remainder of x / y. Returns ‣ Returns the floating-point remainder of x / y. ‣ fmodf( , y) returns if y is not zero. ‣ fmodf(x, ) returns x if x is finite. ‣ fmodf(x, y) returns NaN if x is or y is zero. ‣ If either argument is NaN, NaN is returned. Description Calculate the floating-point remainder of x / y. The floating-point remainder of the division operation x / y calculated by this function is exactly the value x - n*y, where n is x / y with its fractional part truncated. The computed value will have the same sign as x, and its magnitude will be less than the magnitude of y. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float frexpf (float x, int *nptr) Extract mantissa and exponent of a floating-point value. Returns Returns the fractional component m. ‣ frexpf( , nptr) returns and stores zero in the location pointed to by nptr. ‣ frexpf( , nptr) returns and stores an unspecified value in the location to which nptr points. ‣ frexpf(NaN, y) returns a NaN and stores an unspecified value in the location to which nptr points. Description Decomposes the floating-point value x into a component m for the normalized fraction element and another term n for the exponent. The absolute value of m will be greater than or equal to CUDA Math API vRelease Version | 258 Modules 0.5 and less than 1.0 or it will be equal to 0; . The integer exponent n will be stored in the location to which nptr points. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float hypotf (float x, float y) Calculate the square root of the sum of squares of two arguments. Returns Returns the length of the hypotenuse . ‣ hypotf(x,y), hypotf(y,x), and hypotf(x, -y) are equivalent. ‣ hypotf(x, ) is equivalent to fabsf(x). ‣ hypotf( ,y) returns , even if y is a NaN. Description Calculates the length of the hypotenuse of a right triangle whose two sides have lengths x and y without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device int ilogbf (float x) Compute the unbiased integer exponent of the argument. Returns ‣ If successful, returns the unbiased exponent of the argument. ‣ ilogbf( ) returns INT_MIN. ‣ ilogbf(NaN) returns INT_MIN. ‣ ilogbf( ) returns INT_MAX. ‣ Note: above behavior does not take into account FP_ILOGB0 nor FP_ILOGBNAN. CUDA Math API vRelease Version | 259 Modules Description Calculates the unbiased integer exponent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device RETURN_TYPE isfinite (float a) Determine whether argument is finite. Returns ‣ With Visual Studio 2013 host compiler: RETURN_TYPE is 'bool'. Returns true if and only if a is a finite value. ‣ With other host compilers: RETURN_TYPE is 'int'. Returns a nonzero value if and only if a is a finite value. Description Determine whether the floating-point value a is a finite value (zero, subnormal, or normal and not infinity or NaN). device RETURN_TYPE isinf (float a) Determine whether argument is infinite. Returns ‣ With Visual Studio 2013 host compiler: RETURN_TYPE is 'bool'. Returns true if and only if a is an infinite value. ‣ With other host compilers: RETURN_TYPE is 'int'. Returns a nonzero value if and only if a is an infinite value. Description Determine whether the floating-point value a is an infinite value (positive or negative). CUDA Math API vRelease Version | 260 Modules device RETURN_TYPE isnan (float a) Determine whether argument is a NaN. Returns ‣ With Visual Studio 2013 host compiler: RETURN_TYPE is 'bool'. Returns true if and only if a is a NaN value. ‣ With other host compilers: RETURN_TYPE is 'int'. Returns a nonzero value if and only if a is a NaN value. Description Determine whether the floating-point value a is a NaN. device float j0f (float x) Calculate the value of the Bessel function of the first kind of order 0 for the input argument. Returns Returns the value of the Bessel function of the first kind of order 0. ‣ j0f( ) returns +0. ‣ j0f(NaN) returns NaN. Description Calculate the value of the Bessel function of the first kind of order 0 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float j1f (float x) Calculate the value of the Bessel function of the first kind of order 1 for the input argument. Returns Returns the value of the Bessel function of the first kind of order 1. ‣ j1f( ) returns . ‣ j1f( ) returns . CUDA Math API vRelease Version | 261 Modules ‣ j1f(NaN) returns NaN. Description Calculate the value of the Bessel function of the first kind of order 1 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float jnf (int n, float x) Calculate the value of the Bessel function of the first kind of order n for the input argument. Returns Returns the value of the Bessel function of the first kind of order n. ‣ jnf(n, NaN) returns NaN. ‣ jnf(n, x) returns NaN for n < 0. ‣ jnf(n, ) returns +0. Description Calculate the value of the Bessel function of the first kind of order n for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float ldexpf (float x, int exp) Calculate the value of . Returns ‣ ldexpf(x, exp) is equivalent to scalbnf(x, exp). Description Calculate the value of of the input arguments x and exp. CUDA Math API vRelease Version | 262 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float lgammaf (float x) Calculate the natural logarithm of the absolute value of the gamma function of the input argument. Returns ‣ lgammaf(1) returns +0. ‣ lgammaf(2) returns +0. ‣ lgammaf(x) returns if x 0 and x is an integer. ‣ lgammaf( ) returns . ‣ lgammaf( ) returns . Description Calculate the natural logarithm of the absolute value of the gamma function of the input argument x, namely the value of Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device long long int llrintf (float x) Round input to nearest integer value. Returns Returns rounded integer value. Description Round x to the nearest integer value, with halfway cases rounded to the nearest even integer value. If the result is outside the range of the return type, the behavior is undefined. CUDA Math API vRelease Version | 263 Modules device long long int llroundf (float x) Round to nearest integer value. Returns Returns rounded integer value. Description Round x to the nearest integer value, with halfway cases rounded away from zero. If the result is outside the range of the return type, the behavior is undefined. Note: This function may be slower than alternate rounding methods. See llrintf(). device float log10f (float x) Calculate the base 10 logarithm of the input argument. Returns ‣ log10f( ) returns . ‣ log10f(1) returns +0. ‣ log10f(x) returns NaN for x < 0. ‣ log10f( ) returns . Description Calculate the base 10 logarithm of the input argument x. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. CUDA Math API vRelease Version | 264 Modules device float log1pf (float x) Calculate the value of . Returns ‣ log1pf( ) returns . ‣ log1pf(-1) returns . ‣ log1pf(x) returns NaN for x < -1. ‣ log1pf( ) returns . Description Calculate the value of of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float log2f (float x) Calculate the base 2 logarithm of the input argument. Returns ‣ log2f( ) returns . ‣ log2f(1) returns +0. ‣ log2f(x) returns NaN for x < 0. ‣ log2f( ) returns . Description Calculate the base 2 logarithm of the input argument x. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 265 Modules ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. device float logbf (float x) Calculate the floating-point representation of the exponent of the input argument. Returns ‣ logbf( ) returns . ‣ logbf( ) returns . Description Calculate the floating-point representation of the exponent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float logf (float x) Calculate the natural logarithm of the input argument. Returns ‣ logf( ) returns . ‣ logf(1) returns +0. ‣ logf(x) returns NaN for x < 0. ‣ logf( ) returns . Description Calculate the natural logarithm of the input argument x. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 266 Modules ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. device long int lrintf (float x) Round input to nearest integer value. Returns Returns rounded integer value. Description Round x to the nearest integer value, with halfway cases rounded to the nearest even integer value. If the result is outside the range of the return type, the behavior is undefined. device long int lroundf (float x) Round to nearest integer value. Returns Returns rounded integer value. Description Round x to the nearest integer value, with halfway cases rounded away from zero. If the result is outside the range of the return type, the behavior is undefined. Note: This function may be slower than alternate rounding methods. See lrintf(). device float max (const float a, const float b) Calculate the maximum value of the input float arguments. Description Calculate the maximum value of the arguments a and b. Behavior is equivalent to fmaxf() function. Note, this is different from std:: specification CUDA Math API vRelease Version | 267 Modules device float min (const float a, const float b) Calculate the minimum value of the input float arguments. Description Calculate the minimum value of the arguments a and b. Behavior is equivalent to fminf() function. Note, this is different from std:: specification device float modff (float x, float *iptr) Break down the input argument into fractional and integral parts. Returns ‣ modff( , iptr) returns a result with the same sign as x. ‣ modff( , iptr) returns and stores in the object pointed to by iptr. ‣ modff(NaN, iptr) stores a NaN in the object pointed to by iptr and returns a NaN. Description Break down the argument x into fractional and integral parts. The integral part is stored in the argument iptr. Fractional and integral parts are given the same sign as the argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float nanf (const char *tagp) Returns "Not a Number" value. Returns ‣ nanf(tagp) returns NaN. Description Return a representation of a quiet NaN. Argument tagp selects one of the possible representations. CUDA Math API vRelease Version | 268 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float nearbyintf (float x) Round the input argument to the nearest integer. Returns ‣ nearbyintf( ) returns . ‣ nearbyintf( ) returns . Description Round argument x to an integer value in single precision floating-point format. Uses round to nearest rounding, with ties rounding to even. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float nextafterf (float x, float y) Return next representable single-precision floating-point value after argument x in the direction of y. Returns ‣ nextafterf(x, y) = y if x equals y. ‣ nextafterf(x, y) = NaN if either x or y are NaN. Description Calculate the next representable single-precision floating-point value following x in the direction of y. For example, if y is greater than x, nextafterf() returns the smallest representable number greater than x Note: CUDA Math API vRelease Version | 269 Modules For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float norm3df (float a, float b, float c) Calculate the square root of the sum of squares of three coordinates of the argument. Returns Returns the length of the 3D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculates the length of three dimensional vector in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float norm4df (float a, float b, float c, float d) Calculate the square root of the sum of squares of four coordinates of the argument. Returns Returns the length of the 4D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculates the length of four dimensional vector in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 270 Modules device float normcdff (float x) Calculate the standard normal cumulative distribution function. Returns ‣ normcdff( ) returns 1. ‣ normcdff( ) returns +0 Description Calculate the cumulative distribution function of the standard normal distribution for input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float normcdfinvf (float x) Calculate the inverse of the standard normal cumulative distribution function. Returns ‣ normcdfinvf( ) returns . ‣ normcdfinvf(1) returns . ‣ normcdfinvf(x) returns NaN if x is not in the interval [0,1]. Description Calculate the inverse of the standard normal cumulative distribution function for input argument x, . The function is defined for input values in the interval . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 271 Modules device float normf (int dim, const float *p) Calculate the square root of the sum of squares of any number of coordinates. Returns Returns the length of the dim-D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculates the length of a vector p, dimension of which is passed as an argument without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float powf (float x, float y) Calculate the value of first argument to the power of second argument. Returns ‣ powf( , y) returns for y an odd integer less than 0. ‣ powf( , y) returns for y less than 0 and not an odd integer. ‣ powf( , y) returns for y an odd integer greater than 0. ‣ powf( , y) returns +0 for y > 0 and not an odd integer. ‣ powf(-1, ) returns 1. ‣ powf(+1, y) returns 1 for any y, even a NaN. ‣ powf(x, ) returns 1 for any x, even a NaN. ‣ powf(x, y) returns a NaN for finite x < 0 and finite non-integer y. ‣ powf(x, ) returns for . ‣ powf(x, ) returns +0 for . ‣ powf(x, ) returns +0 for . ‣ powf(x, ) returns for . ‣ powf( , y) returns -0 for y an odd integer less than 0. CUDA Math API vRelease Version | 272 Modules ‣ powf( , y) returns +0 for y < 0 and not an odd integer. ‣ powf( , y) returns for y an odd integer greater than 0. ‣ powf( , y) returns for y > 0 and not an odd integer. ‣ powf( , y) returns +0 for y < 0. ‣ powf( , y) returns for y > 0. Description Calculate the value of x to the power of y. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. device float rcbrtf (float x) Calculate reciprocal cube root function. Returns ‣ rcbrt( ) returns . ‣ rcbrt( ) returns . Description Calculate reciprocal cube root function of x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 273 Modules device float remainderf (float x, float y) Compute single-precision floating-point remainder. Returns ‣ remainderf(x, ) returns NaN. ‣ remainderf( , y) returns NaN. ‣ remainderf(x, ) returns x for finite x. Description Compute single-precision floating-point remainder r of dividing x by y for nonzero y. Thus . The value n is the integer value nearest . In the case when , the even n value is chosen. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float remquof (float x, float y, int *quo) Compute single-precision floating-point remainder and part of quotient. Returns Returns the remainder. ‣ remquof(x, , quo) returns NaN and stores an unspecified value in the location to which quo points. ‣ remquof( , y, quo) returns NaN and stores an unspecified value in the location to which quo points. ‣ remquof(x, y, quo) returns NaN and stores an unspecified value in the location to which quo points if either of x or y is NaN. ‣ remquof(x, , quo) returns x and stores zero in the location to which quo points for finite x. Description Compute a single-precision floating-point remainder in the same way as the remainderf() function. Argument quo returns part of quotient upon division of x by y. Value quo has the CUDA Math API vRelease Version | 274 Modules same sign as and may not be the exact quotient but agrees with the exact quotient in the low order 3 bits. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float rhypotf (float x, float y) Calculate one over the square root of the sum of squares of two arguments. Returns Returns one over the length of the hypotenuse . ‣ rhypotf(x,y), rhypotf(y,x), and rhypotf(x, -y) are equivalent. ‣ rhypotf( ,y) returns +0, even if y is a NaN. Description Calculates one over the length of the hypotenuse of a right triangle whose two sides have lengths x and y without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float rintf (float x) Round input to nearest integer value in floating-point. Returns Returns rounded integer value. ‣ rintf( ) returns . ‣ rintf( ) returns . Description Round x to the nearest integer value in floating-point format, with halfway cases rounded to the nearest even integer value. CUDA Math API vRelease Version | 275 Modules device float rnorm3df (float a, float b, float c) Calculate one over the square root of the sum of squares of three coordinates. Returns Returns one over the length of the 3D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculates one over the length of three dimension vector in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float rnorm4df (float a, float b, float c, float d) Calculate one over the square root of the sum of squares of four coordinates. Returns Returns one over the length of the 3D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculates one over the length of four dimension vector in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 276 Modules device float rnormf (int dim, const float *p) Calculate the reciprocal of square root of the sum of squares of any number of coordinates. Returns Returns one over the length of the vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculates one over the length of vector p, dimension of which is passed as an argument, in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float roundf (float x) Round to nearest integer value in floating-point. Returns Returns rounded integer value. ‣ roundf( ) returns . ‣ roundf( ) returns . Description Round x to the nearest integer value in floating-point format, with halfway cases rounded away from zero. Note: This function may be slower than alternate rounding methods. See rintf(). CUDA Math API vRelease Version | 277 Modules device float rsqrtf (float x) Calculate the reciprocal of the square root of the input argument. Returns Returns . ‣ rsqrtf( ) returns +0. ‣ rsqrtf( ) returns . ‣ rsqrtf(x) returns NaN if x is less than 0. Description Calculate the reciprocal of the nonnegative square root of x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float scalblnf (float x, long int n) Scale floating-point input by integer power of two. Returns Returns x * . ‣ scalblnf( , n) returns . ‣ scalblnf(x, 0) returns x. ‣ scalblnf( , n) returns . Description Scale x by by efficient manipulation of the floating-point exponent. device float scalbnf (float x, int n) Scale floating-point input by integer power of two. Returns Returns x * . CUDA Math API vRelease Version | 278 Modules ‣ scalbnf( , n) returns . ‣ scalbnf(x, 0) returns x. ‣ scalbnf( , n) returns . Description Scale x by by efficient manipulation of the floating-point exponent. device RETURN_TYPE signbit (float a) Return the sign bit of the input. Returns Reports the sign bit of all values including infinities, zeros, and NaNs. ‣ With Visual Studio 2013 host compiler: RETURN_TYPE is 'bool'. Returns true if and only if a is negative. ‣ With other host compilers: RETURN_TYPE is 'int'. Returns a nonzero value if and only if a is negative. Description Determine whether the floating-point value a is negative. device void sincosf (float x, float *sptr, float *cptr) Calculate the sine and cosine of the first input argument. Returns ‣ none Description Calculate the sine and cosine of the first input argument x (measured in radians). The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, cptr. See also: sinf() and cosf(). Note: CUDA Math API vRelease Version | 279 Modules ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. device void sincospif (float x, float *sptr, float *cptr) Calculate the sine and cosine of the first input argument . Returns ‣ none Description Calculate the sine and cosine of the first input argument, x (measured in radians), . The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, cptr. See also: sinpif() and cospif(). Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float sinf (float x) Calculate the sine of the input argument. Returns ‣ sinf( ) returns . ‣ sinf( ) returns NaN. Description Calculate the sine of the input argument x (measured in radians). CUDA Math API vRelease Version | 280 Modules Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. device float sinhf (float x) Calculate the hyperbolic sine of the input argument. Returns ‣ sinhf( ) returns . ‣ sinhf( ) returns . Description Calculate the hyperbolic sine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float sinpif (float x) Calculate the sine of the input argument . Returns ‣ sinpif( ) returns . ‣ sinpif( ) returns NaN. Description Calculate the sine of x (measured in radians), where x is the input argument. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 281 Modules device float sqrtf (float x) Calculate the square root of the input argument. Returns Returns . ‣ sqrtf( ) returns . ‣ sqrtf( ) returns . ‣ sqrtf(x) returns NaN if x is less than 0. Description Calculate the nonnegative square root of x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float tanf (float x) Calculate the tangent of the input argument. Returns ‣ tanf( ) returns . ‣ tanf( ) returns NaN. Description Calculate the tangent of the input argument x (measured in radians). Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This function is affected by the --use_fast_math compiler flag. See the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section for a complete list of functions affected. CUDA Math API vRelease Version | 282 Modules device float tanhf (float x) Calculate the hyperbolic tangent of the input argument. Returns ‣ tanhf( ) returns . ‣ tanhf( ) returns . Description Calculate the hyperbolic tangent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float tgammaf (float x) Calculate the gamma function of the input argument. Returns ‣ tgammaf( ) returns . ‣ tgammaf(2) returns +1. ‣ tgammaf(x) returns NaN if x < 0 and x is an integer. ‣ tgammaf( ) returns NaN. ‣ tgammaf( ) returns . Description Calculate the gamma function of the input argument x, namely the value of . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 283 Modules device float truncf (float x) Truncate input argument to the integral part. Returns Returns truncated integer value. ‣ truncf( ) returns . ‣ truncf( ) returns . Description Round x to the nearest integer value that does not exceed x in magnitude. device float y0f (float x) Calculate the value of the Bessel function of the second kind of order 0 for the input argument. Returns Returns the value of the Bessel function of the second kind of order 0. ‣ y0f( ) returns . ‣ y0f(x) returns NaN for x < 0. ‣ y0f( ) returns +0. ‣ y0f(NaN) returns NaN. Description Calculate the value of the Bessel function of the second kind of order 0 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float y1f (float x) Calculate the value of the Bessel function of the second kind of order 1 for the input argument. Returns Returns the value of the Bessel function of the second kind of order 1. CUDA Math API vRelease Version | 284 Modules ‣ y1f( ) returns . ‣ y1f(x) returns NaN for x < 0. ‣ y1f( ) returns +0. ‣ y1f(NaN) returns NaN. Description Calculate the value of the Bessel function of the second kind of order 1 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float ynf (int n, float x) Calculate the value of the Bessel function of the second kind of order n for the input argument. Returns Returns the value of the Bessel function of the second kind of order n. ‣ ynf(n, x) returns NaN for n < 0. ‣ ynf(n, ) returns . ‣ ynf(n, x) returns NaN for x < 0. ‣ ynf(n, ) returns +0. ‣ ynf(n, NaN) returns NaN. Description Calculate the value of the Bessel function of the second kind of order n for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 285 Modules 1.6. Double Precision Mathematical Functions This section describes double precision mathematical functions. To use these functions you do not need to include any additional header files in your program. device double acos (double x) Calculate the arc cosine of the input argument. Returns Result will be in radians, in the interval [0, ] for x inside [-1, +1]. ‣ acos(1) returns +0. ‣ acos(x) returns NaN for x outside [-1, +1]. Description Calculate the principal value of the arc cosine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double acosh (double x) Calculate the nonnegative inverse hyperbolic cosine of the input argument. Returns Result will be in the interval [0, ]. ‣ acosh(1) returns 0. ‣ acosh(x) returns NaN for x in the interval [ , 1). ‣ acosh( ) returns . Description Calculate the nonnegative inverse hyperbolic cosine of the input argument x. CUDA Math API vRelease Version | 286 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double asin (double x) Calculate the arc sine of the input argument. Returns Result will be in radians, in the interval [- /2, + /2] for x inside [-1, +1]. ‣ asin( ) returns . ‣ asin(x) returns NaN for x outside [-1, +1]. Description Calculate the principal value of the arc sine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double asinh (double x) Calculate the inverse hyperbolic sine of the input argument. Returns ‣ asinh( ) returns . ‣ asinh( ) returns . Description Calculate the inverse hyperbolic sine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 287 Modules device double atan (double x) Calculate the arc tangent of the input argument. Returns Result will be in radians, in the interval [- /2, + /2]. ‣ atan( ) returns . ‣ atan( ) returns /2. Description Calculate the principal value of the arc tangent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double atan2 (double y, double x) Calculate the arc tangent of the ratio of first and second input arguments. Returns Result will be in radians, in the interval [- , + ]. ‣ atan2( , -0) returns . ‣ atan2( , +0) returns . ‣ atan2( , x) returns for x < 0. ‣ atan2( , x) returns for x > 0. ‣ atan2(y, ) returns /2 for y < 0. ‣ atan2(y, ) returns /2 for y > 0. ‣ atan2( , ) returns for finite y > 0. ‣ atan2( , ) returns for finite y > 0. ‣ atan2( , x) returns /2 for finite x. ‣ atan2( , ) returns /4. ‣ atan2( , ) returns /4. CUDA Math API vRelease Version | 288 Modules Description Calculate the principal value of the arc tangent of the ratio of first and second input arguments y / x. The quadrant of the result is determined by the signs of inputs y and x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double atanh (double x) Calculate the inverse hyperbolic tangent of the input argument. Returns ‣ atanh( ) returns . ‣ atanh( ) returns . ‣ atanh(x) returns NaN for x outside interval [-1, 1]. Description Calculate the inverse hyperbolic tangent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double cbrt (double x) Calculate the cube root of the input argument. Returns Returns . ‣ cbrt( ) returns . ‣ cbrt( ) returns . Description Calculate the cube root of x, . CUDA Math API vRelease Version | 289 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double ceil (double x) Calculate ceiling of the input argument. Returns Returns expressed as a floating-point number. ‣ ceil( ) returns . ‣ ceil( ) returns . Description Compute the smallest integer value not less than x. device double copysign (double x, double y) Create value with given magnitude, copying sign of second value. Returns Returns a value with the magnitude of x and the sign of y. Description Create a floating-point value with the magnitude x and the sign of y. device double cos (double x) Calculate the cosine of the input argument. Returns ‣ cos( ) returns 1. ‣ cos( ) returns NaN. Description Calculate the cosine of the input argument x (measured in radians). CUDA Math API vRelease Version | 290 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double cosh (double x) Calculate the hyperbolic cosine of the input argument. Returns ‣ cosh( ) returns 1. ‣ cosh( ) returns . Description Calculate the hyperbolic cosine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double cospi (double x) Calculate the cosine of the input argument . Returns ‣ cospi( ) returns 1. ‣ cospi( ) returns NaN. Description Calculate the cosine of x (measured in radians), where x is the input argument. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 291 Modules device double cyl_bessel_i0 (double x) Calculate the value of the regular modified cylindrical Bessel function of order 0 for the input argument. Returns Returns the value of the regular modified cylindrical Bessel function of order 0. Description Calculate the value of the regular modified cylindrical Bessel function of order 0 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double cyl_bessel_i1 (double x) Calculate the value of the regular modified cylindrical Bessel function of order 1 for the input argument. Returns Returns the value of the regular modified cylindrical Bessel function of order 1. Description Calculate the value of the regular modified cylindrical Bessel function of order 1 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double erf (double x) Calculate the error function of the input argument. Returns ‣ erf( ) returns . ‣ erf( ) returns . CUDA Math API vRelease Version | 292 Modules Description Calculate the value of the error function for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double erfc (double x) Calculate the complementary error function of the input argument. Returns ‣ erfc( ) returns 2. ‣ erfc( ) returns +0. Description Calculate the complementary error function of the input argument x, 1 - erf(x). Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double erfcinv (double x) Calculate the inverse complementary error function of the input argument. Returns ‣ erfcinv( ) returns . ‣ erfcinv(2) returns . ‣ erfcinv(x) returns NaN for x outside [0, 2]. Description Calculate the inverse complementary error function (x), of the input argument x in the interval [0, 2]. CUDA Math API vRelease Version | 293 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double erfcx (double x) Calculate the scaled complementary error function of the input argument. Returns ‣ erfcx( ) returns . ‣ erfcx( ) returns +0. Description Calculate the scaled complementary error function of the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double erfinv (double x) Calculate the inverse error function of the input argument. Returns ‣ erfinv( ) returns . ‣ erfinv(1) returns . ‣ erfinv(-1) returns . ‣ erfinv(x) returns NaN for x outside [-1, +1]. Description Calculate the inverse error function (x), of the input argument x in the interval [-1, 1]. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 294 Modules device double exp (double x) Calculate the base exponential of the input argument. Returns ‣ exp( ) returns 1. ‣ exp( ) returns +0. ‣ exp( ) returns . Description Calculate , the base exponential of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double exp10 (double x) Calculate the base 10 exponential of the input argument. Returns ‣ exp10( ) returns 1. ‣ exp10( ) returns +0. ‣ exp10( ) returns . Description Calculate , the base 10 exponential of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 295 Modules device double exp2 (double x) Calculate the base 2 exponential of the input argument. Returns ‣ exp2( ) returns 1. ‣ exp2( ) returns +0. ‣ exp2( ) returns . Description Calculate , the base 2 exponential of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double expm1 (double x) Calculate the base exponential of the input argument, minus 1. Returns ‣ expm1( ) returns . ‣ expm1( ) returns -1. ‣ expm1( ) returns . Description Calculate -1, the base exponential of the input argument x, minus 1. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 296 Modules device double fabs (double x) Calculate the absolute value of the input argument. Returns Returns the absolute value of the input argument. ‣ fabs( ) returns . ‣ fabs( ) returns +0. Description Calculate the absolute value of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double fdim (double x, double y) Compute the positive difference between x and y. Returns Returns the positive difference between x and y. ‣ fdim(x, y) returns x - y if x > y. ‣ fdim(x, y) returns +0 if x y. Description Compute the positive difference between x and y. The positive difference is x - y when x > y and +0 otherwise. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 297 Modules device double floor (double x) Calculate the largest integer less than or equal to x. Returns Returns expressed as a floating-point number. ‣ floor( ) returns . ‣ floor( ) returns . Description Calculates the largest integer value which is less than or equal to x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double fma (double x, double y, double z) Compute as a single operation. Returns Returns the rounded value of as a single operation. ‣ fma( , , z) returns NaN. ‣ fma( , , z) returns NaN. ‣ fma(x, y, ) returns NaN if is an exact . ‣ fma(x, y, ) returns NaN if is an exact . Description Compute the value of as a single ternary operation. After computing the value to infinite precision, the value is rounded once. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 298 Modules device double fmax (double, double) Determine the maximum numeric value of the arguments. Returns Returns the maximum numeric values of the arguments x and y. ‣ If both arguments are NaN, returns NaN. ‣ If one argument is NaN, returns the numeric argument. Description Determines the maximum numeric value of the arguments x and y. Treats NaN arguments as missing data. If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double fmin (double x, double y) Determine the minimum numeric value of the arguments. Returns Returns the minimum numeric value of the arguments x and y. ‣ If both arguments are NaN, returns NaN. ‣ If one argument is NaN, returns the numeric argument. Description Determines the minimum numeric value of the arguments x and y. Treats NaN arguments as missing data. If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 299 Modules device double fmod (double x, double y) Calculate the double-precision floating-point remainder of x / y. Returns ‣ Returns the floating-point remainder of x / y. ‣ fmod( , y) returns if y is not zero. ‣ fmod(x, ) returns x if x is finite. ‣ fmod(x, y) returns NaN if x is or y is zero. ‣ If either argument is NaN, NaN is returned. Description Calculate the double-precision floating-point remainder of x / y. The floating-point remainder of the division operation x / y calculated by this function is exactly the value x - n*y, where n is x / y with its fractional part truncated. The computed value will have the same sign as x, and its magnitude will be less than the magnitude of y. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double frexp (double x, int *nptr) Extract mantissa and exponent of a floating-point value. Returns Returns the fractional component m. ‣ frexp( , nptr) returns and stores zero in the location pointed to by nptr. ‣ frexp( , nptr) returns and stores an unspecified value in the location to which nptr points. ‣ frexp(NaN, y) returns a NaN and stores an unspecified value in the location to which nptr points. Description Decompose the floating-point value x into a component m for the normalized fraction element and another term n for the exponent. The absolute value of m will be greater than or equal to CUDA Math API vRelease Version | 300 Modules 0.5 and less than 1.0 or it will be equal to 0; . The integer exponent n will be stored in the location to which nptr points. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double hypot (double x, double y) Calculate the square root of the sum of squares of two arguments. Returns Returns the length of the hypotenuse . ‣ hypot(x,y), hypot(y,x), and hypot(x, -y) are equivalent. ‣ hypot(x, ) is equivalent to fabs(x). ‣ hypot( ,y) returns , even if y is a NaN. Description Calculate the length of the hypotenuse of a right triangle whose two sides have lengths x and y without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device int ilogb (double x) Compute the unbiased integer exponent of the argument. Returns ‣ If successful, returns the unbiased exponent of the argument. ‣ ilogb( ) returns INT_MIN. ‣ ilogb(NaN) returns INT_MIN. ‣ ilogb( ) returns INT_MAX. ‣ Note: above behavior does not take into account FP_ILOGB0 nor FP_ILOGBNAN. CUDA Math API vRelease Version | 301 Modules Description Calculates the unbiased integer exponent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device RETURN_TYPE isfinite (double a) Determine whether argument is finite. Returns ‣ With Visual Studio 2013 host compiler: RETURN_TYPE is 'bool'. Returns true if and only if a is a finite value. ‣ With other host compilers: RETURN_TYPE is 'int'. Returns a nonzero value if and only if a is a finite value. Description Determine whether the floating-point value a is a finite value (zero, subnormal, or normal and not infinity or NaN). device RETURN_TYPE isinf (double a) Determine whether argument is infinite. Returns ‣ With Visual Studio 2013 host compiler: Returns true if and only if a is an infinite value. ‣ With other host compilers: Returns a nonzero value if and only if a is an infinite value. Description Determine whether the floating-point value a is an infinite value (positive or negative). CUDA Math API vRelease Version | 302 Modules device RETURN_TYPE isnan (double a) Determine whether argument is a NaN. Returns ‣ With Visual Studio 2013 host compiler: RETURN_TYPE is 'bool'. Returns true if and only if a is a NaN value. ‣ With other host compilers: RETURN_TYPE is 'int'. Returns a nonzero value if and only if a is a NaN value. Description Determine whether the floating-point value a is a NaN. device double j0 (double x) Calculate the value of the Bessel function of the first kind of order 0 for the input argument. Returns Returns the value of the Bessel function of the first kind of order 0. ‣ j0( ) returns +0. ‣ j0(NaN) returns NaN. Description Calculate the value of the Bessel function of the first kind of order 0 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double j1 (double x) Calculate the value of the Bessel function of the first kind of order 1 for the input argument. Returns Returns the value of the Bessel function of the first kind of order 1. ‣ j1( ) returns . ‣ j1( ) returns . CUDA Math API vRelease Version | 303 Modules ‣ j1(NaN) returns NaN. Description Calculate the value of the Bessel function of the first kind of order 1 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double jn (int n, double x) Calculate the value of the Bessel function of the first kind of order n for the input argument. Returns Returns the value of the Bessel function of the first kind of order n. ‣ jn(n, NaN) returns NaN. ‣ jn(n, x) returns NaN for n < 0. ‣ jn(n, ) returns +0. Description Calculate the value of the Bessel function of the first kind of order n for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double ldexp (double x, int exp) Calculate the value of . Returns ‣ ldexp(x, exp) is equivalent to scalbn(x, exp). Description Calculate the value of of the input arguments x and exp. CUDA Math API vRelease Version | 304 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double lgamma (double x) Calculate the natural logarithm of the absolute value of the gamma function of the input argument. Returns ‣ lgamma(1) returns +0. ‣ lgamma(2) returns +0. ‣ lgamma(x) returns if x 0 and x is an integer. ‣ lgamma( ) returns . ‣ lgamma( ) returns . Description Calculate the natural logarithm of the absolute value of the gamma function of the input argument x, namely the value of Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device long long int llrint (double x) Round input to nearest integer value. Returns Returns rounded integer value. Description Round x to the nearest integer value, with halfway cases rounded to the nearest even integer value. If the result is outside the range of the return type, the behavior is undefined. CUDA Math API vRelease Version | 305 Modules device long long int llround (double x) Round to nearest integer value. Returns Returns rounded integer value. Description Round x to the nearest integer value, with halfway cases rounded away from zero. If the result is outside the range of the return type, the behavior is undefined. Note: This function may be slower than alternate rounding methods. See llrint(). device double log (double x) Calculate the base logarithm of the input argument. Returns ‣ log( ) returns . ‣ log(1) returns +0. ‣ log(x) returns NaN for x < 0. ‣ log( ) returns . Description Calculate the base logarithm of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double log10 (double x) Calculate the base 10 logarithm of the input argument. Returns ‣ log10( ) returns . CUDA Math API vRelease Version | 306 Modules ‣ log10(1) returns +0. ‣ log10(x) returns NaN for x < 0. ‣ log10( ) returns . Description Calculate the base 10 logarithm of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double log1p (double x) Calculate the value of . Returns ‣ log1p( ) returns . ‣ log1p(-1) returns . ‣ log1p(x) returns NaN for x < -1. ‣ log1p( ) returns . Description Calculate the value of of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double log2 (double x) Calculate the base 2 logarithm of the input argument. Returns ‣ log2( ) returns . ‣ log2(1) returns +0. CUDA Math API vRelease Version | 307 Modules ‣ log2(x) returns NaN for x < 0. ‣ log2( ) returns . Description Calculate the base 2 logarithm of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double logb (double x) Calculate the floating-point representation of the exponent of the input argument. Returns ‣ logb( ) returns . ‣ logb( ) returns . Description Calculate the floating-point representation of the exponent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device long int lrint (double x) Round input to nearest integer value. Returns Returns rounded integer value. Description Round x to the nearest integer value, with halfway cases rounded to the nearest even integer value. If the result is outside the range of the return type, the behavior is undefined. CUDA Math API vRelease Version | 308 Modules device long int lround (double x) Round to nearest integer value. Returns Returns rounded integer value. Description Round x to the nearest integer value, with halfway cases rounded away from zero. If the result is outside the range of the return type, the behavior is undefined. Note: This function may be slower than alternate rounding methods. See lrint(). device double max (const double a, const float b) Calculate the maximum value of the input double and float arguments. Description Convert float argument b to double, followed by fmax(). Note, this is different from std:: specification device double max (const float a, const double b) Calculate the maximum value of the input float and double arguments. Description Convert float argument a to double, followed by fmax(). Note, this is different from std:: specification device double max (const double a, const double b) Calculate the maximum value of the input float arguments. Description Calculate the maximum value of the arguments a and b. Behavior is equivalent to fmax() function. Note, this is different from std:: specification CUDA Math API vRelease Version | 309 Modules device double min (const double a, const float b) Calculate the minimum value of the input double and float arguments. Description Convert float argument b to double, followed by fmin(). Note, this is different from std:: specification device double min (const float a, const double b) Calculate the minimum value of the input float and double arguments. Description Convert float argument a to double, followed by fmin(). Note, this is different from std:: specification device double min (const double a, const double b) Calculate the minimum value of the input float arguments. Description Calculate the minimum value of the arguments a and b. Behavior is equivalent to fmin() function. Note, this is different from std:: specification device double modf (double x, double *iptr) Break down the input argument into fractional and integral parts. Returns ‣ modf( , iptr) returns a result with the same sign as x. ‣ modf( , iptr) returns and stores in the object pointed to by iptr. ‣ modf(NaN, iptr) stores a NaN in the object pointed to by iptr and returns a NaN. Description Break down the argument x into fractional and integral parts. The integral part is stored in the argument iptr. Fractional and integral parts are given the same sign as the argument x. CUDA Math API vRelease Version | 310 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double nan (const char *tagp) Returns "Not a Number" value. Returns ‣ nan(tagp) returns NaN. Description Return a representation of a quiet NaN. Argument tagp selects one of the possible representations. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double nearbyint (double x) Round the input argument to the nearest integer. Returns ‣ nearbyint( ) returns . ‣ nearbyint( ) returns . Description Round argument x to an integer value in double precision floating-point format. Uses round to nearest rounding, with ties rounding to even. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 311 Modules device double nextafter (double x, double y) Return next representable double-precision floating-point value after argument x in the direction of y. Returns ‣ nextafter(x, y) = y if x equals y. ‣ nextafter(x, y) = NaN if either x or y are NaN. Description Calculate the next representable double-precision floating-point value following x in the direction of y. For example, if y is greater than x, nextafter() returns the smallest representable number greater than x Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double norm (int dim, const double *p) Calculate the square root of the sum of squares of any number of coordinates. Returns Returns the length of the dim-D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculate the length of a vector p, dimension of which is passed as an argument without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 312 Modules device double norm3d (double a, double b, double c) Calculate the square root of the sum of squares of three coordinates of the argument. Returns Returns the length of 3D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculate the length of three dimensional vector in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double norm4d (double a, double b, double c, double d) Calculate the square root of the sum of squares of four coordinates of the argument. Returns Returns the length of 4D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculate the length of four dimensional vector in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 313 Modules device double normcdf (double x) Calculate the standard normal cumulative distribution function. Returns ‣ normcdf( ) returns 1. ‣ normcdf( ) returns +0. Description Calculate the cumulative distribution function of the standard normal distribution for input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double normcdfinv (double x) Calculate the inverse of the standard normal cumulative distribution function. Returns ‣ normcdfinv( ) returns . ‣ normcdfinv(1) returns . ‣ normcdfinv(x) returns NaN if x is not in the interval [0,1]. Description Calculate the inverse of the standard normal cumulative distribution function for input argument x, . The function is defined for input values in the interval . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 314 Modules device double pow (double x, double y) Calculate the value of first argument to the power of second argument. Returns ‣ pow( , y) returns for y an odd integer less than 0. ‣ pow( , y) returns for y less than 0 and not an odd integer. ‣ pow( , y) returns for y an odd integer greater than 0. ‣ pow( , y) returns +0 for y > 0 and not an odd integer. ‣ pow(-1, ) returns 1. ‣ pow(+1, y) returns 1 for any y, even a NaN. ‣ pow(x, ) returns 1 for any x, even a NaN. ‣ pow(x, y) returns a NaN for finite x < 0 and finite non-integer y. ‣ pow(x, ) returns for . ‣ pow(x, ) returns +0 for . ‣ pow(x, ) returns +0 for . ‣ pow(x, ) returns for . ‣ pow( , y) returns -0 for y an odd integer less than 0. ‣ pow( , y) returns +0 for y < 0 and not an odd integer. ‣ pow( , y) returns for y an odd integer greater than 0. ‣ pow( , y) returns for y > 0 and not an odd integer. ‣ pow( , y) returns +0 for y < 0. ‣ pow( , y) returns for y > 0. Description Calculate the value of x to the power of y. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 315 Modules device double rcbrt (double x) Calculate reciprocal cube root function. Returns ‣ rcbrt( ) returns . ‣ rcbrt( ) returns . Description Calculate reciprocal cube root function of x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double remainder (double x, double y) Compute double-precision floating-point remainder. Returns ‣ remainder(x, ) returns NaN. ‣ remainder( , y) returns NaN. ‣ remainder(x, ) returns x for finite x. Description Compute double-precision floating-point remainder r of dividing x by y for nonzero y. Thus . The value n is the integer value nearest . In the case when , the even n value is chosen. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 316 Modules device double remquo (double x, double y, int *quo) Compute double-precision floating-point remainder and part of quotient. Returns Returns the remainder. ‣ remquo(x, , quo) returns NaN and stores an unspecified value in the location to which quo points. ‣ remquo( , y, quo) returns NaN and stores an unspecified value in the location to which quo points. ‣ remquo(x, y, quo) returns NaN and stores an unspecified value in the location to which quo points if either of x or y is NaN. ‣ remquo(x, , quo) returns x and stores zero in the location to which quo points for finite x. Description Compute a double-precision floating-point remainder in the same way as the remainder() function. Argument quo returns part of quotient upon division of x by y. Value quo has the same sign as and may not be the exact quotient but agrees with the exact quotient in the low order 3 bits. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double rhypot (double x, double y) Calculate one over the square root of the sum of squares of two arguments. Returns Returns one over the length of the hypotenuse . ‣ rhypot(x,y), rhypot(y,x), and rhypot(x, -y) are equivalent. ‣ rhypot( ,y) returns +0, even if y is a NaN. CUDA Math API vRelease Version | 317 Modules Description Calculate one over the length of the hypotenuse of a right triangle whose two sides have lengths x and y without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double rint (double x) Round to nearest integer value in floating-point. Returns Returns rounded integer value. ‣ rint( ) returns . ‣ rint( ) returns . Description Round x to the nearest integer value in floating-point format, with halfway cases rounded to the nearest even integer value. device double rnorm (int dim, const double *p) Calculate the reciprocal of square root of the sum of squares of any number of coordinates. Returns Returns one over the length of the vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculates one over the length of vector p, dimension of which is passed as an argument, in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 318 Modules device double rnorm3d (double a, double b, double c) Calculate one over the square root of the sum of squares of three coordinates. Returns Returns one over the length of the 3D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculate one over the length of three dimensional vector in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double rnorm4d (double a, double b, double c, double d) Calculate one over the square root of the sum of squares of four coordinates. Returns Returns one over the length of the 3D vector . ‣ In the presence of an exactly infinite coordinate is returned, even if there are NaNs. Description Calculate one over the length of four dimensional vector in Euclidean space without undue overflow or underflow. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 319 Modules device double round (double x) Round to nearest integer value in floating-point. Returns Returns rounded integer value. ‣ round( ) returns . ‣ round( ) returns . Description Round x to the nearest integer value in floating-point format, with halfway cases rounded away from zero. Note: This function may be slower than alternate rounding methods. See rint(). device double rsqrt (double x) Calculate the reciprocal of the square root of the input argument. Returns Returns . ‣ rsqrt( ) returns +0. ‣ rsqrt( ) returns . ‣ rsqrt(x) returns NaN if x is less than 0. Description Calculate the reciprocal of the nonnegative square root of x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 320 Modules device double scalbln (double x, long int n) Scale floating-point input by integer power of two. Returns Returns x * . ‣ scalbln( , n) returns . ‣ scalbln(x, 0) returns x. ‣ scalbln( , n) returns . Description Scale x by by efficient manipulation of the floating-point exponent. device double scalbn (double x, int n) Scale floating-point input by integer power of two. Returns Returns x * . ‣ scalbn( , n) returns . ‣ scalbn(x, 0) returns x. ‣ scalbn( , n) returns . Description Scale x by by efficient manipulation of the floating-point exponent. device RETURN_TYPE signbit (double a) Return the sign bit of the input. Returns Reports the sign bit of all values including infinities, zeros, and NaNs. ‣ With Visual Studio 2013 host compiler: RETURN_TYPE is 'bool'. Returns true if and only if a is negative. ‣ With other host compilers: RETURN_TYPE is 'int'. Returns a nonzero value if and only if a is negative. CUDA Math API vRelease Version | 321 Modules Description Determine whether the floating-point value a is negative. device double sin (double x) Calculate the sine of the input argument. Returns ‣ sin( ) returns . ‣ sin( ) returns NaN. Description Calculate the sine of the input argument x (measured in radians). Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device void sincos (double x, double *sptr, double *cptr) Calculate the sine and cosine of the first input argument. Returns ‣ none Description Calculate the sine and cosine of the first input argument x (measured in radians). The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, cptr. See also: sin() and cos(). Note: CUDA Math API vRelease Version | 322 Modules For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device void sincospi (double x, double *sptr, double *cptr) Calculate the sine and cosine of the first input argument . Returns ‣ none Description Calculate the sine and cosine of the first input argument, x (measured in radians), . The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, cptr. See also: sinpi() and cospi(). Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double sinh (double x) Calculate the hyperbolic sine of the input argument. Returns ‣ sinh( ) returns . ‣ sinh( ) returns . Description Calculate the hyperbolic sine of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 323 Modules device double sinpi (double x) Calculate the sine of the input argument . Returns ‣ sinpi( ) returns . ‣ sinpi( ) returns NaN. Description Calculate the sine of x (measured in radians), where x is the input argument. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double sqrt (double x) Calculate the square root of the input argument. Returns Returns . ‣ sqrt( ) returns . ‣ sqrt( ) returns . ‣ sqrt(x) returns NaN if x is less than 0. Description Calculate the nonnegative square root of x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 324 Modules device double tan (double x) Calculate the tangent of the input argument. Returns ‣ tan( ) returns . ‣ tan( ) returns NaN. Description Calculate the tangent of the input argument x (measured in radians). Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double tanh (double x) Calculate the hyperbolic tangent of the input argument. Returns ‣ tanh( ) returns . ‣ tanh( ) returns . Description Calculate the hyperbolic tangent of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double tgamma (double x) Calculate the gamma function of the input argument. Returns ‣ tgamma( ) returns . ‣ tgamma(2) returns +1. CUDA Math API vRelease Version | 325 Modules ‣ tgamma(x) returns NaN if x < 0 and x is an integer. ‣ tgamma( ) returns NaN. ‣ tgamma( ) returns . Description Calculate the gamma function of the input argument x, namely the value of . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double trunc (double x) Truncate input argument to the integral part. Returns Returns truncated integer value. ‣ trunc( ) returns . ‣ trunc( ) returns . Description Round x to the nearest integer value that does not exceed x in magnitude. device double y0 (double x) Calculate the value of the Bessel function of the second kind of order 0 for the input argument. Returns Returns the value of the Bessel function of the second kind of order 0. ‣ y0( ) returns . ‣ y0(x) returns NaN for x < 0. ‣ y0( ) returns +0. ‣ y0(NaN) returns NaN. CUDA Math API vRelease Version | 326 Modules Description Calculate the value of the Bessel function of the second kind of order 0 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double y1 (double x) Calculate the value of the Bessel function of the second kind of order 1 for the input argument. Returns Returns the value of the Bessel function of the second kind of order 1. ‣ y1( ) returns . ‣ y1(x) returns NaN for x < 0. ‣ y1( ) returns +0. ‣ y1(NaN) returns NaN. Description Calculate the value of the Bessel function of the second kind of order 1 for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double yn (int n, double x) Calculate the value of the Bessel function of the second kind of order n for the input argument. Returns Returns the value of the Bessel function of the second kind of order n. ‣ yn(n, x) returns NaN for n < 0. ‣ yn(n, ) returns . CUDA Math API vRelease Version | 327 Modules ‣ yn(n, x) returns NaN for x < 0. ‣ yn(n, ) returns +0. ‣ yn(n, NaN) returns NaN. Description Calculate the value of the Bessel function of the second kind of order n for the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. 1.7. Integer Mathematical Functions This section describes integer mathematical functions. To use these functions you do not need to include any additional header files in your program. device int abs (int a) Calculate the absolute value of the input int argument. Description Calculate the absolute value of the input argument a. device long int labs (long int a) Calculate the absolute value of the input long int argument. Description Calculate the absolute value of the input argument a. device long long int llabs (long long int a) Calculate the absolute value of the input long long int argument. Description Calculate the absolute value of the input argument a. CUDA Math API vRelease Version | 328 Modules device long long int llmax (const long long int a, const long long int b) Calculate the maximum value of the input long long int arguments. Description Calculate the maximum value of the arguments a and b. device long long int llmin (const long long int a, const long long int b) Calculate the minimum value of the input long long int arguments. Description Calculate the minimum value of the arguments a and b. device unsigned long long int max (const unsigned long long int a, const long long int b) Calculate the maximum value of the input unsigned long long int and long long int arguments. Description Calculate the maximum value of the arguments a and b, perform integer promotion first. device unsigned long long int max (const long long int a, const unsigned long long int b) Calculate the maximum value of the input long long int and unsigned long long int arguments. Description Calculate the maximum value of the arguments a and b, perform integer promotion first. CUDA Math API vRelease Version | 329 Modules device unsigned long long int max (const unsigned long long int a, const unsigned long long int b) Calculate the maximum value of the input unsigned long long int arguments. Description Calculate the maximum value of the arguments a and b. device long long int max (const long long int a, const long long int b) Calculate the maximum value of the input long long int arguments. Description Calculate the maximum value of the arguments a and b. device unsigned long int max (const unsigned long int a, const long int b) Calculate the maximum value of the input unsigned long int and long int arguments. Description Calculate the maximum value of the arguments a and b, perform integer promotion first. device unsigned long int max (const long int a, const unsigned long int b) Calculate the maximum value of the input long int and unsigned long int arguments. Description Calculate the maximum value of the arguments a and b, perform integer promotion first. device unsigned long int max (const unsigned long int a, const unsigned long int b) Calculate the maximum value of the input unsigned long int arguments. Description Calculate the maximum value of the arguments a and b. CUDA Math API vRelease Version | 330 Modules device long int max (const long int a, const long int b) Calculate the maximum value of the input long int arguments. Description Calculate the maximum value of the arguments a and b. device unsigned int max (const unsigned int a, const int b) Calculate the maximum value of the input unsigned int and int arguments. Description Calculate the maximum value of the arguments a and b, perform integer promotion first. device unsigned int max (const int a, const unsigned int b) Calculate the maximum value of the input int and unsigned int arguments. Description Calculate the maximum value of the arguments a and b, perform integer promotion first. device unsigned int max (const unsigned int a, const unsigned int b) Calculate the maximum value of the input unsigned int arguments. Description Calculate the maximum value of the arguments a and b. device int max (const int a, const int b) Calculate the maximum value of the input int arguments. Description Calculate the maximum value of the arguments a and b. CUDA Math API vRelease Version | 331 Modules device unsigned long long int min (const unsigned long long int a, const long long int b) Calculate the minimum value of the input unsigned long long int and long long int arguments. Description Calculate the minimum value of the arguments a and b, perform integer promotion first. device unsigned long long int min (const long long int a, const unsigned long long int b) Calculate the minimum value of the input long long int and unsigned long long int arguments. Description Calculate the minimum value of the arguments a and b, perform integer promotion first. device unsigned long long int min (const unsigned long long int a, const unsigned long long int b) Calculate the minimum value of the input unsigned long long int arguments. Description Calculate the minimum value of the arguments a and b. device long long int min (const long long int a, const long long int b) Calculate the minimum value of the input long long int arguments. Description Calculate the minimum value of the arguments a and b. CUDA Math API vRelease Version | 332 Modules device unsigned long int min (const unsigned long int a, const long int b) Calculate the minimum value of the input unsigned long int and long int arguments. Description Calculate the minimum value of the arguments a and b, perform integer promotion first. device unsigned long int min (const long int a, const unsigned long int b) Calculate the minimum value of the input long int and unsigned long int arguments. Description Calculate the minimum value of the arguments a and b, perform integer promotion first. device unsigned long int min (const unsigned long int a, const unsigned long int b) Calculate the minimum value of the input unsigned long int arguments. Description Calculate the minimum value of the arguments a and b. device long int min (const long int a, const long int b) Calculate the minimum value of the input long int arguments. Description Calculate the minimum value of the arguments a and b. device unsigned int min (const unsigned int a, const int b) Calculate the minimum value of the input unsigned int and int arguments. Description Calculate the minimum value of the arguments a and b, perform integer promotion first. CUDA Math API vRelease Version | 333 Modules device unsigned int min (const int a, const unsigned int b) Calculate the minimum value of the input int and unsigned int arguments. Description Calculate the minimum value of the arguments a and b, perform integer promotion first. device unsigned int min (const unsigned int a, const unsigned int b) Calculate the minimum value of the input unsigned int arguments. Description Calculate the minimum value of the arguments a and b. device int min (const int a, const int b) Calculate the minimum value of the input int arguments. Description Calculate the minimum value of the arguments a and b. device unsigned long long int ullmax (const unsigned long long int a, const unsigned long long int b) Calculate the maximum value of the input unsigned long long int arguments. Description Calculate the maximum value of the arguments a and b. device unsigned long long int ullmin (const unsigned long long int a, const unsigned long long int b) Calculate the minimum value of the input unsigned long long int arguments. Description Calculate the minimum value of the arguments a and b. CUDA Math API vRelease Version | 334 Modules device unsigned int umax (const unsigned int a, const unsigned int b) Calculate the maximum value of the input unsigned int arguments. Description Calculate the maximum value of the arguments a and b. device unsigned int umin (const unsigned int a, const unsigned int b) Calculate the minimum value of the input unsigned int arguments. Description Calculate the minimum value of the arguments a and b. 1.8. Single Precision Intrinsics This section describes single precision intrinsic functions that are only supported in device code. To use these functions you do not need to include any additional header files in your program. device float cosf (float x) Calculate the fast approximate cosine of the input argument. Returns Returns the approximate cosine of x. Description Calculate the fast approximate cosine of the input argument x, measured in radians. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. CUDA Math API vRelease Version | 335 Modules device float exp10f (float x) Calculate the fast approximate base 10 exponential of the input argument. Returns Returns an approximation to . Description Calculate the fast approximate base 10 exponential of the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. device float expf (float x) Calculate the fast approximate base exponential of the input argument. Returns Returns an approximation to . Description Calculate the fast approximate base exponential of the input argument x, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. device float fadd_rd (float x, float y) Add two floating-point values in round-down mode. Returns Returns x + y. Description Compute the sum of x and y in round-down (to negative infinity) mode. CUDA Math API vRelease Version | 336 Modules Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device float fadd_rn (float x, float y) Add two floating-point values in round-to-nearest-even mode. Returns Returns x + y. Description Compute the sum of x and y in round-to-nearest-even rounding mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device float fadd_ru (float x, float y) Add two floating-point values in round-up mode. Returns Returns x + y. Description Compute the sum of x and y in round-up (to positive infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. CUDA Math API vRelease Version | 337 Modules device float fadd_rz (float x, float y) Add two floating-point values in round-towards-zero mode. Returns Returns x + y. Description Compute the sum of x and y in round-towards-zero mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device float fdiv_rd (float x, float y) Divide two floating-point values in round-down mode. Returns Returns x / y. Description Divide two floating-point values x by y in round-down (to negative infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fdiv_rn (float x, float y) Divide two floating-point values in round-to-nearest-even mode. Returns Returns x / y. Description Divide two floating-point values x by y in round-to-nearest-even mode. CUDA Math API vRelease Version | 338 Modules Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fdiv_ru (float x, float y) Divide two floating-point values in round-up mode. Returns Returns x / y. Description Divide two floating-point values x by y in round-up (to positive infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fdiv_rz (float x, float y) Divide two floating-point values in round-towards-zero mode. Returns Returns x / y. Description Divide two floating-point values x by y in round-towards-zero mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fdividef (float x, float y) Calculate the fast approximate division of the input arguments. Returns Returns x / y. CUDA Math API vRelease Version | 339 Modules ‣ fdividef( , y) returns NaN for . ‣ fdividef(x, y) returns 0 for and finite . Description Calculate the fast approximate division of x by y. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. device float fmaf_ieee_rd (float x, float y, float z) Compute fused multiply-add operation in round-down mode, ignore -ftz=true compiler flag. Description Behavior is the same as fmaf_rd(x, y, z), the difference is in handling denormalized inputs and outputs: -ftz compiler flag has no effect. device float fmaf_ieee_rn (float x, float y, float z) Compute fused multiply-add operation in round-to-nearest-even mode, ignore -ftz=true compiler flag. Description Behavior is the same as fmaf_rn(x, y, z), the difference is in handling denormalized inputs and outputs: -ftz compiler flag has no effect. device float fmaf_ieee_ru (float x, float y, float z) Compute fused multiply-add operation in round-up mode, ignore -ftz=true compiler flag. Description Behavior is the same as fmaf_ru(x, y, z), the difference is in handling denormalized inputs and outputs: -ftz compiler flag has no effect. CUDA Math API vRelease Version | 340 Modules device float fmaf_ieee_rz (float x, float y, float z) Compute fused multiply-add operation in round-towards-zero mode, ignore -ftz=true compiler flag. Description Behavior is the same as fmaf_rz(x, y, z), the difference is in handling denormalized inputs and outputs: -ftz compiler flag has no effect. device float fmaf_rd (float x, float y, float z) Compute as a single operation, in round-down mode. Returns Returns the rounded value of as a single operation. ‣ fmaf( , , z) returns NaN. ‣ fmaf( , , z) returns NaN. ‣ fmaf(x, y, ) returns NaN if is an exact . ‣ fmaf(x, y, ) returns NaN if is an exact . Description Computes the value of as a single ternary operation, rounding the result once in round-down (to negative infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fmaf_rn (float x, float y, float z) Compute as a single operation, in round-to-nearest-even mode. Returns Returns the rounded value of as a single operation. ‣ fmaf( , , z) returns NaN. ‣ fmaf( , , z) returns NaN. CUDA Math API vRelease Version | 341 Modules ‣ fmaf(x, y, ) returns NaN if is an exact . ‣ fmaf(x, y, ) returns NaN if is an exact . Description Computes the value of as a single ternary operation, rounding the result once in round-to-nearest-even mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fmaf_ru (float x, float y, float z) Compute as a single operation, in round-up mode. Returns Returns the rounded value of as a single operation. ‣ fmaf( , , z) returns NaN. ‣ fmaf( , , z) returns NaN. ‣ fmaf(x, y, ) returns NaN if is an exact . ‣ fmaf(x, y, ) returns NaN if is an exact . Description Computes the value of as a single ternary operation, rounding the result once in round-up (to positive infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fmaf_rz (float x, float y, float z) Compute as a single operation, in round-towards-zero mode. Returns Returns the rounded value of as a single operation. ‣ fmaf( , , z) returns NaN. CUDA Math API vRelease Version | 342 Modules ‣ fmaf( , , z) returns NaN. ‣ fmaf(x, y, ) returns NaN if is an exact . ‣ fmaf(x, y, ) returns NaN if is an exact . Description Computes the value of as a single ternary operation, rounding the result once in round-towards-zero mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fmul_rd (float x, float y) Multiply two floating-point values in round-down mode. Returns Returns x * y. Description Compute the product of x and y in round-down (to negative infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device float fmul_rn (float x, float y) Multiply two floating-point values in round-to-nearest-even mode. Returns Returns x * y. Description Compute the product of x and y in round-to-nearest-even mode. CUDA Math API vRelease Version | 343 Modules Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device float fmul_ru (float x, float y) Multiply two floating-point values in round-up mode. Returns Returns x * y. Description Compute the product of x and y in round-up (to positive infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device float fmul_rz (float x, float y) Multiply two floating-point values in round-towards-zero mode. Returns Returns x * y. Description Compute the product of x and y in round-towards-zero mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. CUDA Math API vRelease Version | 344 Modules device float frcp_rd (float x) Compute in round-down mode. Returns Returns . Description Compute the reciprocal of x in round-down (to negative infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float frcp_rn (float x) Compute in round-to-nearest-even mode. Returns Returns . Description Compute the reciprocal of x in round-to-nearest-even mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float frcp_ru (float x) Compute in round-up mode. Returns Returns . CUDA Math API vRelease Version | 345 Modules Description Compute the reciprocal of x in round-up (to positive infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float frcp_rz (float x) Compute in round-towards-zero mode. Returns Returns . Description Compute the reciprocal of x in round-towards-zero mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float frsqrt_rn (float x) Compute in round-to-nearest-even mode. Returns Returns . Description Compute the reciprocal square root of x in round-to-nearest-even mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 346 Modules device float fsqrt_rd (float x) Compute in round-down mode. Returns Returns . Description Compute the square root of x in round-down (to negative infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fsqrt_rn (float x) Compute in round-to-nearest-even mode. Returns Returns . Description Compute the square root of x in round-to-nearest-even mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fsqrt_ru (float x) Compute in round-up mode. Returns Returns . CUDA Math API vRelease Version | 347 Modules Description Compute the square root of x in round-up (to positive infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fsqrt_rz (float x) Compute in round-towards-zero mode. Returns Returns . Description Compute the square root of x in round-towards-zero mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. device float fsub_rd (float x, float y) Subtract two floating-point values in round-down mode. Returns Returns x - y. Description Compute the difference of x and y in round-down (to negative infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. CUDA Math API vRelease Version | 348 Modules device float fsub_rn (float x, float y) Subtract two floating-point values in round-to-nearest-even mode. Returns Returns x - y. Description Compute the difference of x and y in round-to-nearest-even rounding mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device float fsub_ru (float x, float y) Subtract two floating-point values in round-up mode. Returns Returns x - y. Description Compute the difference of x and y in round-up (to positive infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device float fsub_rz (float x, float y) Subtract two floating-point values in round-towards-zero mode. Returns Returns x - y. CUDA Math API vRelease Version | 349 Modules Description Compute the difference of x and y in round-towards-zero mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Single-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device float log10f (float x) Calculate the fast approximate base 10 logarithm of the input argument. Returns Returns an approximation to . Description Calculate the fast approximate base 10 logarithm of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. device float log2f (float x) Calculate the fast approximate base 2 logarithm of the input argument. Returns Returns an approximation to . Description Calculate the fast approximate base 2 logarithm of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. CUDA Math API vRelease Version | 350 Modules device float logf (float x) Calculate the fast approximate base logarithm of the input argument. Returns Returns an approximation to . Description Calculate the fast approximate base logarithm of the input argument x. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. device float powf (float x, float y) Calculate the fast approximate of . Returns Returns an approximation to . Description Calculate the fast approximate of x, the first input argument, raised to the power of y, the second input argument, . Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. device float saturatef (float x) Clamp the input argument to [+0.0, 1.0]. Returns ‣ saturatef(x) returns 0 if x < 0. ‣ saturatef(x) returns 1 if x > 1. ‣ saturatef(x) returns x if . CUDA Math API vRelease Version | 351 Modules ‣ saturatef(NaN) returns 0. Description Clamp the input argument x to be within the interval [+0.0, 1.0]. device void sincosf (float x, float *sptr, float *cptr) Calculate the fast approximate of sine and cosine of the first input argument. Returns ‣ none Description Calculate the fast approximate of sine and cosine of the first input argument x (measured in radians). The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, cptr. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. ‣ Denorm input/output is flushed to sign preserving 0.0. device float sinf (float x) Calculate the fast approximate sine of the input argument. Returns Returns the approximate sine of x. Description Calculate the fast approximate sine of the input argument x, measured in radians. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. ‣ Output in the denormal range is flushed to sign preserving 0.0. CUDA Math API vRelease Version | 352 Modules device float tanf (float x) Calculate the fast approximate tangent of the input argument. Returns Returns the approximate tangent of x. Description Calculate the fast approximate tangent of the input argument x, measured in radians. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Intrinsic Functions section. ‣ The result is computed as the fast divide of sinf() by cosf(). Denormal output is flushed to sign-preserving 0.0. 1.9. Double Precision Intrinsics This section describes double precision intrinsic functions that are only supported in device code. To use these functions you do not need to include any additional header files in your program. device double dadd_rd (double x, double y) Add two floating-point values in round-down mode. Returns Returns x + y. Description Adds two floating-point values x and y in round-down (to negative infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. CUDA Math API vRelease Version | 353 Modules device double dadd_rn (double x, double y) Add two floating-point values in round-to-nearest-even mode. Returns Returns x + y. Description Adds two floating-point values x and y in round-to-nearest-even mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double dadd_ru (double x, double y) Add two floating-point values in round-up mode. Returns Returns x + y. Description Adds two floating-point values x and y in round-up (to positive infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double dadd_rz (double x, double y) Add two floating-point values in round-towards-zero mode. Returns Returns x + y. CUDA Math API vRelease Version | 354 Modules Description Adds two floating-point values x and y in round-towards-zero mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double ddiv_rd (double x, double y) Divide two floating-point values in round-down mode. Returns Returns x / y. Description Divides two floating-point values x by y in round-down (to negative infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. device double ddiv_rn (double x, double y) Divide two floating-point values in round-to-nearest-even mode. Returns Returns x / y. Description Divides two floating-point values x by y in round-to-nearest-even mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 355 Modules ‣ Requires compute capability >= 2.0. device double ddiv_ru (double x, double y) Divide two floating-point values in round-up mode. Returns Returns x / y. Description Divides two floating-point values x by y in round-up (to positive infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. device double ddiv_rz (double x, double y) Divide two floating-point values in round-towards-zero mode. Returns Returns x / y. Description Divides two floating-point values x by y in round-towards-zero mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. device double dmul_rd (double x, double y) Multiply two floating-point values in round-down mode. Returns Returns x * y. CUDA Math API vRelease Version | 356 Modules Description Multiplies two floating-point values x and y in round-down (to negative infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double dmul_rn (double x, double y) Multiply two floating-point values in round-to-nearest-even mode. Returns Returns x * y. Description Multiplies two floating-point values x and y in round-to-nearest-even mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double dmul_ru (double x, double y) Multiply two floating-point values in round-up mode. Returns Returns x * y. Description Multiplies two floating-point values x and y in round-up (to positive infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 357 Modules ‣ This operation will never be merged into a single multiply-add instruction. device double dmul_rz (double x, double y) Multiply two floating-point values in round-towards-zero mode. Returns Returns x * y. Description Multiplies two floating-point values x and y in round-towards-zero mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double drcp_rd (double x) Compute in round-down mode. Returns Returns . Description Compute the reciprocal of x in round-down (to negative infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. CUDA Math API vRelease Version | 358 Modules device double drcp_rn (double x) Compute in round-to-nearest-even mode. Returns Returns . Description Compute the reciprocal of x in round-to-nearest-even mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. device double drcp_ru (double x) Compute in round-up mode. Returns Returns . Description Compute the reciprocal of x in round-up (to positive infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. device double drcp_rz (double x) Compute in round-towards-zero mode. Returns Returns . CUDA Math API vRelease Version | 359 Modules Description Compute the reciprocal of x in round-towards-zero mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. device double dsqrt_rd (double x) Compute in round-down mode. Returns Returns . Description Compute the square root of x in round-down (to negative infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. device double dsqrt_rn (double x) Compute in round-to-nearest-even mode. Returns Returns . Description Compute the square root of x in round-to-nearest-even mode. Note: CUDA Math API vRelease Version | 360 Modules ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. device double dsqrt_ru (double x) Compute in round-up mode. Returns Returns . Description Compute the square root of x in round-up (to positive infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. device double dsqrt_rz (double x) Compute in round-towards-zero mode. Returns Returns . Description Compute the square root of x in round-towards-zero mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ Requires compute capability >= 2.0. CUDA Math API vRelease Version | 361 Modules device double dsub_rd (double x, double y) Subtract two floating-point values in round-down mode. Returns Returns x - y. Description Subtracts two floating-point values x and y in round-down (to negative infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double dsub_rn (double x, double y) Subtract two floating-point values in round-to-nearest-even mode. Returns Returns x - y. Description Subtracts two floating-point values x and y in round-to-nearest-even mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double dsub_ru (double x, double y) Subtract two floating-point values in round-up mode. Returns Returns x - y. CUDA Math API vRelease Version | 362 Modules Description Subtracts two floating-point values x and y in round-up (to positive infinity) mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double dsub_rz (double x, double y) Subtract two floating-point values in round-towards-zero mode. Returns Returns x - y. Description Subtracts two floating-point values x and y in round-towards-zero mode. Note: ‣ For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. ‣ This operation will never be merged into a single multiply-add instruction. device double fma_rd (double x, double y, double z) Compute as a single operation in round-down mode. Returns Returns the rounded value of as a single operation. ‣ fmaf( , , z) returns NaN. ‣ fmaf( , , z) returns NaN. ‣ fmaf(x, y, ) returns NaN if is an exact ‣ fmaf(x, y, ) returns NaN if is an exact CUDA Math API vRelease Version | 363 Modules Description Computes the value of as a single ternary operation, rounding the result once in round-down (to negative infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double fma_rn (double x, double y, double z) Compute as a single operation in round-to-nearest-even mode. Returns Returns the rounded value of as a single operation. ‣ fmaf( , , z) returns NaN. ‣ fmaf( , , z) returns NaN. ‣ fmaf(x, y, ) returns NaN if is an exact ‣ fmaf(x, y, ) returns NaN if is an exact Description Computes the value of as a single ternary operation, rounding the result once in round-to-nearest-even mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double fma_ru (double x, double y, double z) Compute as a single operation in round-up mode. Returns Returns the rounded value of as a single operation. CUDA Math API vRelease Version | 364 Modules ‣ fmaf( , , z) returns NaN. ‣ fmaf( , , z) returns NaN. ‣ fmaf(x, y, ) returns NaN if is an exact ‣ fmaf(x, y, ) returns NaN if is an exact Description Computes the value of as a single ternary operation, rounding the result once in round-up (to positive infinity) mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. device double fma_rz (double x, double y, double z) Compute as a single operation in round-towards-zero mode. Returns Returns the rounded value of as a single operation. ‣ fmaf( , , z) returns NaN. ‣ fmaf( , , z) returns NaN. ‣ fmaf(x, y, ) returns NaN if is an exact ‣ fmaf(x, y, ) returns NaN if is an exact Description Computes the value of as a single ternary operation, rounding the result once in round-towards-zero mode. Note: For accuracy information see the CUDA C++ Programming Guide, Mathematical Functions Appendix, Double-Precision Floating-Point Functions section. CUDA Math API vRelease Version | 365 Modules 1.10. Integer Intrinsics This section describes integer intrinsic functions that are only supported in device code. To use these functions you do not need to include any additional header files in your program. device unsigned int brev (unsigned int x) Reverse the bit order of a 32-bit unsigned integer. Returns Returns the bit-reversed value of x. i.e. bit N of the return value corresponds to bit 31-N of x. Description Reverses the bit order of the 32-bit unsigned integer x. device unsigned long long int brevll (unsigned long long int x) Reverse the bit order of a 64-bit unsigned integer. Returns Returns the bit-reversed value of x. i.e. bit N of the return value corresponds to bit 63-N of x. Description Reverses the bit order of the 64-bit unsigned integer x. device unsigned int byte_perm (unsigned int x, unsigned int y, unsigned int s) Return selected bytes from two 32-bit unsigned integers. Returns Returns a 32-bit integer consisting of four bytes from eight input bytes provided in the two input integers x and y, as specified by a selector, s. Description Create 8-byte source ‣ uint64_t tmp64 = ((uint64_t)y << 32) | x; CUDA Math API vRelease Version | 366 Modules Extract selector bits ‣ selector0 = (s >> 0) & 0x7; ‣ selector1 = (s >> 4) & 0x7; ‣ selector2 = (s >> 8) & 0x7; ‣ selector3 = (s >> 12) & 0x7; Return 4 selected bytes from 8-byte source: ‣ res[07:00] = tmp64[selector0]; ‣ res[15:08] = tmp64[selector1]; ‣ res[23:16] = tmp64[selector2]; ‣ res[31:24] = tmp64[selector3]; device int clz (int x) Return the number of consecutive high-order zero bits in a 32-bit integer. Returns Returns a value between 0 and 32 inclusive representing the number of zero bits. Description Count the number of consecutive leading zero bits, starting at the most significant bit (bit 31) of x. device int clzll (long long int x) Count the number of consecutive high-order zero bits in a 64-bit integer. Returns Returns a value between 0 and 64 inclusive representing the number of zero bits. Description Count the number of consecutive leading zero bits, starting at the most significant bit (bit 63) of x. CUDA Math API vRelease Version | 367 Modules device unsigned int dp2a_hi (ushort2 srcA, uchar4 srcB, unsigned int c) Two-way unsigned int16 by int8 dot product with unsigned int32 accumulate, taking the upper half of the second input. Description Takes two packed 16-bit integers from scrA vector and two packed 8-bit integers from the upper 16 bits of srcB vector, then creates two pairwise 8x16 products and adds them together to an unsigned 32-bit integer c. device int dp2a_hi (short2 srcA, char4 srcB, int c) Two-way signed int16 by int8 dot product with int32 accumulate, taking the upper half of the second input. Description Takes two packed 16-bit integers from scrA vector and two packed 8-bit integers from the upper 16 bits of srcB vector, then creates two pairwise 8x16 products and adds them together to a signed 32-bit integer c. device unsigned int dp2a_hi (unsigned int srcA, unsigned int srcB, unsigned int c) Two-way unsigned int16 by int8 dot product with unsigned int32 accumulate, taking the upper half of the second input. Description Extracts two packed 16-bit integers from scrA and two packed 8-bit integers from the upper 16 bits of srcB, then creates two pairwise 8x16 products and adds them together to an unsigned 32-bit integer c. device int dp2a_hi (int srcA, int srcB, int c) Two-way signed int16 by int8 dot product with int32 accumulate, taking the upper half of the second input. Description Extracts two packed 16-bit integers from scrA and two packed 8-bit integers from the upper 16 bits of srcB, then creates two pairwise 8x16 products and adds them together to a signed 32-bit integer c. CUDA Math API vRelease Version | 368 Modules device unsigned int dp2a_lo (ushort2 srcA, uchar4 srcB, unsigned int c) Two-way unsigned int16 by int8 dot product with unsigned int32 accumulate, taking the lower half of the second input. Description Takes two packed 16-bit integers from scrA vector and two packed 8-bit integers from the lower 16 bits of srcB vector, then creates two pairwise 8x16 products and adds them together to an unsigned 32-bit integer c. device int dp2a_lo (short2 srcA, char4 srcB, int c) Two-way signed int16 by int8 dot product with int32 accumulate, taking the lower half of the second input. Description Takes two packed 16-bit integers from scrA vector and two packed 8-bit integers from the lower 16 bits of srcB vector, then creates two pairwise 8x16 products and adds them together to a signed 32-bit integer c. device unsigned int dp2a_lo (unsigned int srcA, unsigned int srcB, unsigned int c) Two-way unsigned int16 by int8 dot product with unsigned int32 accumulate, taking the lower half of the second input. Description Extracts two packed 16-bit integers from scrA and two packed 8-bit integers from the lower 16 bits of srcB, then creates two pairwise 8x16 products and adds them together to an unsigned 32-bit integer c. device int dp2a_lo (int srcA, int srcB, int c) Two-way signed int16 by int8 dot product with int32 accumulate, taking the lower half of the second input. Description Extracts two packed 16-bit integers from scrA and two packed 8-bit integers from the lower 16 bits of srcB, then creates two pairwise 8x16 products and adds them together to a signed 32-bit integer c. CUDA Math API vRelease Version | 369 Modules device unsigned int dp4a (uchar4 srcA, uchar4 srcB, unsigned int c) Four-way unsigned int8 dot product with unsigned int32 accumulate. Description Takes four pairs of packed byte-sized integers from scrA and srcB vectors, then creates four pairwise products and adds them together to an unsigned 32-bit integer c. device int dp4a (char4 srcA, char4 srcB, int c) Four-way signed int8 dot product with int32 accumulate. Description Takes four pairs of packed byte-sized integers from scrA and srcB vectors, then creates four pairwise products and adds them together to a signed 32-bit integer c. device unsigned int dp4a (unsigned int srcA, unsigned int srcB, unsigned int c) Four-way unsigned int8 dot product with unsigned int32 accumulate. Description Extracts four pairs of packed byte-sized integers from scrA and srcB, then creates four pairwise products and adds them together to an unsigned 32-bit integer c. device int dp4a (int srcA, int srcB, int c) Four-way signed int8 dot product with int32 accumulate. Description Extracts four pairs of packed byte-sized integers from scrA and srcB, then creates four pairwise products and adds them together to a signed 32-bit integer c. device int ffs (int x) Find the position of the least significant bit set to 1 in a 32-bit integer. Returns Returns a value between 0 and 32 inclusive representing the position of the first bit set. ‣ ffs(0) returns 0. CUDA Math API vRelease Version | 370 Modules Description Find the position of the first (least significant) bit set to 1 in x, where the least significant bit position is 1. device int ffsll (long long int x) Find the position of the least significant bit set to 1 in a 64-bit integer. Returns Returns a value between 0 and 64 inclusive representing the position of the first bit set. ‣ ffsll(0) returns 0. Description Find the position of the first (least significant) bit set to 1 in x, where the least significant bit position is 1. device unsigned fns (unsigned mask, unsigned base, int offset) Find the position of the n-th set to 1 bit in a 32-bit integer. Returns Returns a value between 0 and 32 inclusive representing the position of the n-th set bit. ‣ parameter base must be <=31, otherwise behavior is undefined. Description Given a 32-bit value mask and an integer value base (between 0 and 31), find the n-th (given by offset) set bit in mask from the base bit. If not found, return 0xFFFFFFFF. See also https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#integer- arithmetic-instructions-fns for more information. device unsigned int funnelshift_l (unsigned int lo, unsigned int hi, unsigned int shift) Concatenate hi : lo, shift left by shift & 31 bits, return the most significant 32 bits. Returns Returns the most significant 32 bits of the shifted 64-bit value. CUDA Math API vRelease Version | 371 Modules Description Shift the 64-bit value formed by concatenating argument lo and hi left by the amount specified by the argument shift. Argument lo holds bits 31:0 and argument hi holds bits 63:32 of the 64-bit source value. The source is shifted left by the wrapped value of shift (shift & 31). The most significant 32-bits of the result are returned. device unsigned int funnelshift_lc (unsigned int lo, unsigned int hi, unsigned int shift) Concatenate hi : lo, shift left by min(shift, 32) bits, return the most significant 32 bits. Returns Returns the most significant 32 bits of the shifted 64-bit value. Description Shift the 64-bit value formed by concatenating argument lo and hi left by the amount specified by the argument shift. Argument lo holds bits 31:0 and argument hi holds bits 63:32 of the 64-bit source value. The source is shifted left by the clamped value of shift (min(shift, 32)). The most significant 32-bits of the result are returned. device unsigned int funnelshift_r (unsigned int lo, unsigned int hi, unsigned int shift) Concatenate hi : lo, shift right by shift & 31 bits, return the least significant 32 bits. Returns Returns the least significant 32 bits of the shifted 64-bit value. Description Shift the 64-bit value formed by concatenating argument lo and hi right by the amount specified by the argument shift. Argument lo holds bits 31:0 and argument hi holds bits 63:32 of the 64-bit source value. The source is shifted right by the wrapped value of shift (shift & 31). The least significant 32-bits of the result are returned. CUDA Math API vRelease Version | 372 Modules device unsigned int funnelshift_rc (unsigned int lo, unsigned int hi, unsigned int shift) Concatenate hi : lo, shift right by min(shift, 32) bits, return the least significant 32 bits. Returns Returns the least significant 32 bits of the shifted 64-bit value. Description Shift the 64-bit value formed by concatenating argument lo and hi right by the amount specified by the argument shift. Argument lo holds bits 31:0 and argument hi holds bits 63:32 of the 64-bit source value. The source is shifted right by the clamped value of shift (min(shift, 32)). The least significant 32-bits of the result are returned. device int hadd (int x, int y) Compute average of signed input arguments, avoiding overflow in the intermediate sum. Returns Returns a signed integer value representing the signed average value of the two inputs. Description Compute average of signed input arguments x and y as ( x + y ) >> 1, avoiding overflow in the intermediate sum. device int mul24 (int x, int y) Calculate the least significant 32 bits of the product of the least significant 24 bits of two integers. Returns Returns the least significant 32 bits of the product x * y. Description Calculate the least significant 32 bits of the product of the least significant 24 bits of x and y. The high order 8 bits of x and y are ignored. CUDA Math API vRelease Version | 373 Modules device long long int mul64hi (long long int x, long long int y) Calculate the most significant 64 bits of the product of the two 64-bit integers. Returns Returns the most significant 64 bits of the product x * y. Description Calculate the most significant 64 bits of the 128-bit product x * y, where x and y are 64-bit integers. device int mulhi (int x, int y) Calculate the most significant 32 bits of the product of the two 32-bit integers. Returns Returns the most significant 32 bits of the product x * y. Description Calculate the most significant 32 bits of the 64-bit product x * y, where x and y are 32-bit integers. device int popc (unsigned int x) Count the number of bits that are set to 1 in a 32-bit integer. Returns Returns a value between 0 and 32 inclusive representing the number of set bits. Description Count the number of bits that are set to 1 in x. device int popcll (unsigned long long int x) Count the number of bits that are set to 1 in a 64-bit integer. Returns Returns a value between 0 and 64 inclusive representing the number of set bits. CUDA Math API vRelease Version | 374 Modules Description Count the number of bits that are set to 1 in x. device int rhadd (int x, int y) Compute rounded average of signed input arguments, avoiding overflow in the intermediate sum. Returns Returns a signed integer value representing the signed rounded average value of the two inputs. Description Compute average of signed input arguments x and y as ( x + y + 1 ) >> 1, avoiding overflow in the intermediate sum. device unsigned int sad (int x, int y, unsigned int z) Calculate , the sum of absolute difference. Returns Returns . Description Calculate , the 32-bit sum of the third argument z plus and the absolute value of the difference between the first argument, x, and second argument, y. Inputs x and y are signed 32-bit integers, input z is a 32-bit unsigned integer. device unsigned int uhadd (unsigned int x, unsigned int y) Compute average of unsigned input arguments, avoiding overflow in the intermediate sum. Returns Returns an unsigned integer value representing the unsigned average value of the two inputs. CUDA Math API vRelease Version | 375 Modules Description Compute average of unsigned input arguments x and y as ( x + y ) >> 1, avoiding overflow in the intermediate sum. device unsigned int umul24 (unsigned int x, unsigned int y) Calculate the least significant 32 bits of the product of the least significant 24 bits of two unsigned integers. Returns Returns the least significant 32 bits of the product x * y. Description Calculate the least significant 32 bits of the product of the least significant 24 bits of x and y. The high order 8 bits of x and y are ignored. device unsigned long long int umul64hi (unsigned long long int x, unsigned long long int y) Calculate the most significant 64 bits of the product of the two 64 unsigned bit integers. Returns Returns the most significant 64 bits of the product x * y. Description Calculate the most significant 64 bits of the 128-bit product x * y, where x and y are 64-bit unsigned integers. device unsigned int umulhi (unsigned int x, unsigned int y) Calculate the most significant 32 bits of the product of the two 32-bit unsigned integers. Returns Returns the most significant 32 bits of the product x * y. CUDA Math API vRelease Version | 376 Modules Description Calculate the most significant 32 bits of the 64-bit product x * y, where x and y are 32-bit unsigned integers. device unsigned int urhadd (unsigned int x, unsigned int y) Compute rounded average of unsigned input arguments, avoiding overflow in the intermediate sum. Returns Returns an unsigned integer value representing the unsigned rounded average value of the two inputs. Description Compute average of unsigned input arguments x and y as ( x + y + 1 ) >> 1, avoiding overflow in the intermediate sum. device unsigned int usad (unsigned int x, unsigned int y, unsigned int z) Calculate , the sum of absolute difference. Returns Returns . Description Calculate , the 32-bit sum of the third argument z plus and the absolute value of the difference between the first argument, x, and second argument, y. Inputs x, y, and z are unsigned 32-bit integers. 1.11. Type Casting Intrinsics This section describes type casting intrinsic functions that are only supported in device code. To use these functions you do not need to include any additional header files in your program. CUDA Math API vRelease Version | 377 Modules device float double2float_rd (double x) Convert a double to a float in round-down mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a single-precision floating-point value in round-down (to negative infinity) mode. device float double2float_rn (double x) Convert a double to a float in round-to-nearest-even mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a single-precision floating-point value in round-to-nearest-even mode. device float double2float_ru (double x) Convert a double to a float in round-up mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a single-precision floating-point value in round-up (to positive infinity) mode. device float double2float_rz (double x) Convert a double to a float in round-towards-zero mode. Returns Returns converted value. CUDA Math API vRelease Version | 378 Modules Description Convert the double-precision floating-point value x to a single-precision floating-point value in round-towards-zero mode. device int double2hiint (double x) Reinterpret high 32 bits in a double as a signed integer. Returns Returns reinterpreted value. Description Reinterpret the high 32 bits in the double-precision floating-point value x as a signed integer. device int double2int_rd (double x) Convert a double to a signed int in round-down mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a signed integer value in round-down (to negative infinity) mode. device int double2int_rn (double x) Convert a double to a signed int in round-to-nearest-even mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a signed integer value in round-to- nearest-even mode. CUDA Math API vRelease Version | 379 Modules device int double2int_ru (double x) Convert a double to a signed int in round-up mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a signed integer value in round-up (to positive infinity) mode. device int double2int_rz (double x) Convert a double to a signed int in round-towards-zero mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a signed integer value in round- towards-zero mode. device long long int double2ll_rd (double x) Convert a double to a signed 64-bit int in round-down mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a signed 64-bit integer value in round- down (to negative infinity) mode. device long long int double2ll_rn (double x) Convert a double to a signed 64-bit int in round-to-nearest-even mode. Returns Returns converted value. CUDA Math API vRelease Version | 380 Modules Description Convert the double-precision floating-point value x to a signed 64-bit integer value in round- to-nearest-even mode. device long long int double2ll_ru (double x) Convert a double to a signed 64-bit int in round-up mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a signed 64-bit integer value in round- up (to positive infinity) mode. device long long int double2ll_rz (double x) Convert a double to a signed 64-bit int in round-towards-zero mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to a signed 64-bit integer value in round- towards-zero mode. device int double2loint (double x) Reinterpret low 32 bits in a double as a signed integer. Returns Returns reinterpreted value. Description Reinterpret the low 32 bits in the double-precision floating-point value x as a signed integer. CUDA Math API vRelease Version | 381 Modules device unsigned int double2uint_rd (double x) Convert a double to an unsigned int in round-down mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to an unsigned integer value in round- down (to negative infinity) mode. device unsigned int double2uint_rn (double x) Convert a double to an unsigned int in round-to-nearest-even mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to an unsigned integer value in round-to- nearest-even mode. device unsigned int double2uint_ru (double x) Convert a double to an unsigned int in round-up mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to an unsigned integer value in round-up (to positive infinity) mode. device unsigned int double2uint_rz (double x) Convert a double to an unsigned int in round-towards-zero mode. Returns Returns converted value. CUDA Math API vRelease Version | 382 Modules Description Convert the double-precision floating-point value x to an unsigned integer value in round- towards-zero mode. device unsigned long long int double2ull_rd (double x) Convert a double to an unsigned 64-bit int in round-down mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to an unsigned 64-bit integer value in round-down (to negative infinity) mode. device unsigned long long int double2ull_rn (double x) Convert a double to an unsigned 64-bit int in round-to-nearest-even mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to an unsigned 64-bit integer value in round-to-nearest-even mode. device unsigned long long int double2ull_ru (double x) Convert a double to an unsigned 64-bit int in round-up mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to an unsigned 64-bit integer value in round-up (to positive infinity) mode. CUDA Math API vRelease Version | 383 Modules device unsigned long long int double2ull_rz (double x) Convert a double to an unsigned 64-bit int in round-towards-zero mode. Returns Returns converted value. Description Convert the double-precision floating-point value x to an unsigned 64-bit integer value in round-towards-zero mode. device long long int double_as_longlong (double x) Reinterpret bits in a double as a 64-bit signed integer. Returns Returns reinterpreted value. Description Reinterpret the bits in the double-precision floating-point value x as a signed 64-bit integer. device int float2int_rd (float x) Convert a float to a signed integer in round-down mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to a signed integer in round-down (to negative infinity) mode. device int float2int_rn (float x) Convert a float to a signed integer in round-to-nearest-even mode. Returns Returns converted value. CUDA Math API vRelease Version | 384 Modules Description Convert the single-precision floating-point value x to a signed integer in round-to-nearest- even mode. device int float2int_ru (float) Convert a float to a signed integer in round-up mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to a signed integer in round-up (to positive infinity) mode. device int float2int_rz (float x) Convert a float to a signed integer in round-towards-zero mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to a signed integer in round-towards-zero mode. device long long int float2ll_rd (float x) Convert a float to a signed 64-bit integer in round-down mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to a signed 64-bit integer in round-down (to negative infinity) mode. CUDA Math API vRelease Version | 385 Modules device long long int float2ll_rn (float x) Convert a float to a signed 64-bit integer in round-to-nearest-even mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to a signed 64-bit integer in round-to- nearest-even mode. device long long int float2ll_ru (float x) Convert a float to a signed 64-bit integer in round-up mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to a signed 64-bit integer in round-up (to positive infinity) mode. device long long int float2ll_rz (float x) Convert a float to a signed 64-bit integer in round-towards-zero mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to a signed 64-bit integer in round- towards-zero mode. device unsigned int float2uint_rd (float x) Convert a float to an unsigned integer in round-down mode. Returns Returns converted value. CUDA Math API vRelease Version | 386 Modules Description Convert the single-precision floating-point value x to an unsigned integer in round-down (to negative infinity) mode. device unsigned int float2uint_rn (float x) Convert a float to an unsigned integer in round-to-nearest-even mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to an unsigned integer in round-to-nearest- even mode. device unsigned int float2uint_ru (float x) Convert a float to an unsigned integer in round-up mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to an unsigned integer in round-up (to positive infinity) mode. device unsigned int float2uint_rz (float x) Convert a float to an unsigned integer in round-towards-zero mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to an unsigned integer in round-towards- zero mode. CUDA Math API vRelease Version | 387 Modules device unsigned long long int float2ull_rd (float x) Convert a float to an unsigned 64-bit integer in round-down mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to an unsigned 64-bit integer in round- down (to negative infinity) mode. device unsigned long long int float2ull_rn (float x) Convert a float to an unsigned 64-bit integer in round-to-nearest-even mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to an unsigned 64-bit integer in round-to- nearest-even mode. device unsigned long long int float2ull_ru (float x) Convert a float to an unsigned 64-bit integer in round-up mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to an unsigned 64-bit integer in round-up (to positive infinity) mode. CUDA Math API vRelease Version | 388 Modules device unsigned long long int float2ull_rz (float x) Convert a float to an unsigned 64-bit integer in round-towards-zero mode. Returns Returns converted value. Description Convert the single-precision floating-point value x to an unsigned 64-bit integer in round- towards-zero mode. device int float_as_int (float x) Reinterpret bits in a float as a signed integer. Returns Returns reinterpreted value. Description Reinterpret the bits in the single-precision floating-point value x as a signed integer. device unsigned int float_as_uint (float x) Reinterpret bits in a float as a unsigned integer. Returns Returns reinterpreted value. Description Reinterpret the bits in the single-precision floating-point value x as a unsigned integer. device double hiloint2double (int hi, int lo) Reinterpret high and low 32-bit integer values as a double. Returns Returns reinterpreted value. CUDA Math API vRelease Version | 389 Modules Description Reinterpret the integer value of hi as the high 32 bits of a double-precision floating-point value and the integer value of lo as the low 32 bits of the same double-precision floating-point value. device double int2double_rn (int x) Convert a signed int to a double. Returns Returns converted value. Description Convert the signed integer value x to a double-precision floating-point value. device float int2float_rd (int x) Convert a signed integer to a float in round-down mode. Returns Returns converted value. Description Convert the signed integer value x to a single-precision floating-point value in round-down (to negative infinity) mode. device float int2float_rn (int x) Convert a signed integer to a float in round-to-nearest-even mode. Returns Returns converted value. Description Convert the signed integer value x to a single-precision floating-point value in round-to- nearest-even mode. CUDA Math API vRelease Version | 390 Modules device float int2float_ru (int x) Convert a signed integer to a float in round-up mode. Returns Returns converted value. Description Convert the signed integer value x to a single-precision floating-point value in round-up (to positive infinity) mode. device float int2float_rz (int x) Convert a signed integer to a float in round-towards-zero mode. Returns Returns converted value. Description Convert the signed integer value x to a single-precision floating-point value in round-towards- zero mode. device float int_as_float (int x) Reinterpret bits in an integer as a float. Returns Returns reinterpreted value. Description Reinterpret the bits in the signed integer value x as a single-precision floating-point value. device double ll2double_rd (long long int x) Convert a signed 64-bit int to a double in round-down mode. Returns Returns converted value. CUDA Math API vRelease Version | 391 Modules Description Convert the signed 64-bit integer value x to a double-precision floating-point value in round- down (to negative infinity) mode. device double ll2double_rn (long long int x) Convert a signed 64-bit int to a double in round-to-nearest-even mode. Returns Returns converted value. Description Convert the signed 64-bit integer value x to a double-precision floating-point value in round- to-nearest-even mode. device double ll2double_ru (long long int x) Convert a signed 64-bit int to a double in round-up mode. Returns Returns converted value. Description Convert the signed 64-bit integer value x to a double-precision floating-point value in round- up (to positive infinity) mode. device double ll2double_rz (long long int x) Convert a signed 64-bit int to a double in round-towards-zero mode. Returns Returns converted value. Description Convert the signed 64-bit integer value x to a double-precision floating-point value in round- towards-zero mode. CUDA Math API vRelease Version | 392 Modules device float ll2float_rd (long long int x) Convert a signed integer to a float in round-down mode. Returns Returns converted value. Description Convert the signed integer value x to a single-precision floating-point value in round-down (to negative infinity) mode. device float ll2float_rn (long long int x) Convert a signed 64-bit integer to a float in round-to-nearest-even mode. Returns Returns converted value. Description Convert the signed 64-bit integer value x to a single-precision floating-point value in round-to- nearest-even mode. device float ll2float_ru (long long int x) Convert a signed integer to a float in round-up mode. Returns Returns converted value. Description Convert the signed integer value x to a single-precision floating-point value in round-up (to positive infinity) mode. device float ll2float_rz (long long int x) Convert a signed integer to a float in round-towards-zero mode. Returns Returns converted value. CUDA Math API vRelease Version | 393 Modules Description Convert the signed integer value x to a single-precision floating-point value in round-towards- zero mode. device double longlong_as_double (long long int x) Reinterpret bits in a 64-bit signed integer as a double. Returns Returns reinterpreted value. Description Reinterpret the bits in the 64-bit signed integer value x as a double-precision floating-point value. device double uint2double_rn (unsigned int x) Convert an unsigned int to a double. Returns Returns converted value. Description Convert the unsigned integer value x to a double-precision floating-point value. device float uint2float_rd (unsigned int x) Convert an unsigned integer to a float in round-down mode. Returns Returns converted value. Description Convert the unsigned integer value x to a single-precision floating-point value in round-down (to negative infinity) mode. CUDA Math API vRelease Version | 394 Modules device float uint2float_rn (unsigned int x) Convert an unsigned integer to a float in round-to-nearest-even mode. Returns Returns converted value. Description Convert the unsigned integer value x to a single-precision floating-point value in round-to- nearest-even mode. device float uint2float_ru (unsigned int x) Convert an unsigned integer to a float in round-up mode. Returns Returns converted value. Description Convert the unsigned integer value x to a single-precision floating-point value in round-up (to positive infinity) mode. device float uint2float_rz (unsigned int x) Convert an unsigned integer to a float in round-towards-zero mode. Returns Returns converted value. Description Convert the unsigned integer value x to a single-precision floating-point value in round- towards-zero mode. device float uint_as_float (unsigned int x) Reinterpret bits in an unsigned integer as a float. Returns Returns reinterpreted value. CUDA Math API vRelease Version | 395 Modules Description Reinterpret the bits in the unsigned integer value x as a single-precision floating-point value. device double ull2double_rd (unsigned long long int x) Convert an unsigned 64-bit int to a double in round-down mode. Returns Returns converted value. Description Convert the unsigned 64-bit integer value x to a double-precision floating-point value in round-down (to negative infinity) mode. device double ull2double_rn (unsigned long long int x) Convert an unsigned 64-bit int to a double in round-to-nearest-even mode. Returns Returns converted value. Description Convert the unsigned 64-bit integer value x to a double-precision floating-point value in round-to-nearest-even mode. device double ull2double_ru (unsigned long long int x) Convert an unsigned 64-bit int to a double in round-up mode. Returns Returns converted value. Description Convert the unsigned 64-bit integer value x to a double-precision floating-point value in round-up (to positive infinity) mode. CUDA Math API vRelease Version | 396 Modules device double ull2double_rz (unsigned long long int x) Convert an unsigned 64-bit int to a double in round-towards-zero mode. Returns Returns converted value. Description Convert the unsigned 64-bit integer value x to a double-precision floating-point value in round-towards-zero mode. device float ull2float_rd (unsigned long long int x) Convert an unsigned integer to a float in round-down mode. Returns Returns converted value. Description Convert the unsigned integer value x to a single-precision floating-point value in round-down (to negative infinity) mode. device float ull2float_rn (unsigned long long int x) Convert an unsigned integer to a float in round-to-nearest-even mode. Returns Returns converted value. Description Convert the unsigned integer value x to a single-precision floating-point value in round-to- nearest-even mode. CUDA Math API vRelease Version | 397 Modules device float ull2float_ru (unsigned long long int x) Convert an unsigned integer to a float in round-up mode. Returns Returns converted value. Description Convert the unsigned integer value x to a single-precision floating-point value in round-up (to positive infinity) mode. device float ull2float_rz (unsigned long long int x) Convert an unsigned integer to a float in round-towards-zero mode. Returns Returns converted value. Description Convert the unsigned integer value x to a single-precision floating-point value in round- towards-zero mode. 1.12. SIMD Intrinsics This section describes SIMD intrinsic functions that are only supported in device code. To use these functions you do not need to include any additional header files in your program. device unsigned int vabs2 (unsigned int a) Computes per-halfword absolute value. Returns Returns computed value. Description Splits 4 bytes of argument into 2 parts, each consisting of 2 bytes, then computes absolute value for each of parts. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 398 Modules device unsigned int vabs4 (unsigned int a) Computes per-byte absolute value. Returns Returns computed value. Description Splits argument by bytes. Computes absolute value of each byte. Partial results are recombined and returned as unsigned int. device unsigned int vabsdiffs2 (unsigned int a, unsigned int b) Computes per-halfword sum of absolute difference of signed integer. Returns Returns computed value. Description Splits 4 bytes of each into 2 parts, each consisting of 2 bytes. For corresponding parts function computes absolute difference. Partial results are recombined and returned as unsigned int. device unsigned int vabsdiffs4 (unsigned int a, unsigned int b) Computes per-byte absolute difference of signed integer. Returns Returns computed value. Description Splits 4 bytes of each into 4 parts, each consisting of 1 byte. For corresponding parts function computes absolute difference. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 399 Modules device unsigned int vabsdiffu2 (unsigned int a, unsigned int b) Performs per-halfword absolute difference of unsigned integer computation: |a - b|. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function computes absolute difference. Partial results are recombined and returned as unsigned int. device unsigned int vabsdiffu4 (unsigned int a, unsigned int b) Computes per-byte absolute difference of unsigned integer. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function computes absolute difference. Partial results are recombined and returned as unsigned int. device unsigned int vabsss2 (unsigned int a) Computes per-halfword absolute value with signed saturation. Returns Returns computed value. Description Splits 4 bytes of argument into 2 parts, each consisting of 2 bytes, then computes absolute value with signed saturation for each of parts. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 400 Modules device unsigned int vabsss4 (unsigned int a) Computes per-byte absolute value with signed saturation. Returns Returns computed value. Description Splits 4 bytes of argument into 4 parts, each consisting of 1 byte, then computes absolute value with signed saturation for each of parts. Partial results are recombined and returned as unsigned int. device unsigned int vadd2 (unsigned int a, unsigned int b) Performs per-halfword (un)signed addition, with wrap-around: a + b. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes, then performs unsigned addition on corresponding parts. Partial results are recombined and returned as unsigned int. device unsigned int vadd4 (unsigned int a, unsigned int b) Performs per-byte (un)signed addition. Returns Returns computed value. Description Splits 'a' into 4 bytes, then performs unsigned addition on each of these bytes with the corresponding byte from 'b', ignoring overflow. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 401 Modules device unsigned int vaddss2 (unsigned int a, unsigned int b) Performs per-halfword addition with signed saturation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes, then performs addition with signed saturation on corresponding parts. Partial results are recombined and returned as unsigned int. device unsigned int vaddss4 (unsigned int a, unsigned int b) Performs per-byte addition with signed saturation. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte, then performs addition with signed saturation on corresponding parts. Partial results are recombined and returned as unsigned int. device unsigned int vaddus2 (unsigned int a, unsigned int b) Performs per-halfword addition with unsigned saturation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes, then performs addition with unsigned saturation on corresponding parts. CUDA Math API vRelease Version | 402 Modules device unsigned int vaddus4 (unsigned int a, unsigned int b) Performs per-byte addition with unsigned saturation. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte, then performs addition with unsigned saturation on corresponding parts. device unsigned int vavgs2 (unsigned int a, unsigned int b) Performs per-halfword signed rounded average computation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes, then computes signed rounded average of corresponding parts. Partial results are recombined and returned as unsigned int. device unsigned int vavgs4 (unsigned int a, unsigned int b) Computes per-byte signed rounded average. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. then computes signed rounded average of corresponding parts. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 403 Modules device unsigned int vavgu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned rounded average computation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes, then computes unsigned rounded average of corresponding parts. Partial results are recombined and returned as unsigned int. device unsigned int vavgu4 (unsigned int a, unsigned int b) Performs per-byte unsigned rounded average. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. then computes unsigned rounded average of corresponding parts. Partial results are recombined and returned as unsigned int. device unsigned int vcmpeq2 (unsigned int a, unsigned int b) Performs per-halfword (un)signed comparison. Returns Returns 0xffff computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if they are equal, and 0000 otherwise. For example vcmpeq2(0x1234aba5, 0x1234aba6) returns 0xffff0000. CUDA Math API vRelease Version | 404 Modules device unsigned int vcmpeq4 (unsigned int a, unsigned int b) Performs per-byte (un)signed comparison. Returns Returns 0xff if a = b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if they are equal, and 00 otherwise. For example vcmpeq4(0x1234aba5, 0x1234aba6) returns 0xffffff00. device unsigned int vcmpges2 (unsigned int a, unsigned int b) Performs per-halfword signed comparison: a >= b ? 0xffff : 0. Returns Returns 0xffff if a >= b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if 'a' part >= 'b' part, and 0000 otherwise. For example vcmpges2(0x1234aba5, 0x1234aba6) returns 0xffff0000. device unsigned int vcmpges4 (unsigned int a, unsigned int b) Performs per-byte signed comparison. Returns Returns 0xff if a >= b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if 'a' part >= 'b' part, and 00 otherwise. For example vcmpges4(0x1234aba5, 0x1234aba6) returns 0xffffff00. CUDA Math API vRelease Version | 405 Modules device unsigned int vcmpgeu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned comparison: a >= b ? 0xffff : 0. Returns Returns 0xffff if a >= b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if 'a' part >= 'b' part, and 0000 otherwise. For example vcmpgeu2(0x1234aba5, 0x1234aba6) returns 0xffff0000. device unsigned int vcmpgeu4 (unsigned int a, unsigned int b) Performs per-byte unsigned comparison. Returns Returns 0xff if a = b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if 'a' part >= 'b' part, and 00 otherwise. For example vcmpgeu4(0x1234aba5, 0x1234aba6) returns 0xffffff00. device unsigned int vcmpgts2 (unsigned int a, unsigned int b) Performs per-halfword signed comparison: a > b ? 0xffff : 0. Returns Returns 0xffff if a > b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if 'a' part > 'b' part, and 0000 otherwise. For example vcmpgts2(0x1234aba5, 0x1234aba6) returns 0x00000000. CUDA Math API vRelease Version | 406 Modules device unsigned int vcmpgts4 (unsigned int a, unsigned int b) Performs per-byte signed comparison. Returns Returns 0xff if a > b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if 'a' part > 'b' part, and 00 otherwise. For example vcmpgts4(0x1234aba5, 0x1234aba6) returns 0x00000000. device unsigned int vcmpgtu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned comparison: a > b ? 0xffff : 0. Returns Returns 0xffff if a > b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if 'a' part > 'b' part, and 0000 otherwise. For example vcmpgtu2(0x1234aba5, 0x1234aba6) returns 0x00000000. device unsigned int vcmpgtu4 (unsigned int a, unsigned int b) Performs per-byte unsigned comparison. Returns Returns 0xff if a > b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if 'a' part > 'b' part, and 00 otherwise. For example vcmpgtu4(0x1234aba5, 0x1234aba6) returns 0x00000000. CUDA Math API vRelease Version | 407 Modules device unsigned int vcmples2 (unsigned int a, unsigned int b) Performs per-halfword signed comparison: a <= b ? 0xffff : 0. Returns Returns 0xffff if a <= b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if 'a' part <= 'b' part, and 0000 otherwise. For example vcmples2(0x1234aba5, 0x1234aba6) returns 0xffffffff. device unsigned int vcmples4 (unsigned int a, unsigned int b) Performs per-byte signed comparison. Returns Returns 0xff if a <= b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if 'a' part <= 'b' part, and 00 otherwise. For example vcmples4(0x1234aba5, 0x1234aba6) returns 0xffffffff. device unsigned int vcmpleu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned comparison: a <= b ? 0xffff : 0. Returns Returns 0xffff if a <= b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if 'a' part <= 'b' part, and 0000 otherwise. For example vcmpleu2(0x1234aba5, 0x1234aba6) returns 0xffffffff. CUDA Math API vRelease Version | 408 Modules device unsigned int vcmpleu4 (unsigned int a, unsigned int b) Performs per-byte unsigned comparison. Returns Returns 0xff if a <= b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if 'a' part <= 'b' part, and 00 otherwise. For example vcmpleu4(0x1234aba5, 0x1234aba6) returns 0xffffffff. device unsigned int vcmplts2 (unsigned int a, unsigned int b) Performs per-halfword signed comparison: a < b ? 0xffff : 0. Returns Returns 0xffff if a < b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if 'a' part < 'b' part, and 0000 otherwise. For example vcmplts2(0x1234aba5, 0x1234aba6) returns 0x0000ffff. device unsigned int vcmplts4 (unsigned int a, unsigned int b) Performs per-byte signed comparison. Returns Returns 0xff if a < b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if 'a' part < 'b' part, and 00 otherwise. For example vcmplts4(0x1234aba5, 0x1234aba6) returns 0x000000ff. CUDA Math API vRelease Version | 409 Modules device unsigned int vcmpltu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned comparison: a < b ? 0xffff : 0. Returns Returns 0xffff if a < b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if 'a' part < 'b' part, and 0000 otherwise. For example vcmpltu2(0x1234aba5, 0x1234aba6) returns 0x0000ffff. device unsigned int vcmpltu4 (unsigned int a, unsigned int b) Performs per-byte unsigned comparison. Returns Returns 0xff if a < b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if 'a' part < 'b' part, and 00 otherwise. For example vcmpltu4(0x1234aba5, 0x1234aba6) returns 0x000000ff. device unsigned int vcmpne2 (unsigned int a, unsigned int b) Performs per-halfword (un)signed comparison: a != b ? 0xffff : 0. Returns Returns 0xffff if a != b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts result is ffff if 'a' part != 'b' part, and 0000 otherwise. For example vcmplts2(0x1234aba5, 0x1234aba6) returns 0x0000ffff. CUDA Math API vRelease Version | 410 Modules device unsigned int vcmpne4 (unsigned int a, unsigned int b) Performs per-byte (un)signed comparison. Returns Returns 0xff if a != b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts result is ff if 'a' part != 'b' part, and 00 otherwise. For example vcmplts4(0x1234aba5, 0x1234aba6) returns 0x000000ff. device unsigned int vhaddu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned average computation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes, then computes unsigned average of corresponding parts. Partial results are recombined and returned as unsigned int. device unsigned int vhaddu4 (unsigned int a, unsigned int b) Computes per-byte unsigned average. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. then computes unsigned average of corresponding parts. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 411 Modules host device unsigned int addmax_s16x2 (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword max(a + b, c). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs an add and compare: max(a_part + b_part), c_part) Partial results are recombined and returned as unsigned int. host device unsigned int viaddmax_s16x2_relu (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword max(max(a + b, c), 0). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs an add, followed by a max with relu: max(max(a_part + b_part), c_part), 0) Partial results are recombined and returned as unsigned int. host device int viaddmax_s32 (const int a, const int b, const int c) Computes max(a + b, c). Returns Returns computed value. Description Calculates the sum of signed integers a and b and takes the max with c. CUDA Math API vRelease Version | 412 Modules host device int viaddmax_s32_relu (const int a, const int b, const int c) Computes max(max(a + b, c), 0). Returns Returns computed value. Description Calculates the sum of signed integers a and b and takes the max with c. If the result is less than 0 then is returned. host device unsigned int addmax_u16x2 (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword max(a + b, c). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as unsigned shorts. For corresponding parts function performs an add and compare: max(a_part + b_part), c_part) Partial results are recombined and returned as unsigned int. host device unsigned int viaddmax_u32 (const unsigned int a, const unsigned int b, const unsigned int c) Computes max(a + b, c). Returns Returns computed value. Description Calculates the sum of unsigned integers a and b and takes the max with c. CUDA Math API vRelease Version | 413 Modules host device unsigned int addmin_s16x2 (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword min(a + b, c). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs an add and compare: min(a_part + b_part), c_part) Partial results are recombined and returned as unsigned int. host device unsigned int viaddmin_s16x2_relu (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword max(min(a + b, c), 0). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs an add, followed by a min with relu: max(min(a_part + b_part), c_part), 0) Partial results are recombined and returned as unsigned int. host device int viaddmin_s32 (const int a, const int b, const int c) Computes min(a + b, c). Returns Returns computed value. Description Calculates the sum of signed integers a and b and takes the min with c. CUDA Math API vRelease Version | 414 Modules host device int viaddmin_s32_relu (const int a, const int b, const int c) Computes max(min(a + b, c), 0). Returns Returns computed value. Description Calculates the sum of signed integers a and b and takes the min with c. If the result is less than 0 then is returned. host device unsigned int addmin_u16x2 (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword min(a + b, c). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as unsigned shorts. For corresponding parts function performs an add and compare: min(a_part + b_part), c_part) Partial results are recombined and returned as unsigned int. host device unsigned int viaddmin_u32 (const unsigned int a, const unsigned int b, const unsigned int c) Computes min(a + b, c). Returns Returns computed value. Description Calculates the sum of unsigned integers a and b and takes the min with c. CUDA Math API vRelease Version | 415 Modules host device unsigned int bmax_s16x2 (const unsigned int a, const unsigned int b, const bool *pred_hi, const bool *pred_lo) Performs per-halfword max(a, b), also sets the value pointed to by pred_hi and pred_lo to the per-halfword result of (a >= b). Returns Returns computed values. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs a maximum ( = max(a_part, b_part) ). Partial results are recombined and returned as unsigned int. Sets the value pointed to by pred_hi to the value (a_high_part >= b_high_part). Sets the value pointed to by pred_lo to the value (a_low_part >= b_low_part). host device int vibmax_s32 (const int a, const int b, const bool *pred) Computes max(a, b), also sets the value pointed to by pred to (a >= b). Returns Returns computed values. Description Calculates the maximum of a and b of two signed ints. Also sets the value pointed to by pred to the value (a >= b). host device unsigned int vibmax_u16x2 (const unsigned int a, const unsigned int b, const bool *pred_hi, const bool *pred_lo) Performs per-halfword max(a, b), also sets the value pointed to by pred_hi and pred_lo to the per-halfword result of (a >= b). Returns Returns computed values. CUDA Math API vRelease Version | 416 Modules Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as unsigned shorts. For corresponding parts function performs a maximum ( = max(a_part, b_part) ). Partial results are recombined and returned as unsigned int. Sets the value pointed to by pred_hi to the value (a_high_part >= b_high_part). Sets the value pointed to by pred_lo to the value (a_low_part >= b_low_part). host device unsigned int bmax_u32 (const unsigned int a, const unsigned int b, const bool *pred) Computes max(a, b), also sets the value pointed to by pred to (a >= b). Returns Returns computed values. Description Calculates the maximum of a and b of two unsigned ints. Also sets the value pointed to by pred to the value (a >= b). host device unsigned int vibmin_s16x2 (const unsigned int a, const unsigned int b, const bool *pred_hi, const bool *pred_lo) Performs per-halfword min(a, b), also sets the value pointed to by pred_hi and pred_lo to the per-halfword result of (a <= b). Returns Returns computed values. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs a maximum ( = max(a_part, b_part) ). Partial results are recombined and returned as unsigned int. Sets the value pointed to by pred_hi to the value (a_high_part <= b_high_part). Sets the value pointed to by pred_lo to the value (a_low_part <= b_low_part). CUDA Math API vRelease Version | 417 Modules host device int vibmin_s32 (const int a, const int b, const bool *pred) Computes min(a, b), also sets the value pointed to by pred to (a <= b). Returns Returns computed values. Description Calculates the minimum of a and b of two signed ints. Also sets the value pointed to by pred to the value (a <= b). host device unsigned int bmin_u16x2 (const unsigned int a, const unsigned int b, const bool *pred_hi, const bool *pred_lo) Performs per-halfword min(a, b), also sets the value pointed to by pred_hi and pred_lo to the per-halfword result of (a <= b). Returns Returns computed values. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as unsigned shorts. For corresponding parts function performs a maximum ( = max(a_part, b_part) ). Partial results are recombined and returned as unsigned int. Sets the value pointed to by pred_hi to the value (a_high_part <= b_high_part). Sets the value pointed to by pred_lo to the value (a_low_part <= b_low_part). host device unsigned int vibmin_u32 (const unsigned int a, const unsigned int b, const bool *pred) Computes min(a, b), also sets the value pointed to by pred to (a <= b). Returns Returns computed values. CUDA Math API vRelease Version | 418 Modules Description Calculates the minimum of a and b of two unsigned ints. Also sets the value pointed to by pred to the value (a <= b). host device unsigned int max3_s16x2 (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword max(max(a, b), c). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs a 3-way max ( = max(max(a_part, b_part), c_part) ). Partial results are recombined and returned as unsigned int. host device unsigned int vimax3_s16x2_relu (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword max(max(max(a, b), c), 0). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs a three-way max with relu ( = max(a_part, b_part, c_part, 0) ). Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 419 Modules host device int vimax3_s32 (const int a, const int b, const int c) Computes max(max(a, b), c). Returns Returns computed value. Description Calculates the 3-way max of signed integers a, b and c. host device int vimax3_s32_relu (const int a, const int b, const int c) Computes max(max(max(a, b), c), 0). Returns Returns computed value. Description Calculates the maximum of three signed ints, if this is less than 0 then 0 is returned. host device unsigned int max3_u16x2 (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword max(max(a, b), c). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as unsigned shorts. For corresponding parts function performs a 3-way max ( = max(max(a_part, b_part), c_part) ). Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 420 Modules host device unsigned int max3_u32 (const unsigned int a, const unsigned int b, const unsigned int c) Computes max(max(a, b), c). Returns Returns computed value. Description Calculates the 3-way max of unsigned integers a, b and c. host device unsigned int vimax_s16x2_relu (const unsigned int a, const unsigned int b) Performs per-halfword max(max(a, b), 0). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs a max with relu ( = max(a_part, b_part, 0) ). Partial results are recombined and returned as unsigned int. host device int vimax_s32_relu (const int a, const int b) Computes max(max(a, b), 0). Returns Returns computed value. Description Calculates the maximum of a and b of two signed ints, if this is less than 0 then 0 is returned. CUDA Math API vRelease Version | 421 Modules host device unsigned int min3_s16x2 (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword min(min(a, b), c). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs a 3-way min ( = min(min(a_part, b_part), c_part) ). Partial results are recombined and returned as unsigned int. host device unsigned int vimin3_s16x2_relu (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword max(min(min(a, b), c), 0). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs a three-way min with relu ( = max(min(a_part, b_part, c_part), 0) ). Partial results are recombined and returned as unsigned int. host device int vimin3_s32 (const int a, const int b, const int c) Computes min(min(a, b), c). Returns Returns computed value. CUDA Math API vRelease Version | 422 Modules Description Calculates the 3-way min of signed integers a, b and c. host device int vimin3_s32_relu (const int a, const int b, const int c) Computes max(min(min(a, b), c), 0). Returns Returns computed value. Description Calculates the minimum of three signed ints, if this is less than 0 then 0 is returned. host device unsigned int min3_u16x2 (const unsigned int a, const unsigned int b, const unsigned int c) Performs per-halfword min(min(a, b), c). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as unsigned shorts. For corresponding parts function performs a 3-way min ( = min(min(a_part, b_part), c_part) ). Partial results are recombined and returned as unsigned int. host device unsigned int vimin3_u32 (const unsigned int a, const unsigned int b, const unsigned int c) Computes min(min(a, b), c). Returns Returns computed value. CUDA Math API vRelease Version | 423 Modules Description Calculates the 3-way min of unsigned integers a, b and c. host device unsigned int vimin_s16x2_relu (const unsigned int a, const unsigned int b) Performs per-halfword max(min(a, b), 0). Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. These 2 byte parts are interpreted as signed shorts. For corresponding parts function performs a min with relu ( = max(min(a_part, b_part), 0) ). Partial results are recombined and returned as unsigned int. host device int vimin_s32_relu (const int a, const int b) Computes max(min(a, b), 0). Returns Returns computed value. Description Calculates the minimum of a and b of two signed ints, if this is less than 0 then 0 is returned. device unsigned int vmaxs2 (unsigned int a, unsigned int b) Performs per-halfword signed maximum computation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function computes signed maximum. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 424 Modules device unsigned int vmaxs4 (unsigned int a, unsigned int b) Computes per-byte signed maximum. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function computes signed maximum. Partial results are recombined and returned as unsigned int. device unsigned int vmaxu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned maximum computation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function computes unsigned maximum. Partial results are recombined and returned as unsigned int. device unsigned int vmaxu4 (unsigned int a, unsigned int b) Computes per-byte unsigned maximum. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function computes unsigned maximum. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 425 Modules device unsigned int vmins2 (unsigned int a, unsigned int b) Performs per-halfword signed minimum computation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function computes signed minimum. Partial results are recombined and returned as unsigned int. device unsigned int vmins4 (unsigned int a, unsigned int b) Computes per-byte signed minimum. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function computes signed minimum. Partial results are recombined and returned as unsigned int. device unsigned int vminu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned minimum computation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function computes unsigned minimum. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 426 Modules device unsigned int vminu4 (unsigned int a, unsigned int b) Computes per-byte unsigned minimum. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function computes unsigned minimum. Partial results are recombined and returned as unsigned int. device unsigned int vneg2 (unsigned int a) Computes per-halfword negation. Returns Returns computed value. Description Splits 4 bytes of argument into 2 parts, each consisting of 2 bytes. For each part function computes negation. Partial results are recombined and returned as unsigned int. device unsigned int vneg4 (unsigned int a) Performs per-byte negation. Returns Returns computed value. Description Splits 4 bytes of argument into 4 parts, each consisting of 1 byte. For each part function computes negation. Partial results are recombined and returned as unsigned int. device unsigned int vnegss2 (unsigned int a) Computes per-halfword negation with signed saturation. Returns Returns computed value. CUDA Math API vRelease Version | 427 Modules Description Splits 4 bytes of argument into 2 parts, each consisting of 2 bytes. For each part function computes negation. Partial results are recombined and returned as unsigned int. device unsigned int vnegss4 (unsigned int a) Performs per-byte negation with signed saturation. Returns Returns computed value. Description Splits 4 bytes of argument into 4 parts, each consisting of 1 byte. For each part function computes negation. Partial results are recombined and returned as unsigned int. device unsigned int vsads2 (unsigned int a, unsigned int b) Performs per-halfword sum of absolute difference of signed. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function computes absolute difference and sum it up. Partial results are recombined and returned as unsigned int. device unsigned int vsads4 (unsigned int a, unsigned int b) Computes per-byte sum of abs difference of signed. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function computes absolute difference and sum it up. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 428 Modules device unsigned int vsadu2 (unsigned int a, unsigned int b) Computes per-halfword sum of abs diff of unsigned. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function computes absolute differences and returns sum of those differences. device unsigned int vsadu4 (unsigned int a, unsigned int b) Computes per-byte sum of abs difference of unsigned. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function computes absolute differences and returns sum of those differences. device unsigned int vseteq2 (unsigned int a, unsigned int b) Performs per-halfword (un)signed comparison. Returns Returns 1 if a = b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part == 'b' part. If both equalities are satisfied, function returns 1. CUDA Math API vRelease Version | 429 Modules device unsigned int vseteq4 (unsigned int a, unsigned int b) Performs per-byte (un)signed comparison. Returns Returns 1 if a = b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part == 'b' part. If both equalities are satisfied, function returns 1. device unsigned int vsetges2 (unsigned int a, unsigned int b) Performs per-halfword signed comparison. Returns Returns 1 if a >= b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part >= 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetges4 (unsigned int a, unsigned int b) Performs per-byte signed comparison. Returns Returns 1 if a >= b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part >= 'b' part. If both inequalities are satisfied, function returns 1. CUDA Math API vRelease Version | 430 Modules device unsigned int vsetgeu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned minimum unsigned comparison. Returns Returns 1 if a >= b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part >= 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetgeu4 (unsigned int a, unsigned int b) Performs per-byte unsigned comparison. Returns Returns 1 if a >= b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part >= 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetgts2 (unsigned int a, unsigned int b) Performs per-halfword signed comparison. Returns Returns 1 if a > b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part > 'b' part. If both inequalities are satisfied, function returns 1. CUDA Math API vRelease Version | 431 Modules device unsigned int vsetgts4 (unsigned int a, unsigned int b) Performs per-byte signed comparison. Returns Returns 1 if a > b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part > 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetgtu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned comparison. Returns Returns 1 if a > b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part > 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetgtu4 (unsigned int a, unsigned int b) Performs per-byte unsigned comparison. Returns Returns 1 if a > b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part > 'b' part. If both inequalities are satisfied, function returns 1. CUDA Math API vRelease Version | 432 Modules device unsigned int vsetles2 (unsigned int a, unsigned int b) Performs per-halfword unsigned minimum computation. Returns Returns 1 if a <= b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part <= 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetles4 (unsigned int a, unsigned int b) Performs per-byte signed comparison. Returns Returns 1 if a <= b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part <= 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetleu2 (unsigned int a, unsigned int b) Performs per-halfword signed comparison. Returns Returns 1 if a <= b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part <= 'b' part. If both inequalities are satisfied, function returns 1. CUDA Math API vRelease Version | 433 Modules device unsigned int vsetleu4 (unsigned int a, unsigned int b) Performs per-byte unsigned comparison. Returns Returns 1 if a <= b, else returns 0. Description Splits 4 bytes of each argument into 4 part, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part <= 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetlts2 (unsigned int a, unsigned int b) Performs per-halfword signed comparison. Returns Returns 1 if a < b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part <= 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetlts4 (unsigned int a, unsigned int b) Performs per-byte signed comparison. Returns Returns 1 if a < b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part <= 'b' part. If both inequalities are satisfied, function returns 1. CUDA Math API vRelease Version | 434 Modules device unsigned int vsetltu2 (unsigned int a, unsigned int b) Performs per-halfword unsigned comparison. Returns Returns 1 if a < b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part <= 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetltu4 (unsigned int a, unsigned int b) Performs per-byte unsigned comparison. Returns Returns 1 if a < b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part <= 'b' part. If both inequalities are satisfied, function returns 1. device unsigned int vsetne2 (unsigned int a, unsigned int b) Performs per-halfword (un)signed comparison. Returns Returns 1 if a != b, else returns 0. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs comparison 'a' part != 'b' part. If both conditions are satisfied, function returns 1. CUDA Math API vRelease Version | 435 Modules device unsigned int vsetne4 (unsigned int a, unsigned int b) Performs per-byte (un)signed comparison. Returns Returns 1 if a != b, else returns 0. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs comparison 'a' part != 'b' part. If both conditions are satisfied, function returns 1. device unsigned int vsub2 (unsigned int a, unsigned int b) Performs per-halfword (un)signed subtraction, with wrap-around. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs subtraction. Partial results are recombined and returned as unsigned int. device unsigned int vsub4 (unsigned int a, unsigned int b) Performs per-byte subtraction. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs subtraction. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 436 Modules device unsigned int vsubss2 (unsigned int a, unsigned int b) Performs per-halfword (un)signed subtraction, with signed saturation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs subtraction with signed saturation. Partial results are recombined and returned as unsigned int. device unsigned int vsubss4 (unsigned int a, unsigned int b) Performs per-byte subtraction with signed saturation. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs subtraction with signed saturation. Partial results are recombined and returned as unsigned int. device unsigned int vsubus2 (unsigned int a, unsigned int b) Performs per-halfword subtraction with unsigned saturation. Returns Returns computed value. Description Splits 4 bytes of each argument into 2 parts, each consisting of 2 bytes. For corresponding parts function performs subtraction with unsigned saturation. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 437 Modules device unsigned int vsubus4 (unsigned int a, unsigned int b) Performs per-byte subtraction with unsigned saturation. Returns Returns computed value. Description Splits 4 bytes of each argument into 4 parts, each consisting of 1 byte. For corresponding parts function performs subtraction with unsigned saturation. Partial results are recombined and returned as unsigned int. CUDA Math API vRelease Version | 438 Chapter 2. Data Structures Here are the data structures with brief descriptions: half half data type half2 half2 data type half2_raw half2_raw data type half_raw half_raw data type nv_bfloat16 Nv_bfloat16 datatype nv_bfloat162 Nv_bfloat162 datatype nv_bfloat162_raw nv_bfloat162_raw data type nv_bfloat16_raw nv_bfloat16_raw data type nv_fp8_e4m3 nv_fp8_e4m3 datatype nv_fp8_e5m2 nv_fp8_e5m2 datatype nv_fp8x2_e4m3 nv_fp8x2_e4m3 datatype nv_fp8x2_e5m2 nv_fp8x2_e5m2 datatype nv_fp8x4_e4m3 nv_fp8x4_e4m3 datatype nv_fp8x4_e5m2 nv_fp8x4_e5m2 datatype CUDA Math API vRelease Version | 439 Data Structures 2.1. half Struct Reference half data type This structure implements the datatype for storing half-precision floating-point numbers. The structure implements assignment, arithmetic and comparison operators, and type conversions. 16 bits are being used in total: 1 sign bit, 5 bits for the exponent, and the significand is being stored in 10 bits. The total precision is 11 bits. There are 15361 representable numbers within the interval [0.0, 1.0], endpoints included. On average we have log10(2**11) ~ 3.311 decimal digits. The objective here is to provide IEEE754-compliant implementation of binary16 type and arithmetic with limitations due to device HW not supporting floating-point exceptions. unsigned short half:: x Protected storage variable contains the bits of floating-point data. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const unsigned long long val Construct half from unsigned long long input using default round-to-nearest-even rounding mode. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const long long val Construct half from long long input using default round-to-nearest-even rounding mode. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const cppOperationPrimitive: storage=unsignedlong val Construct half from unsigned long input using default round-to-nearest-even rounding mode. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const long val CUDA Math API vRelease Version | 440 Data Structures Construct half from long input using default round-to-nearest-even rounding mode. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const cppOperationPrimitive: storage=unsignedint val Construct half from unsigned int input using default round-to-nearest-even rounding mode. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const cppOperationPrimitive: storage=int val Construct half from int input using default round-to-nearest-even rounding mode. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const unsigned short val Construct half from unsigned short integer input using default round-to-nearest- even rounding mode. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const short val Construct half from short integer input using default round-to-nearest-even rounding mode. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const cppOperationPrimitive: storage=double f Construct half from double input using default round-to-nearest-even rounding mode. half half cppOperationVisibility: visibility=public host device cppOperationConst: const=const cppOperationPrimitive: storage=float f Construct half from float input using default round-to-nearest-even rounding mode. CUDA Math API vRelease Version | 441 Data Structures half half cppOperationVisibility: visibility=public cppOperationInline: inline=inline host device cppOperationConst: const=const half_raw hr Constructor from half_raw . half half cppOperationVisibility: visibility=public host device Constructor by default. host device operator half_raw () Description Type cast to half_raw operator with volatile input. host device operator half_raw () Description Type cast to half_raw operator. host device constexpr operator bool () Description Conversion operator to bool data type. +0 and -0 inputs convert to false. Non-zero inputs convert to true. host device operator char () Description Conversion operator to an implementation defined char data type. Using round-toward-zero rounding mode. Detects signedness of the char type and proceeds accordingly, see further details in signed and unsigned char operators. CUDA Math API vRelease Version | 442 Data Structures host device operator float () Description Type cast to float operator. host device operator int () Description Conversion operator to int data type. Using round-toward-zero rounding mode. See half2int_rz( half) for further details host device operator long () Description Conversion operator to long data type. Using round-toward-zero rounding mode. host device operator long long () Description Conversion operator to long long data type. Using round-toward-zero rounding mode. See half2ll_rz( half) for further details host device operator short () Description Conversion operator to short data type. Using round-toward-zero rounding mode. See half2short_rz( half) for further details host device operator signed char () Description Conversion operator to signed char data type. Using round-toward-zero rounding mode. See half2char_rz( half) for further details CUDA Math API vRelease Version | 443 Data Structures host device operator unsigned char () Description Conversion operator to unsigned char data type. Using round-toward-zero rounding mode. See half2uchar_rz( half) for further details host device operator unsigned int () Description Conversion operator to unsigned int data type. Using round-toward-zero rounding mode. See half2uint_rz( half) for further details host device operator unsigned long () Description Conversion operator to unsigned long data type. Using round-toward-zero rounding mode. host device operator unsigned long long () Description Conversion operator to unsigned long long data type. Using round-toward-zero rounding mode. See half2ull_rz( half) for further details host device operator unsigned short () Description Conversion operator to unsigned short data type. Using round-toward-zero rounding mode. See half2ushort_rz( half) for further details CUDA Math API vRelease Version | 444 Data Structures host device operator= (const unsigned long long val) Description Type cast from unsigned long long assignment operator, using default round-to-nearest- even rounding mode. host device operator= (const long long val) Description Type cast from long long assignment operator, using default round-to-nearest-even rounding mode. host device operator= (const unsigned int val) Description Type cast from unsigned int assignment operator, using default round-to-nearest-even rounding mode. host device operator= (const int val) Description Type cast from int assignment operator, using default round-to-nearest-even rounding mode. host device operator= (const unsigned short val) Description Type cast from unsigned short assignment operator, using default round-to-nearest-even rounding mode. CUDA Math API vRelease Version | 445 Data Structures host device operator= (const short val) Description Type cast from short assignment operator, using default round-to-nearest-even rounding mode. host device operator= (const double f) Description Type cast to half assignment operator from double input using default round-to- nearest-even rounding mode. host device operator= (const float f) Description Type cast to half assignment operator from float input using default round-to- nearest-even rounding mode. host device operator= (const half_raw hr) Description Assignment operator from volatile half_raw to volatile half . host device operator= (const half_raw hr) Description Assignment operator from half_raw to volatile half . host device operator= (const half_raw hr) Description Assignment operator from half_raw . CUDA Math API vRelease Version | 446 Data Structures 2.2. half2 Struct Reference half2 data type This structure implements the datatype for storing two half-precision floating-point numbers. The structure implements assignment, arithmetic and comparison operators, and type conversions. ‣ NOTE: half2 is visible to non-nvcc host compilers struct half half2::x Storage field holding lower half part. struct half half2::y Storage field holding upper half part. half2 half2 cppOperationVisibility: visibility=public host device cppOperationConst: const=const half2_raw h2r Constructor from half2_raw half2 half2 cppOperationVisibility: visibility=public host device cppOperationConst: const=const half2 src Copy constructor half2 half2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline host device cppOperationConst: const=const half a cppOperationConst: const=const half b Constructor from two half variables half2 half2 cppOperationVisibility: visibility=public host device Constructor by default. CUDA Math API vRelease Version | 447 Data Structures host device operator half2_raw () Description Conversion operator to half2_raw host device operator= (const half2_raw h2r) Description Assignment operator from half2_raw host device operator= (const half2 src) Description Copy assignment operator 2.3. half2_raw half2_raw data type Struct Reference Type allows static initialization of half2 until it becomes a builtin type. ‣ Note: this initialization is as a bit-field representation of half2, and not a conversion from short2 to half2. Such representation will be deprecated in a future version of CUDA. ‣ Note: this is visible to non-nvcc compilers, including C-only compilations 2.4. half_raw half_raw data type Struct Reference Type allows static initialization of half until it becomes a builtin type. ‣ Note: this initialization is as a bit-field representation of half, and not a conversion from short to half. Such representation will be deprecated in a future version of CUDA. ‣ Note: this is visible to non-nvcc compilers, including C-only compilations CUDA Math API vRelease Version | 448 Data Structures 2.5. nv_bfloat16 nv_bfloat16 datatype Struct Reference This structure implements the datatype for storing nv_bfloat16 floating-point numbers. The structure implements assignment operators and type conversions. 16 bits are being used in total: 1 sign bit, 8 bits for the exponent, and the significand is being stored in 7 bits. The total precision is 8 bits. unsigned short nv_bfloat16:: x Protected storage variable contains the bits of floating-point data. nv_bfloat16 nv_bfloat16 cppOperationVisibility: visibility=public host device unsigned long long val Construct nv_bfloat16 nearest-even rounding mode. nv_bfloat16 from unsigned long long input using default round-to- nv_bfloat16 cppOperationVisibility: visibility=public host device long long val Construct nv_bfloat16 rounding mode. nv_bfloat16 from long long input using default round-to-nearest-even nv_bfloat16 cppOperationVisibility: visibility=public host device cppOperationConst: const=const cppOperationPrimitive: storage=unsignedlong val Construct nv_bfloat16 even rounding mode. nv_bfloat16 from unsigned long input using default round-to-nearest- nv_bfloat16 cppOperationVisibility: visibility=public host device cppOperationConst: const=const long val Construct nv_bfloat16 rounding mode. from long input using default round-to-nearest-even CUDA Math API vRelease Version | 449 Data Structures nv_bfloat16 nv_bfloat16 cppOperationVisibility: visibility=public host device cppOperationPrimitive: storage=unsignedint val Construct nv_bfloat16 even rounding mode. nv_bfloat16 from unsigned int input using default round-to-nearest- nv_bfloat16 cppOperationVisibility: visibility=public host device cppOperationPrimitive: storage=int val Construct nv_bfloat16 mode. nv_bfloat16 from int input using default round-to-nearest-even rounding nv_bfloat16 cppOperationVisibility: visibility=public host device unsigned short val Construct nv_bfloat16 nearest-even rounding mode. nv_bfloat16 from unsigned short integer input using default round-to- nv_bfloat16 cppOperationVisibility: visibility=public host device short val Construct nv_bfloat16 rounding mode. nv_bfloat16 from short integer input using default round-to-nearest-even nv_bfloat16 cppOperationVisibility: visibility=public host device cppOperationConst: const=const cppOperationPrimitive: storage=double f Construct nv_bfloat16 rounding mode. nv_bfloat16 from double input using default round-to-nearest-even nv_bfloat16 cppOperationVisibility: visibility=public host device cppOperationConst: const=const cppOperationPrimitive: storage=float f Construct nv_bfloat16 rounding mode. from float input using default round-to-nearest-even CUDA Math API vRelease Version | 450 Data Structures nv_bfloat16 nv_bfloat16 cppOperationVisibility: visibility=public cppOperationInline: inline=inline host device cppOperationConst: const=const nv_bfloat16_raw hr Constructor from nv_bfloat16_raw . nv_bfloat16 nv_bfloat16 cppOperationVisibility: visibility=public host device Constructor by default. host device operator nv_bfloat16_raw () Description Type cast to nv_bfloat16_raw operator with volatile input. host device operator nv_bfloat16_raw () Description Type cast to nv_bfloat16_raw operator. host device constexpr operator bool () Description Conversion operator to bool data type. +0 and -0 inputs convert to false. Non-zero inputs convert to true. host device operator char () Description Conversion operator to an implementation defined char data type. Using round-toward-zero rounding mode. Detects signedness of the char type and proceeds accordingly, see further details in signed and unsigned char operators. CUDA Math API vRelease Version | 451 Data Structures host device operator float () Description Type cast to float operator. host device operator int () Description Conversion operator to int data type. Using round-toward-zero rounding mode. See bfloat162int_rz( nv_bfloat16) for further details host device operator long () Description Conversion operator to long data type. Using round-toward-zero rounding mode. host device operator long long () Description Conversion operator to long long data type. Using round-toward-zero rounding mode. See bfloat162ll_rz( nv_bfloat16) for further details host device operator short () Description Conversion operator to short data type. Using round-toward-zero rounding mode. See bfloat162short_rz( nv_bfloat16) for further details host device operator signed char () Description Conversion operator to signed char data type. Using round-toward-zero rounding mode. See bfloat162char_rz( nv_bfloat16) for further details CUDA Math API vRelease Version | 452 Data Structures host device operator unsigned char () Description Conversion operator to unsigned char data type. Using round-toward-zero rounding mode. See bfloat162uchar_rz( nv_bfloat16) for further details host device operator unsigned int () Description Conversion operator to unsigned int data type. Using round-toward-zero rounding mode. See bfloat162uint_rz( nv_bfloat16) for further details host device operator unsigned long () Description Conversion operator to unsigned long data type. Using round-toward-zero rounding mode. host device operator unsigned long long () Description Conversion operator to unsigned long long data type. Using round-toward-zero rounding mode. See bfloat162ull_rz( nv_bfloat16) for further details host device operator unsigned short () Description Conversion operator to unsigned short data type. Using round-toward-zero rounding mode. See bfloat162ushort_rz( nv_bfloat16) for further details CUDA Math API vRelease Version | 453 Data Structures host device operator= (unsigned long long val) Description Type cast from unsigned long long assignment operator, using default round-to-nearest- even rounding mode. host device operator= (long long val) Description Type cast from long long assignment operator, using default round-to-nearest-even rounding mode. host device operator= (unsigned int val) Description Type cast from unsigned int assignment operator, using default round-to-nearest-even rounding mode. host device operator= (int val) Description Type cast from int assignment operator, using default round-to-nearest-even rounding mode. host device operator= (unsigned short val) Description Type cast from unsigned short assignment operator, using default round-to-nearest-even rounding mode. host device operator= (short val) Description Type cast from short assignment operator, using default round-to-nearest-even rounding mode. CUDA Math API vRelease Version | 454 Data Structures host device operator= (const double f) Description Type cast to nv_bfloat16 assignment operator from double input using default round-to-nearest-even rounding mode. host device operator= (const float f) Description Type cast to nv_bfloat16 to-nearest-even rounding mode. assignment operator from float input using default round- host device operator= (const nv_bfloat16_raw hr) Description Assignment operator from volatile nv_bfloat16_raw to volatile nv_bfloat16 . host device operator= (const nv_bfloat16_raw hr) Description Assignment operator from nv_bfloat16_raw to volatile nv_bfloat16 . host device operator= (const nv_bfloat16_raw hr) Description Assignment operator from nv_bfloat16_raw . CUDA Math API vRelease Version | 455 Data Structures 2.6. nv_bfloat162 nv_bfloat162 datatype Struct Reference This structure implements the datatype for storing two nv_bfloat16 floating-point numbers. The structure implements assignment, arithmetic and comparison operators, and type conversions. ‣ NOTE: nv_bfloat162 is visible to non-nvcc host compilers struct nv_bfloat16 nv_bfloat162::x Storage field holding lower nv_bfloat16 part. struct nv_bfloat16 nv_bfloat162::y Storage field holding upper nv_bfloat16 nv_bfloat162 part. nv_bfloat162 cppOperationVisibility: visibility=public host device cppOperationConst: const=const nv_bfloat162_raw Constructor from nv_bfloat162_raw nv_bfloat162 h2r nv_bfloat162 cppOperationVisibility: visibility=public host device cppOperationConst: const=const nv_bfloat162 Copy constructor nv_bfloat162 src nv_bfloat162 cppOperationVisibility: visibility=public cppOperationInline: inline=inline host device cppOperationConst: const=const nv_bfloat16 a cppOperationConst: const=const nv_bfloat16 b Constructor from two nv_bfloat16 nv_bfloat162 variables nv_bfloat162 cppOperationVisibility: visibility=public host device Constructor by default. CUDA Math API vRelease Version | 456 Data Structures host device operator nv_bfloat162_raw () Description Conversion operator to nv_bfloat162_raw host device operator= (const nv_bfloat162_raw h2r) Description Assignment operator from nv_bfloat162_raw host device operator= (const nv_bfloat162 src) Description Copy assignment operator 2.7. nv_bfloat162_raw nv_bfloat162_raw data type Struct Reference Type allows static initialization of nv_bfloat162 until it becomes a builtin type. ‣ Note: this initialization is as a bit-field representation of nv_bfloat162, and not a conversion from short2 to nv_bfloat162. Such representation will be deprecated in a future version of CUDA. ‣ Note: this is visible to non-nvcc compilers, including C-only compilations 2.8. nv_bfloat16_raw nv_bfloat16_raw data type Struct Reference Type allows static initialization of nv_bfloat16 until it becomes a builtin type. ‣ Note: this initialization is as a bit-field representation of nv_bfloat16, and not a conversion from short to nv_bfloat16. Such representation will be deprecated in a future version of CUDA. ‣ Note: this is visible to non-nvcc compilers, including C-only compilations CUDA Math API vRelease Version | 457 Data Structures 2.9. nv_fp8_e4m3 nv_fp8_e4m3 datatype Struct Reference This structure implements the datatype for storing fp8 floating-point numbers of e4m3 kind: with 1 sign, 4 exponent, 1 implicit and 3 explicit mantissa bits. The encoding doesn't support Infinity. NaNs are limited to 0x7F and 0xFF values. The structure implements converting constructors and operators. nv_fp8_storage_t nv_fp8_e4m3:: x Storage variable contains the fp8 floating-point data. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const long long int val Constructor from long long int data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=longint val Constructor from long int data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=int val Constructor from int data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const short int val CUDA Math API vRelease Version | 458 Data Structures Constructor from short int data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const unsigned long long int val Constructor from unsigned long long int data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const unsigned long int val Constructor from unsigned long int data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=unsignedint val Constructor from unsigned int data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const unsigned short int val Constructor from unsigned short int data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=double f Constructor from double data type, relies on NV_SATFINITE behavior for out-of-range values. CUDA Math API vRelease Version | 459 Data Structures nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=float f Constructor from float data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const nv_bfloat16 f Constructor from nv_bfloat16 out-of-range values. nv_fp8_e4m3 data type, relies on NV_SATFINITE behavior for nv_fp8_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const half f Constructor from half data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e4m3 nv_fp8_e4m3 cppOperationVisibility: visibility=public Constructor by default. host device operator half () Description Conversion operator to half data type. host device operator nv_bfloat16 () Description Conversion operator to nv_bfloat16 data type. CUDA Math API vRelease Version | 460 Data Structures host device operator bool () Description Conversion operator to bool data type. +0 and -0 inputs convert to false. Non-zero inputs convert to true. host device operator char () Description Conversion operator to an implementation defined char data type. Detects signedness of the char type and proceeds accordingly, see further details in signed and unsigned char operators. Clamps inputs to the output range. NaN inputs convert to zero. host device operator double () Description Conversion operator to double data type. host device operator float () Description Conversion operator to float data type. host device operator int () Description Conversion operator to int data type. NaN inputs convert to zero. host device operator long int () Description Conversion operator to long int data type. Clamps too large inputs to the output range. NaN inputs convert to zero if output type is 32-bit. NaN inputs convert to 0x8000000000000000ULL if output type is 64-bit. CUDA Math API vRelease Version | 461 Data Structures host device operator long long int () Description Conversion operator to long long int data type. NaN inputs convert to 0x8000000000000000LL. host device operator short int () Description Conversion operator to short int data type. NaN inputs convert to zero. host device operator signed char () Description Conversion operator to signed char data type. Clamps too large inputs to the output range. NaN inputs convert to zero. host device operator unsigned char () Description Conversion operator to unsigned char data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero. host device operator unsigned int () Description Conversion operator to unsigned int data type. Clamps negative inputs to zero. NaN inputs convert to zero. host device operator unsigned long int () Description Conversion operator to unsigned long int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero if output type is 32-bit. NaN inputs convert to 0x8000000000000000ULL if output type is 64-bit. CUDA Math API vRelease Version | 462 Data Structures host device operator unsigned long long int () Description Conversion operator to unsigned long long int data type. Clamps negative inputs to zero. NaN inputs convert to 0x8000000000000000ULL. host device operator unsigned short int () Description Conversion operator to unsigned short int data type. Clamps negative inputs to zero. NaN inputs convert to zero. 2.10. nv_fp8_e5m2 nv_fp8_e5m2 datatype Struct Reference This structure implements the datatype for handling fp8 floating-point numbers of e5m2 kind: with 1 sign, 5 exponent, 1 implicit and 2 explicit mantissa bits. The structure implements converting constructors and operators. nv_fp8_storage_t nv_fp8_e5m2:: x Storage variable contains the fp8 floating-point data. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const long long int val Constructor from long long int data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=longint val Constructor from long int data type, relies on NV_SATFINITE behavior for out-of-range values. CUDA Math API vRelease Version | 463 Data Structures nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=int val Constructor from int data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const short int val Constructor from short int data type. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const unsigned long long int val Constructor from unsigned long long int data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const unsigned long int val Constructor from unsigned long int data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=unsignedint val Constructor from unsigned int data type, relies on NV_SATFINITE behavior for out-of- range values. CUDA Math API vRelease Version | 464 Data Structures nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const unsigned short int val Constructor from unsigned short int data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=double f Constructor from double data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const cppOperationPrimitive: storage=float f Constructor from float data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const nv_bfloat16 f Constructor from nv_bfloat16 out-of-range values. nv_fp8_e5m2 data type, relies on NV_SATFINITE behavior for nv_fp8_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const half f Constructor from half data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8_e5m2 nv_fp8_e5m2 cppOperationVisibility: visibility=public CUDA Math API vRelease Version | 465 Data Structures Constructor by default. host device operator half () Description Conversion operator to half data type. host device operator nv_bfloat16 () Description Conversion operator to nv_bfloat16 data type. host device operator bool () Description Conversion operator to bool data type. +0 and -0 inputs convert to false. Non-zero inputs convert to true. host device operator char () Description Conversion operator to an implementation defined char data type. Detects signedness of the char type and proceeds accordingly, see further details in signed and unsigned char operators. Clamps inputs to the output range. NaN inputs convert to zero. host device operator double () Description Conversion operator to double data type. host device operator float () Description Conversion operator to float data type. CUDA Math API vRelease Version | 466 Data Structures host device operator int () Description Conversion operator to int data type. Clamps too large inputs to the output range. NaN inputs convert to zero. host device operator long int () Description Conversion operator to long int data type. Clamps too large inputs to the output range. NaN inputs convert to zero if output type is 32-bit. NaN inputs convert to 0x8000000000000000ULL if output type is 64-bit. host device operator long long int () Description Conversion operator to long long int data type. Clamps too large inputs to the output range. NaN inputs convert to 0x8000000000000000LL. host device operator short int () Description Conversion operator to short int data type. Clamps too large inputs to the output range. NaN inputs convert to zero. host device operator signed char () Description Conversion operator to signed char data type. Clamps too large inputs to the output range. NaN inputs convert to zero. host device operator unsigned char () Description Conversion operator to unsigned char data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero. CUDA Math API vRelease Version | 467 Data Structures host device operator unsigned int () Description Conversion operator to unsigned int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero. host device operator unsigned long int () Description Conversion operator to unsigned long int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero if output type is 32-bit. NaN inputs convert to 0x8000000000000000ULL if output type is 64-bit. host device operator unsigned long long int () Description Conversion operator to unsigned long long int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to 0x8000000000000000ULL. host device operator unsigned short int () Description Conversion operator to unsigned short int data type. Clamps negative and too large inputs to the output range. NaN inputs convert to zero. 2.11. nv_fp8x2_e4m3 nv_fp8x2_e4m3 datatype Struct Reference This structure implements the datatype for storage and operations on the vector of two fp8 values of e4m3 kind each: with 1 sign, 4 exponent, 1 implicit and 3 explicit mantissa bits. The encoding doesn't support Infinity. NaNs are limited to 0x7F and 0xFF values. nv_fp8x2_storage_t nv_fp8x2_e4m3:: x Storage variable contains the vector of two fp8 floating-point data values. CUDA Math API vRelease Version | 468 Data Structures nv_fp8x2_e4m3 nv_fp8x2_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const double2 f Constructor from double2 data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8x2_e4m3 nv_fp8x2_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const float2 f Constructor from float2 data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8x2_e4m3 nv_fp8x2_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const nv_bfloat162 f Constructor from nv_bfloat162 out-of-range values. nv_fp8x2_e4m3 data type, relies on NV_SATFINITE behavior for nv_fp8x2_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const half2 f Constructor from half2 data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8x2_e4m3 nv_fp8x2_e4m3 cppOperationVisibility: visibility=public Constructor by default. host device operator half2 () Description Conversion operator to half2 data type. CUDA Math API vRelease Version | 469 Data Structures host device operator float2 () Description Conversion operator to float2 data type. 2.12. nv_fp8x2_e5m2 nv_fp8x2_e5m2 datatype Struct Reference This structure implements the datatype for handling two fp8 floating-point numbers of e5m2 kind each: with 1 sign, 5 exponent, 1 implicit and 2 explicit mantissa bits. The structure implements converting constructors and operators. nv_fp8x2_storage_t nv_fp8x2_e5m2:: x Storage variable contains the vector of two fp8 floating-point data values. nv_fp8x2_e5m2 nv_fp8x2_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const double2 f Constructor from double2 data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8x2_e5m2 nv_fp8x2_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const float2 f Constructor from float2 data type, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8x2_e5m2 nv_fp8x2_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const nv_bfloat162 f Constructor from nv_bfloat162 out-of-range values. data type, relies on NV_SATFINITE behavior for CUDA Math API vRelease Version | 470 Data Structures nv_fp8x2_e5m2 nv_fp8x2_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const half2 f Constructor from half2 data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8x2_e5m2 nv_fp8x2_e5m2 cppOperationVisibility: visibility=public Constructor by default. host device operator half2 () Description Conversion operator to half2 data type. host device operator float2 () Description Conversion operator to float2 data type. 2.13. nv_fp8x4_e4m3 nv_fp8x4_e4m3 datatype Struct Reference This structure implements the datatype for storage and operations on the vector of four fp8 values of e4m3 kind each: with 1 sign, 4 exponent, 1 implicit and 3 explicit mantissa bits. The encoding doesn't support Infinity. NaNs are limited to 0x7F and 0xFF values. nv_fp8x4_storage_t nv_fp8x4_e4m3:: x Storage variable contains the vector of four fp8 floating-point data values. nv_fp8x4_e4m3 nv_fp8x4_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const double4 f CUDA Math API vRelease Version | 471 Data Structures Constructor from double4 vector data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8x4_e4m3 nv_fp8x4_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const float4 f Constructor from float4 vector data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8x4_e4m3 nv_fp8x4_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const nv_bfloat162 flo cppOperationConst: const=const nv_bfloat162 fhi Constructor from a pair of nv_bfloat162 data type values, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8x4_e4m3 nv_fp8x4_e4m3 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const half2 flo cppOperationConst: const=const half2 fhi Constructor from a pair of half2 data type values, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8x4_e4m3 nv_fp8x4_e4m3 cppOperationVisibility: visibility=public Constructor by default. host device operator float4 () Description Conversion operator to float4 vector data type. 2.14. nv_fp8x4_e5m2 nv_fp8x4_e5m2 datatype Struct Reference This structure implements the datatype for handling four fp8 floating-point numbers of e5m2 kind each: with 1 sign, 5 exponent, 1 implicit and 2 explicit mantissa bits. CUDA Math API vRelease Version | 472 Data Structures The structure implements converting constructors and operators. nv_fp8x4_storage_t nv_fp8x4_e5m2:: x Storage variable contains the vector of four fp8 floating-point data values. nv_fp8x4_e5m2 nv_fp8x4_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const double4 f Constructor from double4 vector data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8x4_e5m2 nv_fp8x4_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const float4 f Constructor from float4 vector data type, relies on NV_SATFINITE behavior for out-of- range values. nv_fp8x4_e5m2 nv_fp8x4_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const nv_bfloat162 flo cppOperationConst: const=const nv_bfloat162 fhi Constructor from a pair of nv_bfloat162 data type values, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8x4_e5m2 nv_fp8x4_e5m2 cppOperationVisibility: visibility=public cppOperationInline: inline=inline cppConstructorExplicit: explicit=explicit host device cppOperationConst: const=const half2 flo cppOperationConst: const=const half2 fhi Constructor from a pair of half2 data type values, relies on NV_SATFINITE behavior for out-of-range values. nv_fp8x4_e5m2 nv_fp8x4_e5m2 cppOperationVisibility: visibility=public Constructor by default. CUDA Math API vRelease Version | 473 Data Structures host device operator float4 () Description Conversion operator to float4 vector data type. CUDA Math API vRelease Version | 474 Chapter 3. Data Fields Here is a list of all documented struct and union fields with links to the struct/union documentation for each field: _ half() half half2() half2 nv_bfloat16() nv_bfloat16 nv_bfloat162() nv_bfloat162 nv_fp8_e4m3() nv_fp8_e4m3 nv_fp8_e5m2() nv_fp8_e5m2 nv_fp8x2_e4m3() nv_fp8x2_e4m3 nv_fp8x2_e5m2() nv_fp8x2_e5m2 nv_fp8x4_e4m3() nv_fp8x4_e4m3 nv_fp8x4_e5m2() nv_fp8x4_e5m2 x nv_fp8x2_e4m3 half nv_fp8x2_e5m2 nv_bfloat16 nv_fp8x4_e4m3 nv_fp8_e4m3 nv_fp8x4_e5m2 nv_fp8_e5m2 CUDA Math API vRelease Version | 475 Data Fields O operator half() nv_fp8_e5m2 nv_fp8_e4m3 operator half2() nv_fp8x2_e4m3 nv_fp8x2_e5m2 operator half2_raw() half2 operator half_raw() half operator nv_bfloat16() nv_fp8_e5m2 nv_fp8_e4m3 operator nv_bfloat162_raw() nv_bfloat162 operator nv_bfloat16_raw() nv_bfloat16 operator bool() nv_bfloat16 nv_fp8_e5m2 nv_fp8_e4m3 half operator char() nv_fp8_e5m2 nv_fp8_e4m3 half nv_bfloat16 operator double() nv_fp8_e5m2 nv_fp8_e4m3 operator float() nv_fp8_e5m2 nv_fp8_e4m3 half nv_bfloat16 operator float2() nv_fp8x2_e5m2 nv_fp8x2_e4m3 operator float4() nv_fp8x4_e5m2 nv_fp8x4_e4m3 CUDA Math API vRelease Version | 476 Data Fields operator int() nv_fp8_e4m3 half nv_bfloat16 nv_fp8_e5m2 operator long() half nv_bfloat16 operator long int() nv_fp8_e5m2 nv_fp8_e4m3 operator long long() half nv_bfloat16 operator long long int() nv_fp8_e5m2 nv_fp8_e4m3 operator short() half nv_bfloat16 operator short int() nv_fp8_e5m2 nv_fp8_e4m3 operator signed char() nv_fp8_e5m2 nv_fp8_e4m3 half nv_bfloat16 operator unsigned char() nv_fp8_e5m2 nv_fp8_e4m3 half nv_bfloat16 operator unsigned int() nv_fp8_e5m2 nv_fp8_e4m3 half nv_bfloat16 operator unsigned long() half nv_bfloat16 operator unsigned long int() nv_fp8_e5m2 CUDA Math API vRelease Version | 477 Data Fields nv_fp8_e4m3 operator unsigned long long() nv_bfloat16 half operator unsigned long long int() nv_fp8_e5m2 nv_fp8_e4m3 operator unsigned short() nv_bfloat16 half operator unsigned short int() nv_fp8_e4m3 nv_fp8_e5m2 operator=() half nv_bfloat16 half nv_bfloat16 half nv_bfloat16 half half2 nv_bfloat16 nv_bfloat162 half nv_bfloat162 half half2 nv_bfloat16 X x half2 nv_bfloat162 Y y half2 nv_bfloat162 CUDA Math API vRelease Version | 478 Notice This document is provided for information purposes only and shall not be regarded as a warranty of a certain functionality, condition, or quality of a product. NVIDIA Corporation (“NVIDIA”) makes no representations or warranties, expressed or implied, as to the accuracy or completeness of the information contained in this document and assumes no responsibility for any errors contained herein. NVIDIA shall have no liability for the consequences or use of such information or for any infringement of patents or other rights of third parties that may result from its use. This document is not a commitment to develop, release, or deliver any Material (defined below), code, or functionality. NVIDIA reserves the right to make corrections, modifications, enhancements, improvements, and any other changes to this document, at any time without notice. Customer should obtain the latest relevant information before placing orders and should verify that such information is current and complete. NVIDIA products are sold subject to the NVIDIA standard terms and conditions of sale supplied at the time of order acknowledgement, unless otherwise agreed in an individual sales agreement signed by authorized representatives of NVIDIA and customer (“Terms of Sale”). NVIDIA hereby expressly objects to applying any customer general terms and conditions with regards to the purchase of the NVIDIA product referenced in this document. No contractual obligations are formed either directly or indirectly by this document. OpenCL OpenCL is a trademark of Apple Inc. used under license to the Khronos Group Inc. Trademarks NVIDIA and the NVIDIA logo are trademarks or registered trademarks of NVIDIA Corporation in the U.S. and other countries. Other company and product names may be trademarks of the respective companies with which they are associated. Copyright © 2007-2023 NVIDIA Corporation & affiliates. All rights reserved. NVIDIA Corporation | 2788 San Tomas Expressway, Santa Clara, CA 95051 https://www.nvidia.com